{
  "api/GameFrameX.Core.Abstractions.Agent.IComponentAgent.html": {
    "href": "api/GameFrameX.Core.Abstractions.Agent.IComponentAgent.html",
    "title": "Interface IComponentAgent | GameFrameX.Server",
    "summary": "Interface IComponentAgent Namespace GameFrameX.Core.Abstractions.Agent Assembly GameFrameX.Core.dll 组件代理接口 public interface IComponentAgent : IWorker Inherited Members IWorker.Tell(Action, int, CancellationToken) IWorker.Tell(Func<Task>, int, CancellationToken) IWorker.SendAsync(Action, int, CancellationToken) IWorker.SendAsync<T>(Func<T>, int, CancellationToken) IWorker.SendAsync(Func<Task>, int, bool, CancellationToken) IWorker.SendAsync<T>(Func<Task<T>>, int, CancellationToken) Properties ActorId 获取Actor的唯一标识 用于唯一标识一个Actor实例的ID值 long ActorId { get; } Property Value long Owner 获取或设置组件的所有者 表示当前组件所属的父级组件实例 IComponent Owner { get; } Property Value IComponent OwnerType 获取所有者的类型 表示所有者组件的类型标识，使用ushort类型存储 ushort OwnerType { get; } Property Value ushort Methods Active() 激活组件代理 用于初始化并启用组件代理的功能 Task<bool> Active() Returns Task<bool> AfterActivation() 组件激活后的回调方法 Task<bool> AfterActivation() Returns Task<bool> 表示异步操作的任务 Remarks 在组件完成激活流程后执行，可以用于处理一些初始化后的逻辑 AfterInActivation() 组件反激活后的回调方法 Task<bool> AfterInActivation() Returns Task<bool> 表示异步操作的任务 Remarks 在组件完成反激活流程后执行，可以用于确认清理完成或执行最终操作 BeforeActivation() 组件激活前的回调方法 Task<bool> BeforeActivation() Returns Task<bool> 表示异步操作的任务 Remarks 在组件开始激活流程前执行，可以用于进行一些预处理操作 BeforeInActivation() 组件反激活前的回调方法 Task<bool> BeforeInActivation() Returns Task<bool> 表示异步操作的任务 Remarks 在组件开始反激活流程前执行，可以用于保存状态或清理资源 GetComponentAgent(Type, bool) 根据代理类型获取代理组件 Task<IComponentAgent> GetComponentAgent(Type agentType, bool isNew = true) Parameters agentType Type 代理类型 isNew bool 是否创建新实例，默认为true Returns Task<IComponentAgent> 代理组件实例 Remarks 通过Type类型参数获取或创建对应的组件代理实例 GetComponentAgent<T>(bool) 根据泛型代理类型获取代理组件 Task<T> GetComponentAgent<T>(bool isNew = true) where T : IComponentAgent Parameters isNew bool 是否创建新实例，默认为true Returns Task<T> 指定类型的代理组件实例 Type Parameters T 代理组件的类型 Remarks 泛型方法版本，用于获取或创建指定类型的组件代理实例 Inactive() 反激活组件代理 Task Inactive() Returns Task 一个表示异步操作的任务 Remarks 用于停用组件代理并清理相关资源，这是一个异步操作 SetOwner(IComponent) 设置组件的所有者 void SetOwner(IComponent owner) Parameters owner IComponent 所有者组件实例 Remarks 用于设置或更改当前组件的所有者，建立组件间的从属关系"
  },
  "api/GameFrameX.Core.Abstractions.Agent.html": {
    "href": "api/GameFrameX.Core.Abstractions.Agent.html",
    "title": "Namespace GameFrameX.Core.Abstractions.Agent | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Abstractions.Agent Interfaces IComponentAgent 组件代理接口"
  },
  "api/GameFrameX.Core.Abstractions.Attribute.ComponentTypeAttribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Attribute.ComponentTypeAttribute.html",
    "title": "Class ComponentTypeAttribute | GameFrameX.Server",
    "summary": "Class ComponentTypeAttribute Namespace GameFrameX.Core.Abstractions.Attribute Assembly GameFrameX.Core.dll 组件类型标记 [AttributeUsage(AttributeTargets.Class)] public class ComponentTypeAttribute : Attribute Inheritance object Attribute ComponentTypeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ComponentTypeAttribute(ushort) 组件类型 public ComponentTypeAttribute(ushort type) Parameters type ushort 组件类型,值应大于0且小于ActorType.Max并且不为ActorType.Separator Properties Type 组件类型 public ushort Type { get; } Property Value ushort"
  },
  "api/GameFrameX.Core.Abstractions.Attribute.DiscardAttribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Attribute.DiscardAttribute.html",
    "title": "Class DiscardAttribute | GameFrameX.Server",
    "summary": "Class DiscardAttribute Namespace GameFrameX.Core.Abstractions.Attribute Assembly GameFrameX.Core.dll 此方法使用了弃元运算符，不会等待执行(将强制追加到队列末端执行) [AttributeUsage(AttributeTargets.Method)] public sealed class DiscardAttribute : Attribute Inheritance object Attribute DiscardAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/GameFrameX.Core.Abstractions.Attribute.FuncAttribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Attribute.FuncAttribute.html",
    "title": "Class FuncAttribute | GameFrameX.Server",
    "summary": "Class FuncAttribute Namespace GameFrameX.Core.Abstractions.Attribute Assembly GameFrameX.Core.dll 有关组件的功能属性 [AttributeUsage(AttributeTargets.Class)] public class FuncAttribute : Attribute Inheritance object Attribute FuncAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FuncAttribute(short) 初始化功能属性 public FuncAttribute(short func) Parameters func short 功能标识 Fields Func 功能标识 public readonly short Func Field Value short"
  },
  "api/GameFrameX.Core.Abstractions.Attribute.ServiceAttribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Attribute.ServiceAttribute.html",
    "title": "Class ServiceAttribute | GameFrameX.Server",
    "summary": "Class ServiceAttribute Namespace GameFrameX.Core.Abstractions.Attribute Assembly GameFrameX.Core.dll 此方法会提供给其他Actor访问(对外提供服务) [AttributeUsage(AttributeTargets.Method)] public sealed class ServiceAttribute : Attribute Inheritance object Attribute ServiceAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/GameFrameX.Core.Abstractions.Attribute.ThreadSafeAttribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Attribute.ThreadSafeAttribute.html",
    "title": "Class ThreadSafeAttribute | GameFrameX.Server",
    "summary": "Class ThreadSafeAttribute Namespace GameFrameX.Core.Abstractions.Attribute Assembly GameFrameX.Core.dll 此方法线程安全 [AttributeUsage(AttributeTargets.Method)] public sealed class ThreadSafeAttribute : Attribute Inheritance object Attribute ThreadSafeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/GameFrameX.Core.Abstractions.Attribute.TimeOutAttribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Attribute.TimeOutAttribute.html",
    "title": "Class TimeOutAttribute | GameFrameX.Server",
    "summary": "Class TimeOutAttribute Namespace GameFrameX.Core.Abstractions.Attribute Assembly GameFrameX.Core.dll 超时时间(毫秒) [AttributeUsage(AttributeTargets.Method)] public sealed class TimeOutAttribute : Attribute Inheritance object Attribute TimeOutAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TimeOutAttribute(int) 超时时间 public TimeOutAttribute(int timeOut) Parameters timeOut int 时间.单位毫秒 TimeOutAttribute(TimeSpan) 超时时间 public TimeOutAttribute(TimeSpan timeOut) Parameters timeOut TimeSpan Properties TimeOut 超时时间 public int TimeOut { get; } Property Value int"
  },
  "api/GameFrameX.Core.Abstractions.Attribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Attribute.html",
    "title": "Namespace GameFrameX.Core.Abstractions.Attribute | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Abstractions.Attribute Classes ComponentTypeAttribute 组件类型标记 DiscardAttribute 此方法使用了弃元运算符，不会等待执行(将强制追加到队列末端执行) FuncAttribute 有关组件的功能属性 ServiceAttribute 此方法会提供给其他Actor访问(对外提供服务) ThreadSafeAttribute 此方法线程安全 TimeOutAttribute 超时时间(毫秒)"
  },
  "api/GameFrameX.Core.Abstractions.Events.EventInfoAttribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Events.EventInfoAttribute.html",
    "title": "Class EventInfoAttribute | GameFrameX.Server",
    "summary": "Class EventInfoAttribute Namespace GameFrameX.Core.Abstractions.Events Assembly GameFrameX.Core.dll 事件监听器 [AttributeUsage(AttributeTargets.Class)] public class EventInfoAttribute : Attribute Inheritance object Attribute EventInfoAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EventInfoAttribute(int) 事件监听器 public EventInfoAttribute(int eventId) Parameters eventId int 事件id Properties EventId 事件id public int EventId { get; } Property Value int"
  },
  "api/GameFrameX.Core.Abstractions.Events.GameEventArgs.html": {
    "href": "api/GameFrameX.Core.Abstractions.Events.GameEventArgs.html",
    "title": "Class GameEventArgs | GameFrameX.Server",
    "summary": "Class GameEventArgs Namespace GameFrameX.Core.Abstractions.Events Assembly GameFrameX.Core.dll 事件参数基类 public abstract class GameEventArgs : EventArgs Inheritance object EventArgs GameEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/GameFrameX.Core.Abstractions.Events.IEventListener.html": {
    "href": "api/GameFrameX.Core.Abstractions.Events.IEventListener.html",
    "title": "Interface IEventListener | GameFrameX.Server",
    "summary": "Interface IEventListener Namespace GameFrameX.Core.Abstractions.Events Assembly GameFrameX.Core.dll 事件监听器接口 每个实例其实都是单例的，用于处理特定类型的事件 实现此接口的类需要保证线程安全 public interface IEventListener Properties AgentType 获取事件代理类型 用于标识此监听器可以处理哪种类型的事件代理 Type AgentType { get; } Property Value Type 事件代理的类型 Methods HandleEvent(IComponentAgent, GameEventArgs) 事件处理函数 处理带有组件代理的事件，可以访问和操作组件的状态 Task HandleEvent(IComponentAgent agent, GameEventArgs gameEventArgs) Parameters agent IComponentAgent 组件代理，提供对组件的访问能力 gameEventArgs GameEventArgs 需要处理的事件对象 Returns Task 一个表示异步操作的任务，当事件处理完成时完成 HandleEvent(GameEventArgs) 事件处理函数 处理不需要组件代理的独立事件 Task HandleEvent(GameEventArgs gameEventArgs) Parameters gameEventArgs GameEventArgs 需要处理的事件对象 Returns Task 一个表示异步操作的任务，当事件处理完成时完成"
  },
  "api/GameFrameX.Core.Abstractions.Events.html": {
    "href": "api/GameFrameX.Core.Abstractions.Events.html",
    "title": "Namespace GameFrameX.Core.Abstractions.Events | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Abstractions.Events Classes EventInfoAttribute 事件监听器 GameEventArgs 事件参数基类 Interfaces IEventListener 事件监听器接口 每个实例其实都是单例的，用于处理特定类型的事件 实现此接口的类需要保证线程安全"
  },
  "api/GameFrameX.Core.Abstractions.Exception.AssertionArgumentException.html": {
    "href": "api/GameFrameX.Core.Abstractions.Exception.AssertionArgumentException.html",
    "title": "Class AssertionArgumentException | GameFrameX.Server",
    "summary": "Class AssertionArgumentException Namespace GameFrameX.Core.Abstractions.Exception Assembly GameFrameX.Core.dll 断言异常 public abstract class AssertionArgumentException : Exception, ISerializable Inheritance object Exception AssertionArgumentException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AssertionArgumentException(int, string) 构造 protected AssertionArgumentException(int errorCode, string message) Parameters errorCode int 错误码 message string 错误信息 Properties ErrorCode 错误码 public int ErrorCode { get; } Property Value int"
  },
  "api/GameFrameX.Core.Abstractions.Exception.html": {
    "href": "api/GameFrameX.Core.Abstractions.Exception.html",
    "title": "Namespace GameFrameX.Core.Abstractions.Exception | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Abstractions.Exception Classes AssertionArgumentException 断言异常"
  },
  "api/GameFrameX.Core.Abstractions.IActor.html": {
    "href": "api/GameFrameX.Core.Abstractions.IActor.html",
    "title": "Interface IActor | GameFrameX.Server",
    "summary": "Interface IActor Namespace GameFrameX.Core.Abstractions Assembly GameFrameX.Core.dll IActor 接口定义 定义了一个Actor（参与者）的基本行为和属性，用于管理游戏中的实体对象 public interface IActor : IWorker Inherited Members IWorker.Tell(Action, int, CancellationToken) IWorker.Tell(Func<Task>, int, CancellationToken) IWorker.SendAsync(Action, int, CancellationToken) IWorker.SendAsync<T>(Func<T>, int, CancellationToken) IWorker.SendAsync(Func<Task>, int, bool, CancellationToken) IWorker.SendAsync<T>(Func<Task<T>>, int, CancellationToken) Properties AutoRecycle 获取是否自动回收 标识当前Actor是否可以被系统自动回收释放 bool AutoRecycle { get; } Property Value bool Id 获取或设置 IActor 的唯一标识 用于在系统中唯一标识一个Actor实例 long Id { get; set; } Property Value long ScheduleIdSet 获取订阅的哈希列表 存储当前Actor订阅的所有调度器ID HashSet<long> ScheduleIdSet { get; } Property Value HashSet<long> Type 获取或设置 Actor 类型 用于标识Actor的具体类型，便于系统进行分类管理 ushort Type { get; set; } Property Value ushort WorkerActor 获取工作 Actor 返回当前Actor的工作实例，用于处理具体的业务逻辑 IWorkerActor WorkerActor { get; } Property Value IWorkerActor Methods AddOnceRecycleCallback(Action) 添加一个在Actor回收时执行一次的回调事件 void AddOnceRecycleCallback(Action action) Parameters action Action 要执行的回调方法 Remarks 该回调事件只会在Actor被回收时触发一次，之后会自动移除。 通常用于: 执行一次性的清理操作 触发状态变更通知 记录回收日志等场景 ClearAgent() 清理全部代理 清除当前Actor关联的所有组件代理实例 void ClearAgent() ClearData() 清除Actor中存储的所有数据 void ClearData() Remarks 该方法会清空Actor中所有通过SetData方法存储的数据。 清除后所有数据将无法恢复，请谨慎使用。 通常在Actor被回收或重置时调用此方法。 CrossDay(int) Actor 跨天处理 处理游戏服务器跨天时Actor需要执行的相关逻辑 Task CrossDay(int serverDay) Parameters serverDay int 服务器运行天数，表示服务器运行的累计天数 Returns Task 一个表示异步操作的任务 GetActiveComponentAgents() 获取所有已激活的组件代理实例 List<IComponentAgent> GetActiveComponentAgents() Returns List<IComponentAgent> 返回包含所有已激活组件代理实例的列表 Remarks 遍历组件映射字典(_componentsMap),筛选出所有处于激活状态(IsActive=true)的组件, 并获取它们对应的代理实例。这个方法通常用于需要批量处理或遍历所有活跃组件的场景。 GetComponentAgent(Type, bool) 根据组件类型获取对应的 IComponentAgent 获取指定类型的组件代理实例，如果不存在且isNew为true则创建新实例 Task<IComponentAgent> GetComponentAgent(Type agentType, bool isNew = true) Parameters agentType Type 组件类型，指定要获取的组件的具体类型 isNew bool 是否当获取为空的时候默认创建，默认值为true Returns Task<IComponentAgent> 一个表示异步操作的任务，返回 IComponentAgent 实例 GetComponentAgent<T>(bool) 根据组件类型获取对应的 IComponentAgent 泛型方法版本，用于获取指定类型的组件代理实例 Task<T> GetComponentAgent<T>(bool isNew = true) where T : IComponentAgent Parameters isNew bool 是否当获取为空的时候默认创建，默认值为true Returns Task<T> 一个表示异步操作的任务，返回指定类型的 IComponentAgent 实例 Type Parameters T 组件类型，必须实现IComponentAgent接口 GetData<T>(string) 获取Actor中存储的数据 T GetData<T>(string key) Parameters key string 数据的键名 Returns T 返回指定类型的数据值 Type Parameters T 要获取的数据类型 Remarks 如果指定的键不存在或类型不匹配，可能会抛出异常。 使用前建议先确认数据是否存在。 Inactive() 反激活所有组件 使当前Actor的所有组件进入非激活状态，通常在Actor被回收前调用 Task Inactive() Returns Task 一个表示异步操作的任务 OnRecycle() Actor 回收时的处理方法,该方法在Actor被回收时自动调用，该函数不能由外部调用。只能由ActorManager内部调用 Task OnRecycle() Returns Task 表示异步操作的任务 Remarks 当 Actor 被系统回收时调用此方法。 用于执行必要的清理工作，如: 释放占用的资源 清理组件状态 保存需要持久化的数据 取消订阅的事件 断开网络连接等 RemoveData(string) 移除Actor中存储的数据 bool RemoveData(string key) Parameters key string 要移除的数据键名 Returns bool 如果成功移除数据返回true，如果键不存在返回false Remarks 从Actor的数据存储中移除指定键的数据。 如果键不存在，则不会产生任何效果。 SetAutoRecycle(bool) 设置自动回收标记 配置当前Actor是否允许被系统自动回收 void SetAutoRecycle(bool autoRecycle) Parameters autoRecycle bool 是否自动回收，true表示允许自动回收，false表示禁止自动回收 SetData<T>(string, T) 设置Actor的数据 void SetData<T>(string key, T value) Parameters key string 数据的键名 value T 要存储的数据值 Type Parameters T 要存储的数据类型 Remarks 用于在Actor中存储任意类型的数据，通过键值对的方式进行管理。 如果键已存在，则会覆盖原有的值。"
  },
  "api/GameFrameX.Core.Abstractions.IComponent.html": {
    "href": "api/GameFrameX.Core.Abstractions.IComponent.html",
    "title": "Interface IComponent | GameFrameX.Server",
    "summary": "Interface IComponent Namespace GameFrameX.Core.Abstractions Assembly GameFrameX.Core.dll 组件接口 public interface IComponent Properties Actor Actor对象 IActor Actor { get; set; } Property Value IActor"
  },
  "api/GameFrameX.Core.Abstractions.IState.html": {
    "href": "api/GameFrameX.Core.Abstractions.IState.html",
    "title": "Interface IState | GameFrameX.Server",
    "summary": "Interface IState Namespace GameFrameX.Core.Abstractions Assembly GameFrameX.Core.dll 状态接口 用于管理和维护对象的状态信息 public interface IState Methods ReadStateAsync() 读取状态 Task ReadStateAsync() Returns Task 一个表示异步操作的任务，该任务在状态读取完成时完成 Remarks 此方法用于异步读取对象的当前状态信息 通常用于从持久化存储（如数据库、文件等）中加载状态 在对象初始化或需要刷新状态时调用 实现此方法时应考虑异常处理和并发访问的情况 WriteStateAsync() 更新状态 Task WriteStateAsync() Returns Task 一个表示异步操作的任务，该任务在状态更新完成时完成 Remarks 此方法用于异步更新对象的状态信息 在状态发生变化时应调用此方法以保持状态的同步 负责将当前内存中的状态持久化到存储介质中 建议在以下情况调用此方法： 状态数据发生重要变更时 定期保存检查点时 系统关闭前的状态保存 实现时需要注意： 确保数据一致性 处理并发写入情况 考虑性能影响，适当使用缓存策略"
  },
  "api/GameFrameX.Core.Abstractions.IWorker.html": {
    "href": "api/GameFrameX.Core.Abstractions.IWorker.html",
    "title": "Interface IWorker | GameFrameX.Server",
    "summary": "Interface IWorker Namespace GameFrameX.Core.Abstractions Assembly GameFrameX.Core.dll 工作者接口定义 用于处理异步和同步的工作任务，支持超时和取消操作 public interface IWorker Methods SendAsync(Action, int, CancellationToken) 异步发送无返回值的工作指令 异步执行指定的工作内容 Task SendAsync(Action work, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Action 需要执行的工作内容委托 timeOut int 执行超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 用于取消操作的令牌 Returns Task 表示异步操作的任务对象 SendAsync(Func<Task>, int, bool, CancellationToken) 异步发送有返回值的工作指令 异步执行指定的异步工作内容 Task SendAsync(Func<Task> work, int timeOut = -1, bool checkLock = true, CancellationToken cancellationToken = default) Parameters work Func<Task> 需要执行的异步工作内容委托 timeOut int 执行超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut checkLock bool 是否在执行前检查锁定状态 cancellationToken CancellationToken 用于取消操作的令牌 Returns Task 表示嵌套异步操作的任务对象 SendAsync<T>(Func<Task<T>>, int, CancellationToken) 异步发送有返回值的工作指令 异步执行指定的异步工作内容并返回结果 Task<T> SendAsync<T>(Func<Task<T>> work, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Func<Task<T>> 需要执行的异步工作内容委托 timeOut int 执行超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 用于取消操作的令牌 Returns Task<T> 包含执行结果的异步任务对象 Type Parameters T 返回结果的类型 SendAsync<T>(Func<T>, int, CancellationToken) 异步发送有返回值的工作指令 异步执行指定的同步工作内容并返回结果 Task<T> SendAsync<T>(Func<T> work, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Func<T> 需要执行的工作内容委托 timeOut int 执行超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 用于取消操作的令牌 Returns Task<T> 包含执行结果的异步任务对象 Type Parameters T 返回结果的类型 Tell(Action, int, CancellationToken) 发送无返回值的工作指令 同步执行指定的工作内容 void Tell(Action work, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Action 需要执行的工作内容委托 timeOut int 执行超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 用于取消操作的令牌 Tell(Func<Task>, int, CancellationToken) 发送有返回值的工作指令 同步执行指定的异步工作内容 void Tell(Func<Task> work, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Func<Task> 需要执行的异步工作内容委托 timeOut int 执行超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 用于取消操作的令牌"
  },
  "api/GameFrameX.Core.Abstractions.IWorkerActor.html": {
    "href": "api/GameFrameX.Core.Abstractions.IWorkerActor.html",
    "title": "Interface IWorkerActor | GameFrameX.Server",
    "summary": "Interface IWorkerActor Namespace GameFrameX.Core.Abstractions Assembly GameFrameX.Core.dll 工作Actor接口定义 用于处理异步任务队列的Actor接口，继承自IWorker接口 public interface IWorkerActor : IWorker Inherited Members IWorker.Tell(Action, int, CancellationToken) IWorker.Tell(Func<Task>, int, CancellationToken) IWorker.SendAsync(Action, int, CancellationToken) IWorker.SendAsync<T>(Func<T>, int, CancellationToken) IWorker.SendAsync(Func<Task>, int, bool, CancellationToken) IWorker.SendAsync<T>(Func<Task<T>>, int, CancellationToken) Methods Enqueue(Action, long, bool, int, CancellationToken) 将无返回值的委托入队 将Action类型的委托添加到任务队列中进行异步处理 Task Enqueue(Action work, long callChainId, bool discard = false, int timeOut = 2147483647, CancellationToken cancellationToken = default) Parameters work Action 要执行的无返回值委托方法 callChainId long 用于跟踪调用链的唯一标识符 discard bool 当为true时，表示强制将任务入队，即使队列已满也会尝试入队 timeOut int 任务执行的超时时间，默认为int.MaxValue cancellationToken CancellationToken 用于取消操作的令牌 Returns Task 表示异步操作的Task对象 Enqueue(Func<Task>, long, bool, int, CancellationToken) 将返回Task的委托入队 将Func 类型的委托添加到任务队列中进行异步处理 Task Enqueue(Func<Task> work, long callChainId, bool discard = false, int timeOut = 2147483647, CancellationToken cancellationToken = default) Parameters work Func<Task> 要执行的返回Task的异步委托方法 callChainId long 用于跟踪调用链的唯一标识符 discard bool 当为true时，表示强制将任务入队，即使队列已满也会尝试入队 timeOut int 任务执行的超时时间，默认为int.MaxValue cancellationToken CancellationToken 用于取消操作的令牌 Returns Task 表示异步操作的Task对象 Enqueue<T>(Func<Task<T>>, long, bool, int, CancellationToken) 将返回Task 的委托入队 将Func >类型的委托添加到任务队列中进行异步处理 Task<T> Enqueue<T>(Func<Task<T>> work, long callChainId, bool discard = false, int timeOut = 2147483647, CancellationToken cancellationToken = default) Parameters work Func<Task<T>> 要执行的返回Task 的异步委托方法 callChainId long 用于跟踪调用链的唯一标识符 discard bool 当为true时，表示强制将任务入队，即使队列已满也会尝试入队 timeOut int 任务执行的超时时间，默认为int.MaxValue cancellationToken CancellationToken 用于取消操作的令牌 Returns Task<T> 表示异步操作的Task 对象，其结果为委托的返回值 Type Parameters T 异步操作返回值的类型 Enqueue<T>(Func<T>, long, bool, int, CancellationToken) 将有返回值的委托入队 将Func 类型的委托添加到任务队列中进行异步处理 Task<T> Enqueue<T>(Func<T> work, long callChainId, bool discard = false, int timeOut = 2147483647, CancellationToken cancellationToken = default) Parameters work Func<T> 要执行的有返回值委托方法 callChainId long 用于跟踪调用链的唯一标识符 discard bool 当为true时，表示强制将任务入队，即使队列已满也会尝试入队 timeOut int 任务执行的超时时间，默认为int.MaxValue cancellationToken CancellationToken 用于取消操作的令牌 Returns Task<T> 表示异步操作的Task 对象，其结果为委托的返回值 Type Parameters T 委托返回值的类型 IsNeedEnqueue() 判断是否需要入队 检查当前任务是否需要进入队列进行处理 (bool needEnqueue, long chainId) IsNeedEnqueue() Returns (bool needEnqueue, long chainId) 返回一个元组，包含两个值：needEnqueue(bool类型，表示是否需要入队)和chainId(long类型，表示调用链ID)"
  },
  "api/GameFrameX.Core.Abstractions.RuntimeContext.html": {
    "href": "api/GameFrameX.Core.Abstractions.RuntimeContext.html",
    "title": "Class RuntimeContext | GameFrameX.Server",
    "summary": "Class RuntimeContext Namespace GameFrameX.Core.Abstractions Assembly GameFrameX.Core.dll 运行时上下文 public static class RuntimeContext Inheritance object RuntimeContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentActor 当前ActorID public static long CurrentActor { get; } Property Value long CurrentChainId 当前链ID public static long CurrentChainId { get; } Property Value long Methods ResetContext() 重置上下文 public static void ResetContext() SetContext(long, long) 设置上下文 public static void SetContext(long callChainId, long actorId) Parameters callChainId long actorId long"
  },
  "api/GameFrameX.Core.Abstractions.Timer.ICrossDay.html": {
    "href": "api/GameFrameX.Core.Abstractions.Timer.ICrossDay.html",
    "title": "Interface ICrossDay | GameFrameX.Server",
    "summary": "Interface ICrossDay Namespace GameFrameX.Core.Abstractions.Timer Assembly GameFrameX.Core.dll 跨天接口 public interface ICrossDay Methods OnCrossDay(int) 在跨天时触发的方法 Task OnCrossDay(int openServerDay) Parameters openServerDay int 开服天数 Returns Task 表示异步操作的任务"
  },
  "api/GameFrameX.Core.Abstractions.Timer.ICrossHour.html": {
    "href": "api/GameFrameX.Core.Abstractions.Timer.ICrossHour.html",
    "title": "Interface ICrossHour | GameFrameX.Server",
    "summary": "Interface ICrossHour Namespace GameFrameX.Core.Abstractions.Timer Assembly GameFrameX.Core.dll 跨小时接口 public interface ICrossHour Methods OnCrossHour(int) 在跨小时触发的方法 Task OnCrossHour(int hour) Parameters hour int 当前24小时制的小时数 Returns Task 表示异步操作的任务"
  },
  "api/GameFrameX.Core.Abstractions.Timer.html": {
    "href": "api/GameFrameX.Core.Abstractions.Timer.html",
    "title": "Namespace GameFrameX.Core.Abstractions.Timer | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Abstractions.Timer Interfaces ICrossDay 跨天接口 ICrossHour 跨小时接口"
  },
  "api/GameFrameX.Core.Abstractions.html": {
    "href": "api/GameFrameX.Core.Abstractions.html",
    "title": "Namespace GameFrameX.Core.Abstractions | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Abstractions Classes RuntimeContext 运行时上下文 Interfaces IActor IActor 接口定义 定义了一个Actor（参与者）的基本行为和属性，用于管理游戏中的实体对象 IComponent 组件接口 IState 状态接口 用于管理和维护对象的状态信息 IWorker 工作者接口定义 用于处理异步和同步的工作任务，支持超时和取消操作 IWorkerActor 工作Actor接口定义 用于处理异步任务队列的Actor接口，继承自IWorker接口"
  },
  "api/GameFrameX.Core.Actors.Actor.html": {
    "href": "api/GameFrameX.Core.Actors.Actor.html",
    "title": "Class Actor | GameFrameX.Server",
    "summary": "Class Actor Namespace GameFrameX.Core.Actors Assembly GameFrameX.Core.dll Actor类,用于管理和协调组件的生命周期、消息传递等核心功能 public sealed class Actor : IActor, IWorker, IDisposable Inheritance object Actor Implements IActor IWorker IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors Actor(long, ushort) Actor构造函数 public Actor(long id, ushort type) Parameters id long Actor的唯一标识符 type ushort Actor的类型标识 Properties AutoRecycle 标识Actor是否启用自动回收机制 public bool AutoRecycle { get; } Property Value bool Id Actor的唯一标识符 public long Id { get; set; } Property Value long ScheduleIdSet 订阅的定时器任务ID集合 public HashSet<long> ScheduleIdSet { get; } Property Value HashSet<long> Type Actor的类型标识,用于区分不同种类的Actor public ushort Type { get; set; } Property Value ushort WorkerActor 工作者Actor实例,负责具体的任务执行 public IWorkerActor WorkerActor { get; init; } Property Value IWorkerActor Methods AddOnceRecycleCallback(Action) 添加一个在Actor回收时执行一次的回调事件 public void AddOnceRecycleCallback(Action action) Parameters action Action 要执行的回调方法 Remarks 该回调事件只会在Actor被回收时触发一次，之后会自动移除。 通常用于: 执行一次性的清理操作 触发状态变更通知 记录回收日志等场景 ClearAgent() 清理所有组件的缓存代理实例 public void ClearAgent() ClearData() 清除Actor中存储的所有数据 public void ClearData() Remarks 该方法会清空Actor中所有通过SetData方法存储的数据。 清除后所有数据将无法恢复，请谨慎使用。 通常在Actor被回收或重置时调用此方法。 CrossDay(int) 处理跨天逻辑,遍历所有组件并执行跨天操作 public Task CrossDay(int openServerDay) Parameters openServerDay int 开服天数 Returns Task Dispose() 释放资源 public void Dispose() GetActiveComponentAgents() 获取所有已激活的组件代理实例 public List<IComponentAgent> GetActiveComponentAgents() Returns List<IComponentAgent> 返回包含所有已激活组件代理实例的列表 Remarks 遍历组件映射字典(_componentsMap),筛选出所有处于激活状态(IsActive=true)的组件, 并获取它们对应的代理实例。这个方法通常用于需要批量处理或遍历所有活跃组件的场景。 GetComponentAgent(Type, bool) 根据代理类型获取组件代理实例 public Task<IComponentAgent> GetComponentAgent(Type agentType, bool isNew = true) Parameters agentType Type 代理类型 isNew bool 当组件不存在时是否创建新实例,默认为true Returns Task<IComponentAgent> 返回指定类型的组件代理实例 GetComponentAgent<T>(bool) 获取指定类型的组件代理实例 public Task<T> GetComponentAgent<T>(bool isNew = true) where T : IComponentAgent Parameters isNew bool 当组件不存在时是否创建新实例,默认为true Returns Task<T> 返回指定类型的组件代理实例 Type Parameters T 组件代理类型 GetData<T>(string) 获取Actor中存储的数据 public T GetData<T>(string key) Parameters key string 数据的键名 Returns T 返回指定类型的数据值 Type Parameters T 要获取的数据类型 Remarks 如果指定的键不存在或类型不匹配，可能会抛出异常。 使用前建议先确认数据是否存在。 Inactive() 反激活所有组件,使其进入非活动状态 public Task Inactive() Returns Task OnRecycle() Actor 回收时的处理方法 public Task OnRecycle() Returns Task 表示异步操作的任务 Remarks 当 Actor 被系统回收时调用此方法。 用于执行必要的清理工作，如: 释放占用的资源 清理组件状态 保存需要持久化的数据 取消订阅的事件 断开网络连接等 RemoveData(string) 移除Actor中存储的数据 public bool RemoveData(string key) Parameters key string 要移除的数据键名 Returns bool 如果成功移除数据返回true，如果键不存在返回false Remarks 从Actor的数据存储中移除指定键的数据。 如果键不存在，则不会产生任何效果。 SendAsync(Action) 发送无返回值的异步工作指令 public Task SendAsync(Action work) Parameters work Action 要执行的工作内容 Returns Task 返回表示异步操作的Task SendAsync(Action, int, CancellationToken) 发送带超时的异步工作指令 public Task SendAsync(Action work, int timeout, CancellationToken cancellationToken = default) Parameters work Action 要执行的工作内容 timeout int 执行超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 取消操作的令牌 Returns Task 返回表示异步操作的Task SendAsync(Func<Task>, int, bool, CancellationToken) 发送带锁检查的异步工作指令 public Task SendAsync(Func<Task> work, int timeout = -1, bool checkLock = true, CancellationToken cancellationToken = default) Parameters work Func<Task> 要执行的异步工作内容 timeout int 执行超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut checkLock bool 是否检查锁,默认为true cancellationToken CancellationToken 取消操作的令牌 Returns Task 返回表示异步操作的Task SendAsyncWithoutCheck(Func<Task>, int, CancellationToken) 发送不检查锁的异步工作指令 public Task SendAsyncWithoutCheck(Func<Task> work, int timeout = -1, CancellationToken cancellationToken = default) Parameters work Func<Task> 要执行的异步工作内容 timeout int 执行超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 取消操作的令牌 Returns Task 返回表示异步操作的Task SendAsync<T>(Func<Task<T>>, int, CancellationToken) 发送带返回值的异步工作指令 public Task<T> SendAsync<T>(Func<Task<T>> work, int timeout = -1, CancellationToken cancellationToken = default) Parameters work Func<Task<T>> 要执行的异步工作内容 timeout int 执行超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 取消操作的令牌 Returns Task<T> 返回指定类型的异步操作结果 Type Parameters T 返回值类型 SendAsync<T>(Func<T>, int, CancellationToken) 发送带返回值的异步工作指令 public Task<T> SendAsync<T>(Func<T> work, int timeout = -1, CancellationToken cancellationToken = default) Parameters work Func<T> 要执行的工作内容 timeout int 执行超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 取消操作的令牌 Returns Task<T> 返回指定类型的异步操作结果 Type Parameters T 返回值类型 SetAutoRecycle(bool) 设置Actor的自动回收状态 public void SetAutoRecycle(bool autoRecycle) Parameters autoRecycle bool 是否启用自动回收,true表示启用,false表示禁用 SetData<T>(string, T) 设置Actor的数据 public void SetData<T>(string key, T value) Parameters key string 数据的键名 value T 要存储的数据值 Type Parameters T 要存储的数据类型 Remarks 用于在Actor中存储任意类型的数据，通过键值对的方式进行管理。 如果键已存在，则会覆盖原有的值。 Tell(Action, int, CancellationToken) 发送无返回值的工作指令到Actor队列 public void Tell(Action work, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Action 要执行的工作内容 timeOut int 执行执行超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 取消操作的令牌 Tell(Func<Task>, int, CancellationToken) 发送异步工作指令到Actor队列 public void Tell(Func<Task> work, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Func<Task> 要执行的异步工作内容 timeOut int 执行执行超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 取消操作的令牌 ToString() 重写ToString方法,返回Actor的标识信息 public override string ToString() Returns string 返回包含类型和ID的字符串表示"
  },
  "api/GameFrameX.Core.Actors.ActorManager.html": {
    "href": "api/GameFrameX.Core.Actors.ActorManager.html",
    "title": "Class ActorManager | GameFrameX.Server",
    "summary": "Class ActorManager Namespace GameFrameX.Core.Actors Assembly GameFrameX.Core.dll Actor管理器 public static class ActorManager Inheritance object ActorManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ActorForEach(Action<IActor>) 遍历所有actor public static void ActorForEach(Action<IActor> action) Parameters action Action<IActor> 遍历回调 ActorForEach<T>(Action<T>) 遍历所有actor public static void ActorForEach<T>(Action<T> action) where T : IComponentAgent Parameters action Action<T> 遍历actor回调 Type Parameters T 组件代理类型 ActorForEach<T>(Func<T, Task>) 遍历所有actor public static void ActorForEach<T>(Func<T, Task> func) where T : IComponentAgent Parameters func Func<T, Task> 遍历actor回调 Type Parameters T 组件代理类型 AllFinish() 全部完成 public static Task AllFinish() Returns Task 任务集合 CheckIdle() 检查并回收空闲的Actor public static Task CheckIdle() Returns Task 任务 ClearAgent() 清除所有agent public static void ClearAgent() CrossDay(int, ushort) 跨天 public static Task CrossDay(int openServerDay, ushort driverActorType) Parameters openServerDay int 开服天数 driverActorType ushort 驱动Actor类型 Returns Task 任务 GetActiveComponentAgents(long) 根据ActorId获取对应Actor中所有激活状态的组件代理对象 public static List<IComponentAgent> GetActiveComponentAgents(long actorId) Parameters actorId long 要查询的ActorId Returns List<IComponentAgent> 该Actor下所有处于激活状态的组件代理对象列表,如果Actor不存在则返回空列表 Remarks 该方法会返回指定Actor中所有已经被激活的组件代理对象。 如果指定的ActorId不存在,将返回一个空列表。 组件的激活状态由Actor内部维护。 GetComponentAgent<T>(bool) 根据组件类型获取对应的IComponentAgent数据 public static Task<T> GetComponentAgent<T>(bool isNew = true) where T : IComponentAgent Parameters isNew bool 是否当获取为空的时候默认创建，默认值为true Returns Task<T> 组件代理任务 Type Parameters T 组件代理类型 GetComponentAgent<T>(long, bool) 根据ActorId获取对应的IComponentAgent对象 public static Task<T> GetComponentAgent<T>(long actorId, bool isNew = true) where T : IComponentAgent Parameters actorId long ActorId isNew bool 是否当获取为空的时候默认创建，默认值为true Returns Task<T> 组件代理任务 Type Parameters T 组件代理类型 HasActor(long) 是否存在指定的Actor public static bool HasActor(long actorId) Parameters actorId long ActorId Returns bool 是否存在 Remove(long) 删除actor public static Task Remove(long actorId) Parameters actorId long actorId Returns Task 任务 RemoveAll() 删除所有actor public static Task RemoveAll() Returns Task 任务 RoleCrossDay(int) 角色跨天 public static Task RoleCrossDay(int openServerDay) Parameters openServerDay int 开服天数 Returns Task 任务 SaveAll() 保存所有数据 public static Task SaveAll() Returns Task 任务 TimerSave() 定时回存所有数据 public static Task TimerSave() Returns Task 任务"
  },
  "api/GameFrameX.Core.Actors.Impl.ActionAsyncWrapper.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.ActionAsyncWrapper.html",
    "title": "Class ActionAsyncWrapper | GameFrameX.Server",
    "summary": "Class ActionAsyncWrapper Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 异步无返回包装器 public class ActionAsyncWrapper : WorkWrapper Inheritance object WorkWrapper ActionAsyncWrapper Inherited Members WorkWrapper.Owner WorkWrapper.TimeOut WorkWrapper.CallChainId WorkWrapper.SetContext() WorkWrapper.ResetContext() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ActionAsyncWrapper(Func<Task>) 构建无返回值的包装器 public ActionAsyncWrapper(Func<Task> work) Parameters work Func<Task> 工作函数 Properties Tcs 工作等待 public TaskCompletionSource<bool> Tcs { get; } Property Value TaskCompletionSource<bool> Work 工作对象 public Func<Task> Work { get; } Property Value Func<Task> Methods DoTask() 执行 public override Task DoTask() Returns Task ForceSetResult() 强制设置结果 public override void ForceSetResult() GetTrace() 获取调用链 public override string GetTrace() Returns string"
  },
  "api/GameFrameX.Core.Actors.Impl.ActionWrapper.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.ActionWrapper.html",
    "title": "Class ActionWrapper | GameFrameX.Server",
    "summary": "Class ActionWrapper Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 无返回包装器 public class ActionWrapper : WorkWrapper Inheritance object WorkWrapper ActionWrapper Inherited Members WorkWrapper.Owner WorkWrapper.TimeOut WorkWrapper.CallChainId WorkWrapper.SetContext() WorkWrapper.ResetContext() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ActionWrapper(Action) 构建无返回值的包装器 public ActionWrapper(Action work) Parameters work Action 工作函数 Properties Tcs 工作等待 public TaskCompletionSource<bool> Tcs { get; } Property Value TaskCompletionSource<bool> Work 工作对象 public Action Work { get; } Property Value Action Methods DoTask() 执行 public override Task DoTask() Returns Task ForceSetResult() 强制设置结果 public override void ForceSetResult() GetTrace() 获取调用链 public override string GetTrace() Returns string"
  },
  "api/GameFrameX.Core.Actors.Impl.ActorLimit.RuleType.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.ActorLimit.RuleType.html",
    "title": "Enum ActorLimit.RuleType | GameFrameX.Server",
    "summary": "Enum ActorLimit.RuleType Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 可以按需扩展检查规则 public enum ActorLimit.RuleType Fields NoBidirectionCall = 1 禁止双向调用 None = 0 不检查"
  },
  "api/GameFrameX.Core.Actors.Impl.ActorLimit.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.ActorLimit.html",
    "title": "Class ActorLimit | GameFrameX.Server",
    "summary": "Class ActorLimit Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 判断Actor交叉死锁 public static class ActorLimit Inheritance object ActorLimit Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AllowCall(long) 是否允许调用 public static bool AllowCall(long target) Parameters target long 目标 Returns bool 返回是否调用 Init(RuleType) 初始化 public static void Init(ActorLimit.RuleType type) Parameters type ActorLimit.RuleType 检查规则"
  },
  "api/GameFrameX.Core.Actors.Impl.FuncAsyncWrapper-1.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.FuncAsyncWrapper-1.html",
    "title": "Class FuncAsyncWrapper<T> | GameFrameX.Server",
    "summary": "Class FuncAsyncWrapper<T> Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 异步有返回值的泛型包装器 public class FuncAsyncWrapper<T> : WorkWrapper Type Parameters T Inheritance object WorkWrapper FuncAsyncWrapper<T> Inherited Members WorkWrapper.Owner WorkWrapper.TimeOut WorkWrapper.CallChainId WorkWrapper.SetContext() WorkWrapper.ResetContext() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FuncAsyncWrapper(Func<Task<T>>) 构建有返回值的泛型包装器 public FuncAsyncWrapper(Func<Task<T>> work) Parameters work Func<Task<T>> Properties Tcs 工作等待 public TaskCompletionSource<T> Tcs { get; } Property Value TaskCompletionSource<T> Work 工作对象 public Func<Task<T>> Work { get; } Property Value Func<Task<T>> Methods DoTask() 执行 public override Task DoTask() Returns Task ForceSetResult() 强制设置结果 public override void ForceSetResult() GetTrace() 获取调用链 public override string GetTrace() Returns string"
  },
  "api/GameFrameX.Core.Actors.Impl.FuncWrapper-1.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.FuncWrapper-1.html",
    "title": "Class FuncWrapper<T> | GameFrameX.Server",
    "summary": "Class FuncWrapper<T> Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 有返回值的泛型包装器 public class FuncWrapper<T> : WorkWrapper Type Parameters T Inheritance object WorkWrapper FuncWrapper<T> Inherited Members WorkWrapper.Owner WorkWrapper.TimeOut WorkWrapper.CallChainId WorkWrapper.SetContext() WorkWrapper.ResetContext() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FuncWrapper(Func<T>) 构建有返回值的泛型包装器 public FuncWrapper(Func<T> work) Parameters work Func<T> 工作单元 Properties Tcs 工作等待 public TaskCompletionSource<T> Tcs { get; } Property Value TaskCompletionSource<T> Work 工作对象 public Func<T> Work { get; } Property Value Func<T> Methods DoTask() 执行 public override Task DoTask() Returns Task ForceSetResult() 强制设置结果 public override void ForceSetResult() GetTrace() 获取调用链 public override string GetTrace() Returns string"
  },
  "api/GameFrameX.Core.Actors.Impl.WorkWrapper.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.WorkWrapper.html",
    "title": "Class WorkWrapper | GameFrameX.Server",
    "summary": "Class WorkWrapper Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 工作包装器 public abstract class WorkWrapper Inheritance object WorkWrapper Derived ActionAsyncWrapper ActionWrapper FuncAsyncWrapper<T> FuncWrapper<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CallChainId 调用链ID public long CallChainId { get; set; } Property Value long Owner 工作对象 public WorkerActor Owner { get; set; } Property Value WorkerActor TimeOut 超时时间 public int TimeOut { get; set; } Property Value int Methods DoTask() 执行 public abstract Task DoTask() Returns Task ForceSetResult() 强制设置结果 public abstract void ForceSetResult() GetTrace() 获取调用链 public abstract string GetTrace() Returns string ResetContext() 重置上下文 public void ResetContext() SetContext() 设置上下文 protected void SetContext()"
  },
  "api/GameFrameX.Core.Actors.Impl.WorkerActor.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.WorkerActor.html",
    "title": "Class WorkerActor | GameFrameX.Server",
    "summary": "Class WorkerActor Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 工作Actor类,用于处理异步任务队列 public class WorkerActor : IWorkerActor, IWorker Inheritance object WorkerActor Implements IWorkerActor IWorker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WorkerActor(long) 构造函数 public WorkerActor(long id = 0) Parameters id long Actor的唯一标识,如果为0则自动生成 Methods Enqueue(Action, long, bool, int, CancellationToken) 将一个同步Action任务压入Actor的任务队列中执行 public Task Enqueue(Action work, long callChainId, bool discard = false, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Action 要执行的同步Action工作单元 callChainId long 用于追踪任务调用链的唯一标识符 discard bool 是否忽略调试模式下的调用限制检查，true表示强制执行 timeOut int 任务执行的超时时间(毫秒),默认为-1,将采用配置时间ActorQueueTimeOut cancellationToken CancellationToken 用于取消任务的令牌 Returns Task 返回一个Task对象，表示异步操作的完成状态 Enqueue(Func<Task>, long, bool, int, CancellationToken) 将一个异步Task任务压入Actor的任务队列中执行 public Task Enqueue(Func<Task> work, long callChainId, bool discard = false, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Func<Task> 要执行的异步Task工作单元 callChainId long 用于追踪任务调用链的唯一标识符 discard bool 是否忽略调试模式下的调用限制检查，true表示强制执行 timeOut int 任务执行的超时时间(毫秒),默认为-1,将采用配置时间ActorQueueTimeOut cancellationToken CancellationToken 用于取消任务的令牌 Returns Task 返回一个Task对象，表示异步操作的完成状态 Enqueue<T>(Func<Task<T>>, long, bool, int, CancellationToken) 将一个有返回值的异步Task任务压入Actor的任务队列中执行 public Task<T> Enqueue<T>(Func<Task<T>> work, long callChainId, bool discard = false, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Func<Task<T>> 要执行的异步Task工作单元 callChainId long 用于追踪任务调用链的唯一标识符 discard bool 是否忽略调试模式下的调用限制检查，true表示强制执行 timeOut int 任务执行的超时时间(毫秒),默认为-1,将采用配置时间ActorQueueTimeOut cancellationToken CancellationToken 用于取消任务的令牌 Returns Task<T> 返回一个Task 对象，表示异步操作的完成状态和结果 Type Parameters T 异步任务返回值的类型 Enqueue<T>(Func<T>, long, bool, int, CancellationToken) 将一个有返回值的同步Func任务压入Actor的任务队列中执行 public Task<T> Enqueue<T>(Func<T> work, long callChainId, bool discard = false, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Func<T> 要执行的同步Func工作单元 callChainId long 用于追踪任务调用链的唯一标识符 discard bool 是否忽略调试模式下的调用限制检查，true表示强制执行 timeOut int 任务执行的超时时间(毫秒),默认为-1,将采用配置时间ActorQueueTimeOut cancellationToken CancellationToken 用于取消任务的令牌 Returns Task<T> 返回一个Task 对象，表示异步操作的完成状态和结果 Type Parameters T 函数返回值的类型 IsNeedEnqueue() 判断是否需要将任务加入队列 chainId == 0说明是新的异步环境 chainId相等说明是一直await下去的（一种特殊情况是自己入自己的队） public (bool needEnqueue, long chainId) IsNeedEnqueue() Returns (bool needEnqueue, long chainId) 返回一个元组(是否需要入队,调用链ID) NextChainId() 生成新的调用链ID public static long NextChainId() Returns long 返回新生成的调用链ID SendAsync(Action, int, CancellationToken) 发送同步工作指令到Actor的任务队列中并等待其完成 注意：调用该方法禁止丢弃Task，如需丢弃Task请使用Tell方法 public Task SendAsync(Action work, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Action 要执行的同步工作内容，以Action委托的形式传入 timeOut int 任务执行的超时时间（毫秒）默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 用于取消任务执行的令牌 Returns Task 返回表示异步操作的Task对象 SendAsync(Func<Task>, int, bool, CancellationToken) 发送异步工作指令到Actor的任务队列中并等待其完成，支持配置是否检查锁 public Task SendAsync(Func<Task> work, int timeOut = -1, bool checkLock = true, CancellationToken cancellationToken = default) Parameters work Func<Task> 要执行的异步工作内容，以Func 委托的形式传入 timeOut int 任务执行的超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut checkLock bool 是否检查Actor调用限制锁，true表示检查，false表示不检查 cancellationToken CancellationToken 用于取消任务执行的令牌 Returns Task 返回表示异步操作的Task对象 SendAsync(Func<Task>, int, CancellationToken) 发送异步工作指令到Actor的任务队列中并等待其完成 public Task SendAsync(Func<Task> work, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Func<Task> 要执行的异步工作内容，以Func 委托的形式传入 timeOut int 任务执行的超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 用于取消任务执行的令牌 Returns Task 返回表示异步操作的Task对象 SendAsync<T>(Func<Task<T>>, int, CancellationToken) 发送有返回值的异步工作指令到Actor的任务队列中并等待其完成 public Task<T> SendAsync<T>(Func<Task<T>> work, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Func<Task<T>> 要执行的异步工作内容，以Func >委托的形式传入 timeOut int 任务执行的超时时间（毫秒）,默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 用于取消任务执行的令牌 Returns Task<T> 返回包含执行结果的Task 对象 Type Parameters T 返回值的类型 SendAsync<T>(Func<T>, int, CancellationToken) 发送有返回值的同步工作指令到Actor的任务队列中并等待其完成 public Task<T> SendAsync<T>(Func<T> work, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Func<T> 要执行的同步工作内容，以Func 委托的形式传入 timeOut int 任务执行的超时时间（毫秒）默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 用于取消任务执行的令牌 Returns Task<T> 返回包含执行结果的Task 对象 Type Parameters T 返回值的类型 Tell(Action, int, CancellationToken) 发送无返回值的工作指令到Actor的任务队列中 public void Tell(Action work, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Action 要执行的工作内容，以Action委托的形式传入 timeOut int 任务执行的超时时间（毫秒）默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 用于取消任务执行的令牌 Tell(Func<Task>, int, CancellationToken) 发送异步工作指令到Actor的任务队列中，不等待其完成 public void Tell(Func<Task> work, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Func<Task> 要执行的异步工作内容，以Func 委托的形式传入 timeOut int 任务执行的超时时间（毫秒）默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 用于取消任务执行的令牌"
  },
  "api/GameFrameX.Core.Actors.Impl.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.html",
    "title": "Namespace GameFrameX.Core.Actors.Impl | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Actors.Impl Classes ActionAsyncWrapper 异步无返回包装器 ActionWrapper 无返回包装器 ActorLimit 判断Actor交叉死锁 FuncAsyncWrapper<T> 异步有返回值的泛型包装器 FuncWrapper<T> 有返回值的泛型包装器 WorkWrapper 工作包装器 WorkerActor 工作Actor类,用于处理异步任务队列 Enums ActorLimit.RuleType 可以按需扩展检查规则"
  },
  "api/GameFrameX.Core.Actors.html": {
    "href": "api/GameFrameX.Core.Actors.html",
    "title": "Namespace GameFrameX.Core.Actors | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Actors Classes Actor Actor类,用于管理和协调组件的生命周期、消息传递等核心功能 ActorManager Actor管理器"
  },
  "api/GameFrameX.Core.BaseHandler.BaseComponentHandler.html": {
    "href": "api/GameFrameX.Core.BaseHandler.BaseComponentHandler.html",
    "title": "Class BaseComponentHandler | GameFrameX.Server",
    "summary": "Class BaseComponentHandler Namespace GameFrameX.Core.BaseHandler Assembly GameFrameX.Core.dll 基础组件处理器基类 public abstract class BaseComponentHandler : BaseMessageHandler, IMessageHandler Inheritance object BaseMessageHandler BaseComponentHandler Implements IMessageHandler Derived GlobalComponentHandler PlayerComponentHandler Inherited Members BaseMessageHandler.NetWorkChannel BaseMessageHandler.Message BaseMessageHandler.ActionAsync() BaseMessageHandler.InnerActionAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ActorId 组件代理ID protected long ActorId { get; set; } Property Value long CacheComponent 缓存组件代理对象 public IComponentAgent CacheComponent { get; protected set; } Property Value IComponentAgent ComponentAgentType 组件代理类型 protected abstract Type ComponentAgentType { get; } Property Value Type Methods GetComponentAgent<TOtherAgent>() 根据组件类型获取对应的 IComponentAgent protected Task<TOtherAgent> GetComponentAgent<TOtherAgent>() where TOtherAgent : IComponentAgent Returns Task<TOtherAgent> 组件代理任务 Type Parameters TOtherAgent 组件代理类型 Init(INetworkMessage, INetWorkChannel) 初始化 public override Task<bool> Init(INetworkMessage message, INetWorkChannel netWorkChannel) Parameters message INetworkMessage 网络消息 netWorkChannel INetWorkChannel 网络通道 Returns Task<bool> 返回是否初始化成功,true:成功,false:失败 InitActor() 初始化 protected abstract Task<bool> InitActor() Returns Task<bool> 初始化任务 InnerAction(int, CancellationToken) 内部执行 public override Task InnerAction(int timeout = 30000, CancellationToken cancellationToken = default) Parameters timeout int 执行超时时间，单位毫秒，默认30秒 cancellationToken CancellationToken 取消令牌 Returns Task 内部执行任务"
  },
  "api/GameFrameX.Core.BaseHandler.BaseMessageHandler.html": {
    "href": "api/GameFrameX.Core.BaseHandler.BaseMessageHandler.html",
    "title": "Class BaseMessageHandler | GameFrameX.Server",
    "summary": "Class BaseMessageHandler Namespace GameFrameX.Core.BaseHandler Assembly GameFrameX.Core.dll 基础消息处理器 public abstract class BaseMessageHandler : IMessageHandler Inheritance object BaseMessageHandler Implements IMessageHandler Derived BaseComponentHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Message 消息对象 public INetworkMessage Message { get; } Property Value INetworkMessage NetWorkChannel 网络频道 public INetWorkChannel NetWorkChannel { get; } Property Value INetWorkChannel Methods ActionAsync() 动作异步 protected abstract Task ActionAsync() Returns Task 动作执行任务 Init(INetworkMessage, INetWorkChannel) 初始化 子类实现必须调用 public virtual Task<bool> Init(INetworkMessage message, INetWorkChannel netWorkChannel) Parameters message INetworkMessage 消息对象 netWorkChannel INetWorkChannel 网络渠道 Returns Task<bool> 返回是否初始化成功,true:成功,false:失败 InnerAction(int, CancellationToken) 执行 public virtual Task InnerAction(int timeout = 30000, CancellationToken cancellationToken = default) Parameters timeout int 执行超时时间，单位毫秒，默认30秒 cancellationToken CancellationToken 取消令牌 Returns Task 执行任务 InnerActionAsync() 内部动作异步 记录执行时间并调用 ActionAsync() protected Task InnerActionAsync() Returns Task 动作执行任务"
  },
  "api/GameFrameX.Core.BaseHandler.GlobalComponentHandler-1.html": {
    "href": "api/GameFrameX.Core.BaseHandler.GlobalComponentHandler-1.html",
    "title": "Class GlobalComponentHandler<T> | GameFrameX.Server",
    "summary": "Class GlobalComponentHandler<T> Namespace GameFrameX.Core.BaseHandler Assembly GameFrameX.Core.dll 全局组件处理器 public abstract class GlobalComponentHandler<T> : GlobalComponentHandler, IMessageHandler where T : IComponentAgent Type Parameters T Inheritance object BaseMessageHandler BaseComponentHandler GlobalComponentHandler GlobalComponentHandler<T> Implements IMessageHandler Inherited Members GlobalComponentHandler.InitActor() BaseComponentHandler.ActorId BaseComponentHandler.CacheComponent BaseComponentHandler.Init(INetworkMessage, INetWorkChannel) BaseComponentHandler.InnerAction(int, CancellationToken) BaseComponentHandler.GetComponentAgent<TOtherAgent>() BaseMessageHandler.NetWorkChannel BaseMessageHandler.Message BaseMessageHandler.ActionAsync() BaseMessageHandler.InnerActionAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ComponentAgent 缓存组件代理对象 protected T ComponentAgent { get; } Property Value T ComponentAgentType 组件代理类型 protected override Type ComponentAgentType { get; } Property Value Type"
  },
  "api/GameFrameX.Core.BaseHandler.GlobalComponentHandler.html": {
    "href": "api/GameFrameX.Core.BaseHandler.GlobalComponentHandler.html",
    "title": "Class GlobalComponentHandler | GameFrameX.Server",
    "summary": "Class GlobalComponentHandler Namespace GameFrameX.Core.BaseHandler Assembly GameFrameX.Core.dll 全局组件处理器 public abstract class GlobalComponentHandler : BaseComponentHandler, IMessageHandler Inheritance object BaseMessageHandler BaseComponentHandler GlobalComponentHandler Implements IMessageHandler Derived GlobalComponentHandler<T> Inherited Members BaseComponentHandler.ActorId BaseComponentHandler.ComponentAgentType BaseComponentHandler.CacheComponent BaseComponentHandler.Init(INetworkMessage, INetWorkChannel) BaseComponentHandler.InnerAction(int, CancellationToken) BaseComponentHandler.GetComponentAgent<TOtherAgent>() BaseMessageHandler.NetWorkChannel BaseMessageHandler.Message BaseMessageHandler.ActionAsync() BaseMessageHandler.InnerActionAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods InitActor() 初始化 protected override Task<bool> InitActor() Returns Task<bool>"
  },
  "api/GameFrameX.Core.BaseHandler.PlayerComponentHandler-1.html": {
    "href": "api/GameFrameX.Core.BaseHandler.PlayerComponentHandler-1.html",
    "title": "Class PlayerComponentHandler<T> | GameFrameX.Server",
    "summary": "Class PlayerComponentHandler<T> Namespace GameFrameX.Core.BaseHandler Assembly GameFrameX.Core.dll 玩家组件处理器 public abstract class PlayerComponentHandler<T> : PlayerComponentHandler, IMessageHandler where T : IComponentAgent Type Parameters T Inheritance object BaseMessageHandler BaseComponentHandler PlayerComponentHandler PlayerComponentHandler<T> Implements IMessageHandler Inherited Members PlayerComponentHandler.InitActor() BaseComponentHandler.ActorId BaseComponentHandler.CacheComponent BaseComponentHandler.Init(INetworkMessage, INetWorkChannel) BaseComponentHandler.InnerAction(int, CancellationToken) BaseComponentHandler.GetComponentAgent<TOtherAgent>() BaseMessageHandler.NetWorkChannel BaseMessageHandler.Message BaseMessageHandler.ActionAsync() BaseMessageHandler.InnerActionAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ComponentAgent 缓存组件代理对象 protected T ComponentAgent { get; } Property Value T ComponentAgentType 组件代理类型 protected override Type ComponentAgentType { get; } Property Value Type"
  },
  "api/GameFrameX.Core.BaseHandler.PlayerComponentHandler.html": {
    "href": "api/GameFrameX.Core.BaseHandler.PlayerComponentHandler.html",
    "title": "Class PlayerComponentHandler | GameFrameX.Server",
    "summary": "Class PlayerComponentHandler Namespace GameFrameX.Core.BaseHandler Assembly GameFrameX.Core.dll 玩家组件处理器 public abstract class PlayerComponentHandler : BaseComponentHandler, IMessageHandler Inheritance object BaseMessageHandler BaseComponentHandler PlayerComponentHandler Implements IMessageHandler Derived PlayerComponentHandler<T> Inherited Members BaseComponentHandler.ActorId BaseComponentHandler.ComponentAgentType BaseComponentHandler.CacheComponent BaseComponentHandler.Init(INetworkMessage, INetWorkChannel) BaseComponentHandler.InnerAction(int, CancellationToken) BaseComponentHandler.GetComponentAgent<TOtherAgent>() BaseMessageHandler.NetWorkChannel BaseMessageHandler.Message BaseMessageHandler.ActionAsync() BaseMessageHandler.InnerActionAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods InitActor() 初始化 protected override Task<bool> InitActor() Returns Task<bool>"
  },
  "api/GameFrameX.Core.BaseHandler.html": {
    "href": "api/GameFrameX.Core.BaseHandler.html",
    "title": "Namespace GameFrameX.Core.BaseHandler | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.BaseHandler Classes BaseComponentHandler 基础组件处理器基类 BaseMessageHandler 基础消息处理器 GlobalComponentHandler 全局组件处理器 GlobalComponentHandler<T> 全局组件处理器 PlayerComponentHandler 玩家组件处理器 PlayerComponentHandler<T> 玩家组件处理器"
  },
  "api/GameFrameX.Core.Components.BaseComponent.html": {
    "href": "api/GameFrameX.Core.Components.BaseComponent.html",
    "title": "Class BaseComponent | GameFrameX.Server",
    "summary": "Class BaseComponent Namespace GameFrameX.Core.Components Assembly GameFrameX.Core.dll 基础组件基类 public abstract class BaseComponent : IComponent, IState Inheritance object BaseComponent Implements IComponent IState Derived StateComponent<TState> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Actor Actor 对象 public IActor Actor { get; set; } Property Value IActor IsActive 是否是激活状态 public bool IsActive { get; } Property Value bool Methods Active() 激活组件 public virtual Task Active() Returns Task 激活任务 ClearCacheAgent() 清理缓存代理 public void ClearCacheAgent() GetAgent(Type) 根据组件类型获取对应的 IComponentAgent 数据 public IComponentAgent GetAgent(Type refAssemblyType = null) Parameters refAssemblyType Type 引用程序集，如果为 null 则使用当前程序集引用 Returns IComponentAgent IComponentAgent 实例 Inactive() 反激活组件 public virtual Task Inactive() Returns Task 反激活任务 ReadStateAsync() 读取状态 public virtual Task ReadStateAsync() Returns Task 一个表示异步操作的任务，该任务在状态读取完成时完成 Remarks 此方法用于异步读取对象的当前状态信息 WriteStateAsync() 更新状态 public virtual Task WriteStateAsync() Returns Task 一个表示异步操作的任务，该任务在状态更新完成时完成 Remarks 此方法用于异步更新对象的状态信息 在状态发生变化时应调用此方法以保持状态的同步"
  },
  "api/GameFrameX.Core.Components.ComponentRegister.html": {
    "href": "api/GameFrameX.Core.Components.ComponentRegister.html",
    "title": "Class ComponentRegister | GameFrameX.Server",
    "summary": "Class ComponentRegister Namespace GameFrameX.Core.Components Assembly GameFrameX.Core.dll 组件注册器 public static class ComponentRegister Inheritance object ComponentRegister Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ActiveGlobalComponents() 激活全局组件 public static Task ActiveGlobalComponents() Returns Task 激活任务 ActiveRoleComponents(IComponentAgent, HashSet<short>) 激活角色组件 public static Task ActiveRoleComponents(IComponentAgent componentAgent, HashSet<short> openFuncSet) Parameters componentAgent IComponentAgent 组件代理 openFuncSet HashSet<short> 开放的功能集合 Returns Task 激活任务 GetActorType(Type) 根据 CompType 获取对应的 ActorType 类型 public static ushort GetActorType(Type componentType) Parameters componentType Type 组件类型 Returns ushort ActorType 类型 GetComponents(ushort) 根据 ActorType 类型获取对应的 CompTypes 列表 public static IEnumerable<Type> GetComponents(ushort actorType) Parameters actorType ushort ActorType 类型 Returns IEnumerable<Type> CompTypes 列表 Init(Assembly) 初始化组件注册器 public static Task Init(Assembly assembly = null) Parameters assembly Assembly 目标程序集 Returns Task 初始化任务 Exceptions Exception 当程序集为 null 时抛出"
  },
  "api/GameFrameX.Core.Components.StateComponent-1.html": {
    "href": "api/GameFrameX.Core.Components.StateComponent-1.html",
    "title": "Class StateComponent<TState> | GameFrameX.Server",
    "summary": "Class StateComponent<TState> Namespace GameFrameX.Core.Components Assembly GameFrameX.Core.dll 数据状态组件 public abstract class StateComponent<TState> : BaseComponent, IComponent, IState where TState : BaseCacheState, new() Type Parameters TState Inheritance object BaseComponent StateComponent<TState> Implements IComponent IState Inherited Members BaseComponent.IsActive BaseComponent.Actor BaseComponent.GetAgent(Type) BaseComponent.ClearCacheAgent() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsCreateDefaultState 是否创建默认数据 protected virtual bool IsCreateDefaultState { get; set; } Property Value bool State 数据对象 public TState State { get; } Property Value TState Methods Active() 激活组件，如果状态为空则读取状态数据 public override Task Active() Returns Task 异步任务 ActiveReadStateAsync() 激活状态的时候异步读取数据 protected virtual Task<TState> ActiveReadStateAsync() Returns Task<TState> 返回查询的数据结果对象，没有数据返回null Inactive() 反激活组件，从状态字典中移除当前Actor的状态 public override Task Inactive() Returns Task 异步任务 ReadStateAsync() 准备并读取状态数据 子类不要重写该函数，而是重写ActiveReadStateAsync函数 public override Task ReadStateAsync() Returns Task 异步任务 SaveAll(bool, bool) 保存所有状态数据到数据库 public static Task SaveAll(bool shutdown, bool force = false) Parameters shutdown bool 是否为关服保存 force bool 是否强制保存所有数据 Returns Task 异步任务 SaveState() 保存状态到数据库 protected Task SaveState() Returns Task 异步任务 WriteStateAsync() 异步写入状态到数据库 public override Task WriteStateAsync() Returns Task 异步任务"
  },
  "api/GameFrameX.Core.Components.StateComponent.html": {
    "href": "api/GameFrameX.Core.Components.StateComponent.html",
    "title": "Class StateComponent | GameFrameX.Server",
    "summary": "Class StateComponent Namespace GameFrameX.Core.Components Assembly GameFrameX.Core.dll 数据状态组件 public sealed class StateComponent Inheritance object StateComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields StatisticsTool 统计工具 public static readonly StatisticsTool StatisticsTool Field Value StatisticsTool Methods AddShutdownSaveFunc(Func<bool, bool, Task>) 注册回存 public static void AddShutdownSaveFunc(Func<bool, bool, Task> shutdown) Parameters shutdown Func<bool, bool, Task> SaveAll(bool) 当游戏出现异常，导致无法正常回存，才需要将force=true 由后台http指令调度 public static Task SaveAll(bool force = false) Parameters force bool Returns Task TimerSave() 定时回存所有数据 public static Task TimerSave() Returns Task"
  },
  "api/GameFrameX.Core.Components.html": {
    "href": "api/GameFrameX.Core.Components.html",
    "title": "Namespace GameFrameX.Core.Components | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Components Classes BaseComponent 基础组件基类 ComponentRegister 组件注册器 StateComponent 数据状态组件 StateComponent<TState> 数据状态组件"
  },
  "api/GameFrameX.Core.Config.BaseDataTable-1.html": {
    "href": "api/GameFrameX.Core.Config.BaseDataTable-1.html",
    "title": "Class BaseDataTable<T> | GameFrameX.Server",
    "summary": "Class BaseDataTable<T> Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 基础数据表 public abstract class BaseDataTable<T> : IDataTable<T>, IDataTable Type Parameters T 数据表中的数据类型 Inheritance object BaseDataTable<T> Implements IDataTable<T> IDataTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseDataTable() 默认构造函数 public BaseDataTable() BaseDataTable(Func<Task<JsonElement>>) 初始化基础数据表 public BaseDataTable(Func<Task<JsonElement>> loadFunc) Parameters loadFunc Func<Task<JsonElement>> 异步加载数据的委托 Fields DataList 数据列表 protected readonly List<T> DataList Field Value List<T> LongDataMaps 长整型键的数据表 protected readonly SortedDictionary<long, T> LongDataMaps Field Value SortedDictionary<long, T> StringDataMaps 字符串键的数据表 protected readonly SortedDictionary<string, T> StringDataMaps Field Value SortedDictionary<string, T> _loadFunc 异步加载器 protected readonly Func<Task<JsonElement>> _loadFunc Field Value Func<Task<JsonElement>> Properties All 获取数据表中所有对象 public T[] All { get; } Property Value T[] 数据表中的所有对象数组 Count 获取数据表中对象的数量 public int Count { get; } Property Value int 数据表中对象的数量 FirstOrDefault 获取数据表中第一个对象 public T FirstOrDefault { get; } Property Value T 数据表中的第一个对象，如果数据表为空则返回默认值 this[int] 根据整型ID获取对象 public T this[int id] { get; } Parameters id int 对象的ID Property Value T 找到的对象，如果未找到则返回默认值 this[long] 根据长整型ID获取对象 public T this[long id] { get; } Parameters id long 对象的ID Property Value T 找到的对象，如果未找到则返回默认值 this[string] 根据字符串ID获取对象 public T this[string id] { get; } Parameters id string 对象的ID Property Value T 找到的对象，如果未找到则返回默认值 LastOrDefault 获取数据表中最后一个对象 public T LastOrDefault { get; } Property Value T 数据表中的最后一个对象，如果数据表为空则返回默认值 Methods Find(Func<T, bool>) 根据条件查找对象 public T Find(Func<T, bool> func) Parameters func Func<T, bool> 查找条件 Returns T 满足条件的第一个对象，如果未找到则返回默认值 FindList(Func<T, bool>) 根据条件查找多个对象 public T[] FindList(Func<T, bool> func) Parameters func Func<T, bool> 查找条件 Returns T[] 满足条件的所有对象数组 Get(int) 根据整型ID获取对象 public T Get(int id) Parameters id int 对象的ID Returns T 找到的对象，如果未找到则返回默认值 Get(long) 根据长整型ID获取对象 public T Get(long id) Parameters id long 对象的ID Returns T 找到的对象，如果未找到则返回默认值 Get(string) 根据字符串ID获取对象 public T Get(string id) Parameters id string 对象的ID Returns T 找到的对象，如果未找到则返回默认值 LoadAsync() 异步加载数据 public abstract Task LoadAsync() Returns Task 一个表示异步操作的任务 ToArray() 获取数据表中所有对象 public T[] ToArray() Returns T[] 数据表中的所有对象数组"
  },
  "api/GameFrameX.Core.Config.BeanBase.html": {
    "href": "api/GameFrameX.Core.Config.BeanBase.html",
    "title": "Class BeanBase | GameFrameX.Server",
    "summary": "Class BeanBase Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll public abstract class BeanBase : ITypeId Inheritance object BeanBase Implements ITypeId Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetTypeId() 获取类型ID public abstract int GetTypeId() Returns int"
  },
  "api/GameFrameX.Core.Config.ByteBuf.html": {
    "href": "api/GameFrameX.Core.Config.ByteBuf.html",
    "title": "Class ByteBuf | GameFrameX.Server",
    "summary": "Class ByteBuf Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 字节缓冲区类,用于二进制数据的读写操作 public sealed class ByteBuf : ICloneable, IEquatable<ByteBuf> Inheritance object ByteBuf Implements ICloneable IEquatable<ByteBuf> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ByteBuf() 默认构造函数,创建一个空的字节缓冲区 public ByteBuf() ByteBuf(byte[]) 使用指定字节数组创建字节缓冲区 public ByteBuf(byte[] bytes) Parameters bytes byte[] 字节数组 ByteBuf(byte[], int, int) 使用指定字节数组和读写位置创建字节缓冲区 public ByteBuf(byte[] bytes, int readIndex, int writeIndex) Parameters bytes byte[] 字节数组 readIndex int 读取位置 writeIndex int 写入位置 ByteBuf(int) 使用指定容量创建字节缓冲区 public ByteBuf(int capacity) Parameters capacity int 初始容量 ByteBuf(int, Action<ByteBuf>) 使用指定容量和释放器创建字节缓冲区 public ByteBuf(int capacity, Action<ByteBuf> releaser) Parameters capacity int 初始容量 releaser Action<ByteBuf> 释放器委托 Properties Bytes 内部字节数组 public byte[] Bytes { get; } Property Value byte[] Capacity 缓冲区容量 public int Capacity { get; } Property Value int Empty 缓冲区是否为空 public bool Empty { get; } Property Value bool NotCompactWritable 未压缩的可写入字节数 public int NotCompactWritable { get; } Property Value int NotEmpty 缓冲区是否非空 public bool NotEmpty { get; } Property Value bool ReaderIndex 当前读取位置 public int ReaderIndex { get; set; } Property Value int Remaining 剩余可读取的字节数 public int Remaining { get; } Property Value int Size 当前数据大小 public int Size { get; } Property Value int StringCacheFinder 字符串缓存查找器 public static Func<byte[], int, int, string> StringCacheFinder { get; set; } Property Value Func<byte[], int, int, string> WriterIndex 当前写入位置 public int WriterIndex { get; set; } Property Value int Methods AddReadIndex(int) 增加读取位置 public void AddReadIndex(int add) Parameters add int 增加的值 AddWriteIndex(int) 增加写入位置 public void AddWriteIndex(int add) Parameters add int 增加的值 Append(byte) 追加一个字节 public void Append(byte x) Parameters x byte 要追加的字节 BeginWriteSegment(out int) 开始写入段 public void BeginWriteSegment(out int oldSize) Parameters oldSize int 旧大小 Clear() 清空缓冲区 public void Clear() Clone() 克隆 public object Clone() Returns object 克隆的对象 CopyData() 复制当前数据 public byte[] CopyData() Returns byte[] 复制的字节数组 DiscardReadBytes() 丢弃已读取的字节 public void DiscardReadBytes() EndWriteSegment(int) 结束写入段 public void EndWriteSegment(int oldSize) Parameters oldSize int 旧大小 EnsureWrite(int) 确保有足够的写入空间 public void EnsureWrite(int size) Parameters size int 需要的空间大小 EnterSegment(out SegmentSaveState) 进入段 public void EnterSegment(out SegmentSaveState saveState) Parameters saveState SegmentSaveState 段保存状态 Equals(ByteBuf) 比较是否相等 public bool Equals(ByteBuf other) Parameters other ByteBuf 要比较的对象 Returns bool 是否相等 Equals(object) 比较是否相等 public override bool Equals(object obj) Parameters obj object 要比较的对象 Returns bool 是否相等 FromString(string) 从字符串创建字节缓冲区 public static ByteBuf FromString(string value) Parameters value string 要创建的字符串 Returns ByteBuf 字节缓冲区 GetHashCode() 获取哈希码 public override int GetHashCode() Returns int 哈希码 LeaveSegment(SegmentSaveState) 离开段 public void LeaveSegment(SegmentSaveState saveState) Parameters saveState SegmentSaveState 段保存状态 ReadBool() 读取布尔值 public bool ReadBool() Returns bool 读取的布尔值 ReadByte() 读取字节 public byte ReadByte() Returns byte 读取的字节 ReadBytes() 读取字节数组 public byte[] ReadBytes() Returns byte[] 读取的字节数组 ReadComplex() 读取复数 public Complex ReadComplex() Returns Complex 读取的复数 ReadDouble() 读取双精度浮点数 public double ReadDouble() Returns double 读取的双精度浮点数 ReadFint() 读取固定长度的整型 public int ReadFint() Returns int 读取的整型值 ReadFint_Safe() 安全地读取固定长度的整型 public int ReadFint_Safe() Returns int 读取的整型值 ReadFloat() 读取浮点数 public float ReadFloat() Returns float 读取的浮点数 ReadFlong() 读取长整型 public long ReadFlong() Returns long 读取的长整型值 ReadFshort() 读取固定长度的短整型 public short ReadFshort() Returns short 读取的短整型值 ReadInt() 读取整型 public int ReadInt() Returns int 读取的整型值 ReadLong() 读取长整型 public long ReadLong() Returns long 读取的长整型值 ReadLongAsNumber() 读取长整型并转换为浮点数 public double ReadLongAsNumber() Returns double 读取的浮点数 ReadMatrix4x4() 读取4x4矩阵 public Matrix4x4 ReadMatrix4x4() Returns Matrix4x4 读取的4x4矩阵 ReadQuaternion() 读取四元数 public Quaternion ReadQuaternion() Returns Quaternion 读取的四元数 ReadSegment(ByteBuf) 读取段 public void ReadSegment(ByteBuf buf) Parameters buf ByteBuf 要读取的段 ReadSegment(out int, out int) 读取段 public void ReadSegment(out int startIndex, out int segmentSize) Parameters startIndex int 开始索引 segmentSize int 段大小 ReadShort() 读取短整型 public short ReadShort() Returns short 读取的短整型值 ReadSint() 读取有符号整型 public int ReadSint() Returns int 读取的有符号整型值 ReadSize() 读取大小 public int ReadSize() Returns int 读取的大小 ReadSlong() 读取长整型 public long ReadSlong() Returns long 读取的长整型值 ReadString() 读取字符串 public string ReadString() Returns string 读取的字符串 ReadUint() 读取无符号整型 public uint ReadUint() Returns uint 读取的无符号整型值 ReadUint_Unsafe() 使用不安全代码读取无符号整型 public uint ReadUint_Unsafe() Returns uint 读取的无符号整型值 ReadUlong() 读取无符号长整型 public ulong ReadUlong() Returns ulong 读取的无符号长整型值 ReadVector2() 读取二维向量 public Vector2 ReadVector2() Returns Vector2 读取的二维向量 ReadVector3() 读取三维向量 public Vector3 ReadVector3() Returns Vector3 读取的三维向量 ReadVector4() 读取四维向量 public Vector4 ReadVector4() Returns Vector4 读取的四维向量 Release() 释放 public void Release() Replace(byte[]) 替换内部字节数组 public void Replace(byte[] bytes) Parameters bytes byte[] 新的字节数组 Replace(byte[], int, int) 替换内部字节数组并指定读写位置 public void Replace(byte[] bytes, int beginPos, int endPos) Parameters bytes byte[] 新的字节数组 beginPos int 起始位置 endPos int 结束位置 ToString() 转换为字符串 public override string ToString() Returns string 字符串 TryDeserializeInplaceByteBuf(int, ByteBuf) 尝试反序列化字节缓冲区 public EDeserializeError TryDeserializeInplaceByteBuf(int maxSize, ByteBuf inplaceTempBody) Parameters maxSize int 最大大小 inplaceTempBody ByteBuf 临时字节缓冲区 Returns EDeserializeError 反序列化错误 TryReadByte(out byte) 尝试读取字节 public bool TryReadByte(out byte x) Parameters x byte 要读取的字节 Returns bool 是否成功读取 Wrap(byte[]) 包装字节数组为ByteBuf public static ByteBuf Wrap(byte[] bytes) Parameters bytes byte[] 要包装的字节数组 Returns ByteBuf 包装后的ByteBuf对象 WriteBool(bool) 写入布尔值 public void WriteBool(bool b) Parameters b bool 要写入的布尔值 WriteByte(byte) 写入字节 public void WriteByte(byte x) Parameters x byte 要写入的字节 WriteByteBufWithSize(ByteBuf) 写入字节缓冲区 public void WriteByteBufWithSize(ByteBuf o) Parameters o ByteBuf 要写入的字节缓冲区 WriteByteBufWithoutSize(ByteBuf) 写入字节缓冲区 public void WriteByteBufWithoutSize(ByteBuf o) Parameters o ByteBuf 要写入的字节缓冲区 WriteBytes(byte[]) 写入字节数组 public void WriteBytes(byte[] x) Parameters x byte[] 要写入的字节数组 WriteBytesWithoutSize(byte[]) 写入字节数组(不写入大小) public void WriteBytesWithoutSize(byte[] bs) Parameters bs byte[] 要写入的字节数组 WriteBytesWithoutSize(byte[], int, int) 写入字节数组的指定部分(不写入大小) public void WriteBytesWithoutSize(byte[] bs, int offset, int len) Parameters bs byte[] 要写入的字节数组 offset int 起始偏移 len int 长度 WriteComplex(Complex) 写入复数 public void WriteComplex(Complex x) Parameters x Complex 要写入的复数 WriteDouble(double) 写入双精度浮点数 public void WriteDouble(double x) Parameters x double 要写入的双精度浮点数 WriteFint(int) 写入固定长度的整型 public void WriteFint(int x) Parameters x int 要写入的整型值 WriteFint_Safe(int) 安全地写入固定长度的整型 public void WriteFint_Safe(int x) Parameters x int 要写入的整型值 WriteFloat(float) 写入浮点数 public void WriteFloat(float x) Parameters x float 要写入的浮点数 WriteFlong(long) 写入长整型 public void WriteFlong(long x) Parameters x long 要写入的长整型值 WriteFshort(short) 写入固定长度的短整型 public void WriteFshort(short x) Parameters x short 要写入的短整型值 WriteInt(int) 写入整型 public void WriteInt(int x) Parameters x int 要写入的整型值 WriteLong(long) 写入长整型 public void WriteLong(long x) Parameters x long 要写入的长整型值 WriteMatrix4x4(Matrix4x4) 写入4x4矩阵 public void WriteMatrix4x4(Matrix4x4 x) Parameters x Matrix4x4 要写入的4x4矩阵 WriteNumberAsLong(double) 将浮点数作为长整型写入 public void WriteNumberAsLong(double x) Parameters x double 要写入的浮点数 WriteQuaternion(Quaternion) 写入四元数 public void WriteQuaternion(Quaternion x) Parameters x Quaternion 要写入的四元数 WriteRawTag(byte) 写入原始标签 public void WriteRawTag(byte b1) Parameters b1 byte 要写入的标签 WriteRawTag(byte, byte) 写入原始标签 public void WriteRawTag(byte b1, byte b2) Parameters b1 byte 要写入的标签 b2 byte 要写入的标签 WriteRawTag(byte, byte, byte) 写入原始标签 public void WriteRawTag(byte b1, byte b2, byte b3) Parameters b1 byte 要写入的标签 b2 byte 要写入的标签 b3 byte 要写入的标签 WriteShort(short) 写入短整型 public void WriteShort(short x) Parameters x short 要写入的短整型值 WriteSint(int) 写入有符号整型 public void WriteSint(int x) Parameters x int 要写入的有符号整型值 WriteSize(int) 写入大小 public void WriteSize(int n) Parameters n int 要写入的大小 WriteSlong(long) 写入长整型 public void WriteSlong(long x) Parameters x long 要写入的长整型值 WriteString(string) 写入字符串 public void WriteString(string x) Parameters x string 要写入的字符串 WriteUint(uint) 写入无符号整型 public void WriteUint(uint x) Parameters x uint 要写入的无符号整型值 WriteUint_Unsafe(uint) 使用不安全代码写入无符号整型 public void WriteUint_Unsafe(uint x) Parameters x uint 要写入的无符号整型值 WriteVector2(Vector2) 写入二维向量 public void WriteVector2(Vector2 x) Parameters x Vector2 要写入的二维向量 WriteVector3(Vector3) 写入三维向量 public void WriteVector3(Vector3 x) Parameters x Vector3 要写入的三维向量 WriteVector4(Vector4) 写入四维向量 public void WriteVector4(Vector4 x) Parameters x Vector4 要写入的四维向量"
  },
  "api/GameFrameX.Core.Config.EDeserializeError.html": {
    "href": "api/GameFrameX.Core.Config.EDeserializeError.html",
    "title": "Enum EDeserializeError | GameFrameX.Server",
    "summary": "Enum EDeserializeError Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 反序列化错误枚举 public enum EDeserializeError Fields EXCEED_SIZE = 2 超出大小限制 NOT_ENOUGH = 1 数据不足 OK = 0 成功"
  },
  "api/GameFrameX.Core.Config.IConfigManager.html": {
    "href": "api/GameFrameX.Core.Config.IConfigManager.html",
    "title": "Interface IConfigManager | GameFrameX.Server",
    "summary": "Interface IConfigManager Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 全局配置管理器接口。 public interface IConfigManager Properties Count 获取全局配置项数量。 int Count { get; } Property Value int 全局配置项的数量。 Methods AddConfig(string, IDataTable) 增加指定全局配置项。 void AddConfig(string configName, IDataTable configValue) Parameters configName string 要增加的全局配置项的名称。 configValue IDataTable 全局配置项的值。 GetConfig(string) 获取指定全局配置项。 IDataTable GetConfig(string configName) Parameters configName string 要获取的全局配置项的名称。 Returns IDataTable 指定名称的全局配置项。 HasConfig(string) 检查是否存在指定全局配置项。 bool HasConfig(string configName) Parameters configName string 要检查的全局配置项的名称。 Returns bool 如果存在指定的全局配置项，则返回 true；否则返回 false。 RemoveAllConfigs() 清空所有全局配置项。 void RemoveAllConfigs() RemoveConfig(string) 移除指定全局配置项。 bool RemoveConfig(string configName) Parameters configName string 要移除的全局配置项的名称。 Returns bool 如果成功移除指定的全局配置项，则返回 true；否则返回 false。"
  },
  "api/GameFrameX.Core.Config.IDataTable-1.html": {
    "href": "api/GameFrameX.Core.Config.IDataTable-1.html",
    "title": "Interface IDataTable<T> | GameFrameX.Server",
    "summary": "Interface IDataTable<T> Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 泛型数据表基础接口。 public interface IDataTable<out T> : IDataTable Type Parameters T 数据表中对象的类型。 Inherited Members IDataTable.Count IDataTable.LoadAsync() Properties All 获取数据表中所有对象。 T[] All { get; } Property Value T[] 数据表中的所有对象数组。 FirstOrDefault 获取数据表中第一个对象。 T FirstOrDefault { get; } Property Value T 数据表中的第一个对象。 this[int] 根据ID获取对象。 T this[int id] { get; } Parameters id int 表唯一主键ID。 Property Value T 指定ID的对象。 this[string] 根据ID获取对象。 T this[string id] { get; } Parameters id string 表唯一主键ID。 Property Value T 指定ID的对象。 LastOrDefault 获取数据表中最后一个对象。 T LastOrDefault { get; } Property Value T 数据表中的最后一个对象。 Methods Find(Func<T, bool>) 根据条件查找，返回第一个满足条件的对象。 T Find(Func<out T, bool> func) Parameters func Func<T, bool> 查询条件表达式。 Returns T 第一个满足条件的对象。 FindList(Func<T, bool>) 根据条件查找，返回所有满足条件的对象。 T[] FindList(Func<out T, bool> func) Parameters func Func<T, bool> 查询条件表达式。 Returns T[] 所有满足条件的对象数组。 Get(int) 根据ID获取对象。 T Get(int id) Parameters id int 表唯一主键ID。 Returns T 指定ID的对象。 Get(string) 根据ID获取对象。 T Get(string id) Parameters id string 表唯一主键ID。 Returns T 指定ID的对象。 ToArray() 获取数据表中所有对象。 T[] ToArray() Returns T[] 数据表中的所有对象数组。"
  },
  "api/GameFrameX.Core.Config.IDataTable.html": {
    "href": "api/GameFrameX.Core.Config.IDataTable.html",
    "title": "Interface IDataTable | GameFrameX.Server",
    "summary": "Interface IDataTable Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 数据表基础接口 public interface IDataTable Properties Count 获取数据表中对象的数量。 int Count { get; } Property Value int 数据表中对象的数量。 Methods LoadAsync() 异步加载数据表。 Task LoadAsync() Returns Task 一个任务表示异步操作。"
  },
  "api/GameFrameX.Core.Config.ITypeId.html": {
    "href": "api/GameFrameX.Core.Config.ITypeId.html",
    "title": "Interface ITypeId | GameFrameX.Server",
    "summary": "Interface ITypeId Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 类型ID接口 public interface ITypeId Methods GetTypeId() 获取类型ID int GetTypeId() Returns int"
  },
  "api/GameFrameX.Core.Config.SegmentSaveState.html": {
    "href": "api/GameFrameX.Core.Config.SegmentSaveState.html",
    "title": "Struct SegmentSaveState | GameFrameX.Server",
    "summary": "Struct SegmentSaveState Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 分段保存状态结构 public readonly struct SegmentSaveState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SegmentSaveState(int, int) 构造函数 public SegmentSaveState(int readerIndex, int writerIndex) Parameters readerIndex int 读取位置 writerIndex int 写入位置 Properties ReaderIndex 读取位置 public int ReaderIndex { get; } Property Value int WriterIndex 写入位置 public int WriterIndex { get; } Property Value int"
  },
  "api/GameFrameX.Core.Config.SerializationException.html": {
    "href": "api/GameFrameX.Core.Config.SerializationException.html",
    "title": "Class SerializationException | GameFrameX.Server",
    "summary": "Class SerializationException Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll public class SerializationException : Exception, ISerializable Inheritance object Exception SerializationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SerializationException() public SerializationException() SerializationException(string) public SerializationException(string msg) Parameters msg string SerializationException(string, Exception) public SerializationException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/GameFrameX.Core.Config.StringUtil.html": {
    "href": "api/GameFrameX.Core.Config.StringUtil.html",
    "title": "Class StringUtil | GameFrameX.Server",
    "summary": "Class StringUtil Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 提供字符串处理的静态方法。 public static class StringUtil Inheritance object StringUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ArrayToString<T>(T[]) 将数组转换为字符串表示形式。 public static string ArrayToString<T>(T[] arr) Parameters arr T[] 要转换的数组。 Returns string 数组的字符串表示形式。 Type Parameters T 数组元素的类型。 CollectionToString<T>(IEnumerable<T>) 将集合转换为字符串表示形式。 public static string CollectionToString<T>(IEnumerable<T> arr) Parameters arr IEnumerable<T> 要转换的集合。 Returns string 集合的字符串表示形式。 Type Parameters T 集合元素的类型。 CollectionToString<TK, TV>(IDictionary<TK, TV>) 将字典转换为字符串表示形式。 public static string CollectionToString<TK, TV>(IDictionary<TK, TV> dic) Parameters dic IDictionary<TK, TV> 要转换的字典。 Returns string 字典的字符串表示形式。 Type Parameters TK 字典键的类型。 TV 字典值的类型。 ToStr(object) 将对象转换为字符串表示形式。 public static string ToStr(object o) Parameters o object 要转换的对象。 Returns string 对象的字符串表示形式。 ToStr(object, StringBuilder) 将对象转换为字符串表示形式，并使用提供的StringBuilder进行构建。 public static string ToStr(object o, StringBuilder sb) Parameters o object 要转换的对象。 sb StringBuilder 用于构建字符串的StringBuilder。 Returns string 对象的字符串表示形式。"
  },
  "api/GameFrameX.Core.Config.html": {
    "href": "api/GameFrameX.Core.Config.html",
    "title": "Namespace GameFrameX.Core.Config | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Config Classes BaseDataTable<T> 基础数据表 BeanBase ByteBuf 字节缓冲区类,用于二进制数据的读写操作 SerializationException StringUtil 提供字符串处理的静态方法。 Structs SegmentSaveState 分段保存状态结构 Interfaces IConfigManager 全局配置管理器接口。 IDataTable 数据表基础接口 IDataTable<T> 泛型数据表基础接口。 ITypeId 类型ID接口 Enums EDeserializeError 反序列化错误枚举"
  },
  "api/GameFrameX.Core.Events.EventDispatcher.html": {
    "href": "api/GameFrameX.Core.Events.EventDispatcher.html",
    "title": "Class EventDispatcher | GameFrameX.Server",
    "summary": "Class EventDispatcher Namespace GameFrameX.Core.Events Assembly GameFrameX.Core.dll 事件分发类 - 负责处理游戏中所有事件的分发和处理 public static class EventDispatcher Inheritance object EventDispatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Dispatch(long, int, GameEventArgs) 分发事件到指定的Actor或全局监听器 public static void Dispatch(long actorId, int eventId, GameEventArgs eventArgs = null) Parameters actorId long 目标Actor的唯一标识符，如果为无效值则分发到全局监听器 eventId int 要分发的事件ID eventArgs GameEventArgs 事件携带的参数数据，可以为null"
  },
  "api/GameFrameX.Core.Events.EventListener-1.html": {
    "href": "api/GameFrameX.Core.Events.EventListener-1.html",
    "title": "Class EventListener<T> | GameFrameX.Server",
    "summary": "Class EventListener<T> Namespace GameFrameX.Core.Events Assembly GameFrameX.Core.dll 事件监听器基类，用于处理特定组件代理类型的事件 public abstract class EventListener<T> : IEventListener where T : class, IComponentAgent Type Parameters T 组件代理类型，必须实现IComponentAgent接口 Inheritance object EventListener<T> Implements IEventListener Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AgentType 获取事件代理类型属性 public Type AgentType { get; } Property Value Type Remarks 返回泛型参数T的实际类型，用于运行时类型识别 Methods HandleEvent(IComponentAgent, GameEventArgs) 实现IEventListener接口的事件处理函数 public Task HandleEvent(IComponentAgent agent, GameEventArgs gameEventArgs) Parameters agent IComponentAgent 组件代理实例，类型为IComponentAgent gameEventArgs GameEventArgs 需要处理的事件对象 Returns Task 异步任务，表示事件处理的完成状态 Remarks 该方法会将传入的IComponentAgent类型转换为泛型类型T后调用保护方法HandleEvent HandleEvent(GameEventArgs) 无代理对象的事件处理函数重载 public Task HandleEvent(GameEventArgs gameEventArgs) Parameters gameEventArgs GameEventArgs 需要处理的事件对象 Returns Task 异步任务，表示事件处理的完成状态 Remarks 该方法会以null作为agent参数调用另一个HandleEvent重载 HandleEvent(T, GameEventArgs) 具体的事件处理实现方法 protected abstract Task HandleEvent(T agent, GameEventArgs gameEventArgs) Parameters agent T 泛型类型的组件代理实例 gameEventArgs GameEventArgs 需要处理的事件对象 Returns Task 异步任务，表示事件处理的完成状态 Remarks 派生类必须实现该抽象方法来提供具体的事件处理逻辑"
  },
  "api/GameFrameX.Core.Events.html": {
    "href": "api/GameFrameX.Core.Events.html",
    "title": "Namespace GameFrameX.Core.Events | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Events Classes EventDispatcher 事件分发类 - 负责处理游戏中所有事件的分发和处理 EventListener<T> 事件监听器基类，用于处理特定组件代理类型的事件"
  },
  "api/GameFrameX.Core.Hotfix.Agent.BaseComponentAgent-1.html": {
    "href": "api/GameFrameX.Core.Hotfix.Agent.BaseComponentAgent-1.html",
    "title": "Class BaseComponentAgent<TComponent> | GameFrameX.Server",
    "summary": "Class BaseComponentAgent<TComponent> Namespace GameFrameX.Core.Hotfix.Agent Assembly GameFrameX.Core.dll 基础组件代理类，用于管理组件与Actor之间的交互 public abstract class BaseComponentAgent<TComponent> : IComponentAgent, IWorker where TComponent : BaseComponent Type Parameters TComponent 具体的组件类型 Inheritance object BaseComponentAgent<TComponent> Implements IComponentAgent IWorker Derived FuncComponentAgent<TComponent> StateComponentAgent<TComponent, TState> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Actor 所有者的Actor实例 public IActor Actor { get; } Property Value IActor ActorId 所有者的Actor ID public long ActorId { get; } Property Value long IsInvokedActivation 标记组件是否已执行过激活操作 protected bool IsInvokedActivation { get; } Property Value bool IsInvokedAfterActivation 标记组件是否已执行过激活后处理 protected bool IsInvokedAfterActivation { get; } Property Value bool IsInvokedAfterInActivation 标记组件是否已执行过反激活后处理 protected bool IsInvokedAfterInActivation { get; } Property Value bool IsInvokedBeforeActivation 标记组件是否已执行过激活前预处理 protected bool IsInvokedBeforeActivation { get; } Property Value bool IsInvokedBeforeInActivation 标记组件是否已执行过反激活前预处理 protected bool IsInvokedBeforeInActivation { get; } Property Value bool Owner 组件的所有者 public IComponent Owner { get; } Property Value IComponent OwnerComponent 所有者的组件实例 public TComponent OwnerComponent { get; } Property Value TComponent OwnerType 所有者的类型 public ushort OwnerType { get; } Property Value ushort ScheduleIdSet 订阅的定时任务ID集合 public HashSet<long> ScheduleIdSet { get; } Property Value HashSet<long> Methods Active() 激活组件 public virtual Task<bool> Active() Returns Task<bool> 返回一个 Task<bool> 对象： true：表示激活成功且是首次执行 false：表示组件已经被激活过 ActorCrossDay(int) 处理Actor的跨天事件，用于执行每日重置等操作 public Task ActorCrossDay(int serverDay) Parameters serverDay int 服务器运行的天数，从启动开始计数 Returns Task 表示异步操作的Task对象 AfterActivation() 组件激活后的后处理操作 public virtual Task<bool> AfterActivation() Returns Task<bool> 返回一个 Task<bool> 对象： true：表示后处理成功且是首次执行 false：表示已经执行过后处理 AfterInActivation() 组件反激活后的后处理操作 public virtual Task<bool> AfterInActivation() Returns Task<bool> 返回一个 Task<bool> 对象： true：表示后处理成功且是首次执行 false：表示已经执行过后处理 BeforeActivation() 组件激活前的预处理操作 public virtual Task<bool> BeforeActivation() Returns Task<bool> 返回一个 Task<bool> 对象： true：表示预处理成功且是首次执行 false：表示已经执行过预处理 BeforeInActivation() 组件反激活前的预处理操作 public virtual Task<bool> BeforeInActivation() Returns Task<bool> 返回一个 Task<bool> 对象： true：表示预处理成功且是首次执行 false：表示已经执行过预处理 Daily<T>(int, int, GameEventArgs, long) 创建每日定时执行的任务，在指定的时间点执行 public long Daily<T>(int hour = 0, int minute = 0, GameEventArgs gameEventArgs = null, long unScheduleId = 0) where T : ITimerHandler Parameters hour int 每天执行的小时数（0-23） minute int 每天执行的分钟数（0-59） gameEventArgs GameEventArgs 传递给定时任务处理器的自定义参数对象 unScheduleId long 需要取消的已存在的定时任务ID，如果大于0则会先取消该任务 Returns long 新创建的定时任务ID，可用于后续取消该任务 Type Parameters T 实现了ITimerHandler接口的定时任务处理器类型 Delay<T>(DateTime, GameEventArgs, long) 延迟执行定时任务，在指定的时间点执行一次任务 public long Delay<T>(DateTime time, GameEventArgs eventArgs = null, long unScheduleId = 0) where T : ITimerHandler Parameters time DateTime 指定执行任务的具体时间点 eventArgs GameEventArgs 传递给定时任务处理器的自定义参数对象 unScheduleId long 需要取消的已存在的定时任务ID，如果大于0则会先取消该任务 Returns long 新创建的定时任务ID，可用于后续取消该任务 Type Parameters T 实现了ITimerHandler接口的定时任务处理器类型 Delay<T>(long, GameEventArgs, long) 延迟执行定时任务，将时间戳转换为DateTime后在指定时间点执行一次任务 public long Delay<T>(long time, GameEventArgs eventArgs = null, long unScheduleId = 0) where T : ITimerHandler Parameters time long Unix时间戳，将被转换为DateTime类型的执行时间点 eventArgs GameEventArgs 传递给定时任务处理器的自定义参数对象 unScheduleId long 需要取消的已存在的定时任务ID，如果大于0则会先取消该任务 Returns long 新创建的定时任务ID，可用于后续取消该任务 Type Parameters T 实现了ITimerHandler接口的定时任务处理器类型 Delay<T>(TimeSpan, GameEventArgs, long) 延迟执行定时任务，在指定的时间间隔后执行一次任务 public long Delay<T>(TimeSpan delay, GameEventArgs eventArgs = null, long unScheduleId = 0) where T : ITimerHandler Parameters delay TimeSpan 从当前时间开始延迟执行的时间间隔 eventArgs GameEventArgs 传递给定时任务处理器的自定义参数对象 unScheduleId long 需要取消的已存在的定时任务ID，如果大于0则会先取消该任务 Returns long 新创建的定时任务ID，可用于后续取消该任务 Type Parameters T 实现了ITimerHandler接口的定时任务处理器类型 GetComponentAgent(Type, bool) 根据代理类型获取组件代理实例 public Task<IComponentAgent> GetComponentAgent(Type agentType, bool isNew = true) Parameters agentType Type 要获取的代理类型 isNew bool 是否创建新的实例，true表示创建新实例，false表示获取已存在的实例 Returns Task<IComponentAgent> 返回一个异步任务，该任务完成时将返回指定类型的组件代理实例 GetComponentAgent<T>(bool) 获取指定泛型类型的组件代理实例 public Task<T> GetComponentAgent<T>(bool isNew = true) where T : IComponentAgent Parameters isNew bool 是否创建新的实例，true表示创建新实例，false表示获取已存在的实例 Returns Task<T> 返回一个异步任务，该任务完成时将返回指定泛型类型的组件代理实例 Type Parameters T 要获取的组件代理类型，必须实现IComponentAgent接口 Inactive() 反激活组件 public virtual Task Inactive() Returns Task 返回一个已完成的 Task 对象。 注意：此方法不检查执行状态，可以多次调用 Monthly<T>(int, int, int, GameEventArgs, long) 创建每月定时执行的任务，在指定的日期和时间点执行 public long Monthly<T>(int dayOfMonth, int hour = 0, int minute = 0, GameEventArgs gameEventArgs = null, long unScheduleId = 0) where T : ITimerHandler Parameters dayOfMonth int 指定每月执行的日期（1-31） hour int 执行的小时数（0-23） minute int 执行的分钟数（0-59） gameEventArgs GameEventArgs 传递给定时任务处理器的自定义参数对象 unScheduleId long 需要取消的已存在的定时任务ID，如果大于0则会先取消该任务 Returns long 新创建的定时任务ID，可用于后续取消该任务 Type Parameters T 实现了ITimerHandler接口的定时任务处理器类型 Pause(long) 暂停定时任务，不再执行 public void Pause(long id) Parameters id long 定时任务ID Resume(long) 恢复暂停的定时任务，继续执行 public void Resume(long id) Parameters id long 定时任务ID Schedule<T>(TimeSpan, TimeSpan, GameEventArgs, int, long) 订阅定时任务，可设置延迟启动和重复执行间隔 public long Schedule<T>(TimeSpan delay, TimeSpan interval, GameEventArgs gameEventArgs = null, int repeatCount = -1, long unScheduleId = 0) where T : ITimerHandler Parameters delay TimeSpan 首次执行前的延迟时间 interval TimeSpan 连续执行之间的时间间隔 gameEventArgs GameEventArgs 传递给定时任务处理器的自定义参数对象 repeatCount int 任务重复执行的次数，小于0表示无限重复执行 unScheduleId long 需要取消的已存在的定时任务ID，如果大于0则会先取消该任务 Returns long 新创建的定时任务ID，可用于后续取消该任务 Type Parameters T 实现了ITimerHandler接口的定时任务处理器类型 SendAsync(Action, int, CancellationToken) 异步发送无返回值的工作指令到Actor public Task SendAsync(Action work, int timeout = -1, CancellationToken cancellationToken = default) Parameters work Action 要执行的工作内容，以Action委托形式传入 timeout int 执行超时时间，如果超过这个时间还未执行完成则会抛出异常，默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 取消令牌，用于取消正在执行的操作 Returns Task 表示异步操作的Task对象 SendAsync(Func<Task>, int, bool, CancellationToken) 异步发送有返回值的工作指令到Actor，支持锁检查 public Task SendAsync(Func<Task> work, int timeout = -1, bool checkLock = true, CancellationToken cancellationToken = default) Parameters work Func<Task> 要执行的异步工作内容，以Func<Task>委托形式传入 timeout int 执行超时时间，如果超过这个时间还未执行完成则会抛出异常，默认为-1,将采用配置时间ActorTimeOut checkLock bool 是否检查Actor的锁状态，默认为true cancellationToken CancellationToken 取消令牌，用于取消正在执行的操作 Returns Task 表示异步操作的Task对象 SendAsync<T>(Func<Task<T>>, int, CancellationToken) 异步发送有返回值的工作指令到Actor public Task<T> SendAsync<T>(Func<Task<T>> work, int timeOut = -1, CancellationToken cancellationToken = default) Parameters work Func<Task<T>> 要执行的异步工作内容，以Func<Task<T>>委托形式传入 timeOut int 执行超时时间，如果超过这个时间还未执行完成则会抛出异常，默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 取消令牌，用于取消正在执行的操作 Returns Task<T> 包含执行结果的 Task<T> 对象 Type Parameters T 返回结果的类型 SendAsync<T>(Func<T>, int, CancellationToken) 异步发送有返回值的工作指令到Actor public Task<T> SendAsync<T>(Func<T> work, int timeout = -1, CancellationToken cancellationToken = default) Parameters work Func<T> 要执行的工作内容，以Func<T>委托形式传入 timeout int 执行超时时间，如果超过这个时间还未执行完成则会抛出异常，默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 取消令牌，用于取消正在执行的操作 Returns Task<T> 包含执行结果的 Task<T> 对象 Type Parameters T 返回结果的类型 SetAutoRecycle(bool) 设置Actor组件是否自动回收 protected void SetAutoRecycle(bool autoRecycle) Parameters autoRecycle bool true表示启用自动回收，false表示禁用自动回收 SetOwner(IComponent) 设置组件的所有者 public void SetOwner(IComponent owner) Parameters owner IComponent 所有者实例 Tell(Action, int, CancellationToken) 发送无返回值的工作指令到Actor public void Tell(Action work, int timeout = -1, CancellationToken cancellationToken = default) Parameters work Action 要执行的工作内容，以Action委托形式传入 timeout int 执行超时时间，如果超过这个时间还未执行完成则会抛出异常，默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 取消令牌，用于取消正在执行的操作 Tell(Func<Task>, int, CancellationToken) 发送异步工作指令到Actor public void Tell(Func<Task> work, int timeout = -1, CancellationToken cancellationToken = default) Parameters work Func<Task> 要执行的异步工作内容，以 Func<Task> 委托形式传入 timeout int 执行超时时间，如果超过这个时间还未执行完成则会抛出异常，默认为-1,将采用配置时间ActorTimeOut cancellationToken CancellationToken 取消令牌，用于取消正在执行的操作 Unscheduled(long) 取消订阅指定ID的定时任务，并从调度集合中移除 public void Unscheduled(long id) Parameters id long 要取消的定时任务ID Weekly<T>(DayOfWeek, int, int, GameEventArgs, long) 创建每周定时执行的任务，在指定的星期几和时间点执行 public long Weekly<T>(DayOfWeek dayOfWeek, int hour = 0, int minute = 0, GameEventArgs gameEventArgs = null, long unScheduleId = 0) where T : ITimerHandler Parameters dayOfWeek DayOfWeek 指定每周执行的星期几（周日到周六） hour int 执行的小时数（0-23） minute int 执行的分钟数（0-59） gameEventArgs GameEventArgs 传递给定时任务处理器的自定义参数对象 unScheduleId long 需要取消的已存在的定时任务ID，如果大于0则会先取消该任务 Returns long 新创建的定时任务ID，可用于后续取消该任务 Type Parameters T 实现了ITimerHandler接口的定时任务处理器类型 WithCronExpression<T>(string, GameEventArgs, long) 使用Cron表达式创建定时任务，提供更灵活的定时任务调度 public long WithCronExpression<T>(string cronExpression, GameEventArgs gameEventArgs = null, long unScheduleId = 0) where T : ITimerHandler Parameters cronExpression string 标准的Cron表达式，用于定义复杂的执行计划 gameEventArgs GameEventArgs 传递给定时任务处理器的自定义参数对象 unScheduleId long 需要取消的已存在的定时任务ID，如果大于0则会先取消该任务 Returns long 新创建的定时任务ID，可用于后续取消该任务 Type Parameters T 实现了ITimerHandler接口的定时任务处理器类型 WithDayOfWeeks<T>(int, int, GameEventArgs, params DayOfWeek[]) 创建在每周多个指定日期执行的定时任务 public long WithDayOfWeeks<T>(int hour, int minute, GameEventArgs gameEventArgs, params DayOfWeek[] dayOfWeeks) where T : ITimerHandler Parameters hour int 执行的小时数（0-23） minute int 执行的分钟数（0-59） gameEventArgs GameEventArgs 传递给定时任务处理器的自定义参数对象 dayOfWeeks DayOfWeek[] 指定要执行的多个星期几，可变参数数组 Returns long 新创建的定时任务ID，可用于后续取消该任务 Type Parameters T 实现了ITimerHandler接口的定时任务处理器类型"
  },
  "api/GameFrameX.Core.Hotfix.Agent.FuncComponentAgent-1.html": {
    "href": "api/GameFrameX.Core.Hotfix.Agent.FuncComponentAgent-1.html",
    "title": "Class FuncComponentAgent<TComponent> | GameFrameX.Server",
    "summary": "Class FuncComponentAgent<TComponent> Namespace GameFrameX.Core.Hotfix.Agent Assembly GameFrameX.Core.dll 无返回值组件代理 public abstract class FuncComponentAgent<TComponent> : BaseComponentAgent<TComponent>, IComponentAgent, IWorker where TComponent : BaseComponent Type Parameters TComponent 具体的组件类型 Inheritance object BaseComponentAgent<TComponent> FuncComponentAgent<TComponent> Implements IComponentAgent IWorker Inherited Members BaseComponentAgent<TComponent>.OwnerComponent BaseComponentAgent<TComponent>.Actor BaseComponentAgent<TComponent>.ScheduleIdSet BaseComponentAgent<TComponent>.Owner BaseComponentAgent<TComponent>.ActorId BaseComponentAgent<TComponent>.OwnerType BaseComponentAgent<TComponent>.SetOwner(IComponent) BaseComponentAgent<TComponent>.IsInvokedBeforeActivation BaseComponentAgent<TComponent>.BeforeActivation() BaseComponentAgent<TComponent>.IsInvokedActivation BaseComponentAgent<TComponent>.Active() BaseComponentAgent<TComponent>.IsInvokedAfterActivation BaseComponentAgent<TComponent>.AfterActivation() BaseComponentAgent<TComponent>.IsInvokedBeforeInActivation BaseComponentAgent<TComponent>.BeforeInActivation() BaseComponentAgent<TComponent>.Inactive() BaseComponentAgent<TComponent>.IsInvokedAfterInActivation BaseComponentAgent<TComponent>.AfterInActivation() BaseComponentAgent<TComponent>.GetComponentAgent(Type, bool) BaseComponentAgent<TComponent>.GetComponentAgent<T>(bool) BaseComponentAgent<TComponent>.Tell(Action, int, CancellationToken) BaseComponentAgent<TComponent>.Tell(Func<Task>, int, CancellationToken) BaseComponentAgent<TComponent>.SendAsync(Action, int, CancellationToken) BaseComponentAgent<TComponent>.SendAsync<T>(Func<T>, int, CancellationToken) BaseComponentAgent<TComponent>.SendAsync(Func<Task>, int, bool, CancellationToken) BaseComponentAgent<TComponent>.SendAsync<T>(Func<Task<T>>, int, CancellationToken) BaseComponentAgent<TComponent>.SetAutoRecycle(bool) BaseComponentAgent<TComponent>.ActorCrossDay(int) BaseComponentAgent<TComponent>.Unscheduled(long) BaseComponentAgent<TComponent>.Pause(long) BaseComponentAgent<TComponent>.Resume(long) BaseComponentAgent<TComponent>.Delay<T>(DateTime, GameEventArgs, long) BaseComponentAgent<TComponent>.Delay<T>(long, GameEventArgs, long) BaseComponentAgent<TComponent>.Delay<T>(TimeSpan, GameEventArgs, long) BaseComponentAgent<TComponent>.Schedule<T>(TimeSpan, TimeSpan, GameEventArgs, int, long) BaseComponentAgent<TComponent>.Daily<T>(int, int, GameEventArgs, long) BaseComponentAgent<TComponent>.Weekly<T>(DayOfWeek, int, int, GameEventArgs, long) BaseComponentAgent<TComponent>.WithDayOfWeeks<T>(int, int, GameEventArgs, params DayOfWeek[]) BaseComponentAgent<TComponent>.Monthly<T>(int, int, int, GameEventArgs, long) BaseComponentAgent<TComponent>.WithCronExpression<T>(string, GameEventArgs, long) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/GameFrameX.Core.Hotfix.Agent.StateComponentAgent-2.html": {
    "href": "api/GameFrameX.Core.Hotfix.Agent.StateComponentAgent-2.html",
    "title": "Class StateComponentAgent<TComponent, TState> | GameFrameX.Server",
    "summary": "Class StateComponentAgent<TComponent, TState> Namespace GameFrameX.Core.Hotfix.Agent Assembly GameFrameX.Core.dll 状态组件代理类 public abstract class StateComponentAgent<TComponent, TState> : BaseComponentAgent<TComponent>, IComponentAgent, IWorker where TComponent : StateComponent<TState> where TState : BaseCacheState, new() Type Parameters TComponent 组件对象类型 TState 数据对象类型 Inheritance object BaseComponentAgent<TComponent> StateComponentAgent<TComponent, TState> Implements IComponentAgent IWorker Inherited Members BaseComponentAgent<TComponent>.OwnerComponent BaseComponentAgent<TComponent>.Actor BaseComponentAgent<TComponent>.ScheduleIdSet BaseComponentAgent<TComponent>.Owner BaseComponentAgent<TComponent>.ActorId BaseComponentAgent<TComponent>.OwnerType BaseComponentAgent<TComponent>.SetOwner(IComponent) BaseComponentAgent<TComponent>.IsInvokedBeforeActivation BaseComponentAgent<TComponent>.BeforeActivation() BaseComponentAgent<TComponent>.IsInvokedActivation BaseComponentAgent<TComponent>.Active() BaseComponentAgent<TComponent>.IsInvokedAfterActivation BaseComponentAgent<TComponent>.AfterActivation() BaseComponentAgent<TComponent>.IsInvokedBeforeInActivation BaseComponentAgent<TComponent>.BeforeInActivation() BaseComponentAgent<TComponent>.Inactive() BaseComponentAgent<TComponent>.IsInvokedAfterInActivation BaseComponentAgent<TComponent>.AfterInActivation() BaseComponentAgent<TComponent>.GetComponentAgent(Type, bool) BaseComponentAgent<TComponent>.GetComponentAgent<T>(bool) BaseComponentAgent<TComponent>.Tell(Action, int, CancellationToken) BaseComponentAgent<TComponent>.Tell(Func<Task>, int, CancellationToken) BaseComponentAgent<TComponent>.SendAsync(Action, int, CancellationToken) BaseComponentAgent<TComponent>.SendAsync<T>(Func<T>, int, CancellationToken) BaseComponentAgent<TComponent>.SendAsync(Func<Task>, int, bool, CancellationToken) BaseComponentAgent<TComponent>.SendAsync<T>(Func<Task<T>>, int, CancellationToken) BaseComponentAgent<TComponent>.SetAutoRecycle(bool) BaseComponentAgent<TComponent>.ActorCrossDay(int) BaseComponentAgent<TComponent>.Unscheduled(long) BaseComponentAgent<TComponent>.Pause(long) BaseComponentAgent<TComponent>.Resume(long) BaseComponentAgent<TComponent>.Delay<T>(DateTime, GameEventArgs, long) BaseComponentAgent<TComponent>.Delay<T>(long, GameEventArgs, long) BaseComponentAgent<TComponent>.Delay<T>(TimeSpan, GameEventArgs, long) BaseComponentAgent<TComponent>.Schedule<T>(TimeSpan, TimeSpan, GameEventArgs, int, long) BaseComponentAgent<TComponent>.Daily<T>(int, int, GameEventArgs, long) BaseComponentAgent<TComponent>.Weekly<T>(DayOfWeek, int, int, GameEventArgs, long) BaseComponentAgent<TComponent>.WithDayOfWeeks<T>(int, int, GameEventArgs, params DayOfWeek[]) BaseComponentAgent<TComponent>.Monthly<T>(int, int, int, GameEventArgs, long) BaseComponentAgent<TComponent>.WithCronExpression<T>(string, GameEventArgs, long) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties State 获取数据对象 public TState State { get; } Property Value TState"
  },
  "api/GameFrameX.Core.Hotfix.Agent.html": {
    "href": "api/GameFrameX.Core.Hotfix.Agent.html",
    "title": "Namespace GameFrameX.Core.Hotfix.Agent | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Hotfix.Agent Classes BaseComponentAgent<TComponent> 基础组件代理类，用于管理组件与Actor之间的交互 FuncComponentAgent<TComponent> 无返回值组件代理 StateComponentAgent<TComponent, TState> 状态组件代理类"
  },
  "api/GameFrameX.Core.Hotfix.HotfixManager.html": {
    "href": "api/GameFrameX.Core.Hotfix.HotfixManager.html",
    "title": "Class HotfixManager | GameFrameX.Server",
    "summary": "Class HotfixManager Namespace GameFrameX.Core.Hotfix Assembly GameFrameX.Core.dll 热更新管理器 public static class HotfixManager Inheritance object HotfixManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HotfixAssembly 热更新程序集 public static Assembly HotfixAssembly { get; } Property Value Assembly ReloadTime 最近一次热更新重载的时间 public static DateTime ReloadTime { get; } Property Value DateTime Methods FindListeners(int) 获取指定事件ID的事件监听器列表 public static List<IEventListener> FindListeners(int eventId) Parameters eventId int 事件ID Returns List<IEventListener> 返回监听器列表，如果没有则返回空列表 FindListeners(ushort, int) 获取指定Actor类型和事件ID的事件监听器列表 public static List<IEventListener> FindListeners(ushort actorType, int eventId) Parameters actorType ushort Actor类型 eventId int 事件ID Returns List<IEventListener> 返回监听器列表，如果没有则返回空列表 GetAgent<T>(BaseComponent, Type) 获取组件的代理实例 public static T GetAgent<T>(BaseComponent component, Type refAssemblyType) where T : IComponentAgent Parameters component BaseComponent 组件实例 refAssemblyType Type 引用程序集类型 Returns T 返回代理实例 Type Parameters T 代理类型 GetHttpHandler(string) 获取HTTP消息处理器 public static BaseHttpHandler GetHttpHandler(string cmd) Parameters cmd string HTTP命令 Returns BaseHttpHandler 返回对应的HTTP处理器 GetInstance<T>(string, Type) 获取指定类型的实例 主要用于获取Event,Timer, Schedule的Handler实例 public static T GetInstance<T>(string typeName, Type refAssemblyType = null) Parameters typeName string 类型名称 refAssemblyType Type 引用程序集类型 Returns T 返回指定类型的实例，如果类型名称为空则返回默认值 Type Parameters T 实例类型 GetListHttpHandler() 获取所有HTTP消息处理器列表 public static List<BaseHttpHandler> GetListHttpHandler() Returns List<BaseHttpHandler> 返回HTTP处理器列表 GetTcpHandler(int) 获取TCP消息处理器 public static BaseMessageHandler GetTcpHandler(int msgId) Parameters msgId int 消息ID Returns BaseMessageHandler 返回对应的消息处理器 LoadHotfix(AppSetting, string, string, string) 加载热更新模块 public static bool LoadHotfix(AppSetting setting, string dllVersion = \"\", string dllPath = \"hotfix\", string hotfixDllName = \"GameFrameX.Hotfix.dll\") Parameters setting AppSetting 应用程序配置 dllVersion string Dll版本.当不为空的时候会优先加载指定的Dll.替换 dllPath 参数 dllPath string 热更新程序集路径，默认为hotfix hotfixDllName string 热更新程序集名称 Returns bool 返回是否加载成功 LoadHotfixModule(AppSetting, string, string, string) 加载热更新模块 public static Task<bool> LoadHotfixModule(AppSetting setting, string dllVersion = \"\", string dllPath = \"hotfix\", string hotfixDllName = \"GameFrameX.Hotfix.dll\") Parameters setting AppSetting 应用程序配置 dllVersion string Dll版本.当不为空的时候会优先加载指定的Dll.替换 dllPath 参数 dllPath string 热更新程序集路径，默认为hotfix hotfixDllName string 热更新程序集名称 Returns Task<bool> 返回是否加载成功 Stop(string) 停止热更新模块 public static Task Stop(string message = \"\") Parameters message string 停止原因 Returns Task"
  },
  "api/GameFrameX.Core.Hotfix.IHotfixBridge.html": {
    "href": "api/GameFrameX.Core.Hotfix.IHotfixBridge.html",
    "title": "Interface IHotfixBridge | GameFrameX.Server",
    "summary": "Interface IHotfixBridge Namespace GameFrameX.Core.Hotfix Assembly GameFrameX.Core.dll 热更新桥接基础接口 public interface IHotfixBridge Methods OnLoadSuccess(AppSetting, bool) 加载成功 Task<bool> OnLoadSuccess(AppSetting setting, bool reload) Parameters setting AppSetting 应用设置，包含热更新相关的配置信息 reload bool 是否为重新加载，表示此次加载是首次加载还是重新加载 Returns Task<bool> 一个任务，表示异步操作的结果，并返回加载是否成功的布尔值 Stop(string) 停止 Task Stop(string message = \"\") Parameters message string 停止原因 Returns Task 一个任务，表示异步操作的结果"
  },
  "api/GameFrameX.Core.Hotfix.html": {
    "href": "api/GameFrameX.Core.Hotfix.html",
    "title": "Namespace GameFrameX.Core.Hotfix | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Hotfix Classes HotfixManager 热更新管理器 Interfaces IHotfixBridge 热更新桥接基础接口"
  },
  "api/GameFrameX.Core.Timer.GlobalTimer.html": {
    "href": "api/GameFrameX.Core.Timer.GlobalTimer.html",
    "title": "Class GlobalTimer | GameFrameX.Server",
    "summary": "Class GlobalTimer Namespace GameFrameX.Core.Timer Assembly GameFrameX.Core.dll 全局定时器 public static class GlobalTimer Inheritance object GlobalTimer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields IsWorking 是否正在工作 public static volatile bool IsWorking Field Value bool Methods Start() 开始全局定时 public static void Start() Stop() 停止全局定时 public static Task Stop() Returns Task"
  },
  "api/GameFrameX.Core.Timer.Handler.ITimerHandler.html": {
    "href": "api/GameFrameX.Core.Timer.Handler.ITimerHandler.html",
    "title": "Interface ITimerHandler | GameFrameX.Server",
    "summary": "Interface ITimerHandler Namespace GameFrameX.Core.Timer.Handler Assembly GameFrameX.Core.dll 计时器处理器接口 public interface ITimerHandler Methods InnerHandleTimer(IComponentAgent, GameEventArgs) 内部计时器处理器调用函数 Task InnerHandleTimer(IComponentAgent agent, GameEventArgs gameEventArgs) Parameters agent IComponentAgent 组件代理对象，用于与系统其他部分交互 gameEventArgs GameEventArgs 传递给处理器的参数 Returns Task 一个任务，表示异步操作的结果"
  },
  "api/GameFrameX.Core.Timer.Handler.NotHotfixTimerHandler.html": {
    "href": "api/GameFrameX.Core.Timer.Handler.NotHotfixTimerHandler.html",
    "title": "Class NotHotfixTimerHandler | GameFrameX.Server",
    "summary": "Class NotHotfixTimerHandler Namespace GameFrameX.Core.Timer.Handler Assembly GameFrameX.Core.dll 非热更程序集的计时器处理器，不需要热更时间更新 public abstract class NotHotfixTimerHandler : IJob Inheritance object NotHotfixTimerHandler Implements IJob Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(IJobExecutionContext) 内部计时器处理器调用函数 public Task Execute(IJobExecutionContext context) Parameters context IJobExecutionContext Quartz 作业执行上下文，包含作业执行所需的信息 Returns Task 一个任务，表示异步操作的结果 HandleTimer(GameEventArgs) 计时器处理函数 protected abstract Task HandleTimer(GameEventArgs gameEventArgs) Parameters gameEventArgs GameEventArgs 传递给处理器的参数 Returns Task 一个任务，表示异步操作的结果"
  },
  "api/GameFrameX.Core.Timer.Handler.TimerHandler-1.html": {
    "href": "api/GameFrameX.Core.Timer.Handler.TimerHandler-1.html",
    "title": "Class TimerHandler<TAgent> | GameFrameX.Server",
    "summary": "Class TimerHandler<TAgent> Namespace GameFrameX.Core.Timer.Handler Assembly GameFrameX.Core.dll 热更新程序集的计时器处理器 public abstract class TimerHandler<TAgent> : ITimerHandler where TAgent : IComponentAgent Type Parameters TAgent 组件类型，必须实现 IComponentAgent 接口 Inheritance object TimerHandler<TAgent> Implements ITimerHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleTimer(TAgent, GameEventArgs) 计时器调用 protected abstract Task HandleTimer(TAgent agent, GameEventArgs gameEventArgs) Parameters agent TAgent 调用对象，具体类型的组件代理对象 gameEventArgs GameEventArgs 参数对象，传递给处理器的参数 Returns Task 一个任务，表示异步操作的结果 InnerHandleTimer(IComponentAgent, GameEventArgs) 内部计时器处理器调用。由 Quartz 调用 public Task InnerHandleTimer(IComponentAgent agent, GameEventArgs gameEventArgs) Parameters agent IComponentAgent 组件代理对象，用于与系统其他部分交互 gameEventArgs GameEventArgs 传递给处理器的参数 Returns Task 一个任务，表示异步操作的结果"
  },
  "api/GameFrameX.Core.Timer.Handler.html": {
    "href": "api/GameFrameX.Core.Timer.Handler.html",
    "title": "Namespace GameFrameX.Core.Timer.Handler | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Timer.Handler Classes NotHotfixTimerHandler 非热更程序集的计时器处理器，不需要热更时间更新 TimerHandler<TAgent> 热更新程序集的计时器处理器 Interfaces ITimerHandler 计时器处理器接口"
  },
  "api/GameFrameX.Core.Timer.QuartzTimer.html": {
    "href": "api/GameFrameX.Core.Timer.QuartzTimer.html",
    "title": "Class QuartzTimer | GameFrameX.Server",
    "summary": "Class QuartzTimer Namespace GameFrameX.Core.Timer Assembly GameFrameX.Core.dll Quartz定时器 提供基于Quartz的定时任务调度功能,支持热更新和非热更新两种模式 public static class QuartzTimer Inheritance object QuartzTimer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ParamKey 任务参数的键名 public const string ParamKey = \"param\" Field Value string Methods Daily<T>(long, int, int, GameEventArgs) 每日定时执行的任务 public static long Daily<T>(long actorId, int hour, int minute, GameEventArgs eventArgs = null) where T : ITimerHandler Parameters actorId long Actor的唯一标识,用于定位执行任务的Actor hour int 指定执行的小时(0-23) minute int 指定执行的分钟(0-59) eventArgs GameEventArgs 传递给定时器处理器的自定义参数 Returns long 生成的定时任务ID,可用于后续管理该任务 Type Parameters T 定时器处理器类型,必须实现ITimerHandler接口 Exceptions ArgumentOutOfRangeException 当hour或minute参数超出有效范围时抛出 Delay<T>(long, TimeSpan, GameEventArgs) 延迟执行一次的定时任务 public static long Delay<T>(long actorId, TimeSpan delay, GameEventArgs eventArgs = null) where T : ITimerHandler Parameters actorId long Actor的唯一标识,用于定位执行任务的Actor delay TimeSpan 延迟执行的时间 eventArgs GameEventArgs 传递给定时器处理器的自定义参数 Returns long 生成的定时任务ID,可用于后续管理该任务 Type Parameters T 定时器处理器类型,必须实现ITimerHandler接口 Monthly<T>(long, int, int, int, GameEventArgs) 每月固定某天执行的定时任务 public static long Monthly<T>(long actorId, int dayOfMonth, int hour, int minute, GameEventArgs gameEventArgs = null) where T : ITimerHandler Parameters actorId long Actor的唯一标识,用于定位执行任务的Actor dayOfMonth int 指定执行的日期(1-31) hour int 指定执行的小时(0-23) minute int 指定执行的分钟(0-59) gameEventArgs GameEventArgs 传递给定时器处理器的自定义参数 Returns long 生成的定时任务ID,可用于后续管理该任务 Type Parameters T 定时器处理器类型,必须实现ITimerHandler接口 Exceptions ArgumentException 当dayOfMonth参数超出有效范围时抛出 Pause(IEnumerable<long>) 批量暂停定时任务 public static void Pause(IEnumerable<long> set) Parameters set IEnumerable<long> 要暂停的定时任务ID集合 Pause(long) 暂停指定的定时任务 public static void Pause(long id) Parameters id long 要暂停的定时任务ID Remove(IEnumerable<long>) 批量删除定时任务 public static void Remove(IEnumerable<long> set) Parameters set IEnumerable<long> 要删除的定时任务ID集合 Remove(long) 删除指定的定时任务 public static void Remove(long id) Parameters id long 要删除的定时任务ID Resume(IEnumerable<long>) 批量恢复定时任务 public static void Resume(IEnumerable<long> set) Parameters set IEnumerable<long> 要恢复的定时任务ID集合 Resume(long) 恢复指定的定时任务 public static void Resume(long id) Parameters id long 要恢复的定时任务ID Schedule<T>(long, TimeSpan, TimeSpan, GameEventArgs, int, bool) 每隔一段时间执行一次的定时任务 public static long Schedule<T>(long actorId, TimeSpan delay, TimeSpan interval, GameEventArgs eventArgs = null, int repeatCount = -1, bool isMissFire = true) where T : ITimerHandler Parameters actorId long Actor的唯一标识,用于定位执行任务的Actor delay TimeSpan 首次执行前的延迟时间 interval TimeSpan 每次执行之间的间隔时间 eventArgs GameEventArgs 传递给定时器处理器的自定义参数 repeatCount int 循环次数,设置为-1表示无限循环执行 isMissFire bool 是否允许错过执行 Returns long 生成的定时任务ID,可用于后续管理该任务 Type Parameters T 定时器处理器类型,必须实现ITimerHandler接口 Start() 启动定时任务调度器 public static Task Start() Returns Task 表示异步操作的任务 Remarks 启动调度器,使其开始处理已安排的任务 Stop() 停止定时任务调度器 public static Task Stop() Returns Task 表示异步操作的任务 Remarks 关闭调度器,停止所有正在运行的任务,并阻止新任务的触发 UnSchedule(IEnumerable<long>) 批量取消订阅定时任务 [Obsolete(\"请使用Remove(IEnumerable<long> set)\")] public static void UnSchedule(IEnumerable<long> set) Parameters set IEnumerable<long> 要取消的定时任务ID集合 UnSchedule(long) 取消订阅定时任务 [Obsolete(\"请使用Remove(long id)\")] public static void UnSchedule(long id) Parameters id long 要取消的定时任务ID Weekly<T>(long, DayOfWeek, int, int, GameEventArgs) 每周固定某天执行的定时任务 public static long Weekly<T>(long actorId, DayOfWeek dayOfWeek, int hour, int minute, GameEventArgs gameEventArgs = null) where T : ITimerHandler Parameters actorId long Actor的唯一标识,用于定位执行任务的Actor dayOfWeek DayOfWeek 指定执行的星期几 hour int 指定执行的小时(0-23) minute int 指定执行的分钟(0-59) gameEventArgs GameEventArgs 传递给定时器处理器的自定义参数 Returns long 生成的定时任务ID,可用于后续管理该任务 Type Parameters T 定时器处理器类型,必须实现ITimerHandler接口 WithCronExpression<T>(long, string, GameEventArgs) 基于Cron表达式的定时任务 public static long WithCronExpression<T>(long actorId, string cronExpression, GameEventArgs eventArgs = null) where T : ITimerHandler Parameters actorId long Actor的唯一标识,用于定位执行任务的Actor cronExpression string 标准的Cron表达式,用于配置复杂的执行时间规则 eventArgs GameEventArgs 传递给定时器处理器的自定义参数 Returns long 生成的定时任务ID,可用于后续管理该任务 Type Parameters T 定时器处理器类型,必须实现ITimerHandler接口 WithDayOfWeeks<T>(long, int, int, GameEventArgs, params DayOfWeek[]) 在每周指定的多个日期执行的定时任务 public static long WithDayOfWeeks<T>(long actorId, int hour, int minute, GameEventArgs gameEventArgs, params DayOfWeek[] dayOfWeeks) where T : ITimerHandler Parameters actorId long Actor的唯一标识,用于定位执行任务的Actor hour int 指定执行的小时(0-23) minute int 指定执行的分钟(0-59) gameEventArgs GameEventArgs 传递给定时器处理器的自定义参数 dayOfWeeks DayOfWeek[] 指定要执行的星期几,可以指定多个 Returns long 生成的定时任务ID,可用于后续管理该任务 Type Parameters T 定时器处理器类型,必须实现ITimerHandler接口 Exceptions ArgumentNullException 当dayOfWeeks参数为空或长度为0时抛出"
  },
  "api/GameFrameX.Core.Timer.html": {
    "href": "api/GameFrameX.Core.Timer.html",
    "title": "Namespace GameFrameX.Core.Timer | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Timer Classes GlobalTimer 全局定时器 QuartzTimer Quartz定时器 提供基于Quartz的定时任务调度功能,支持热更新和非热更新两种模式"
  },
  "api/GameFrameX.Core.Utility.ActorIdGenerator.html": {
    "href": "api/GameFrameX.Core.Utility.ActorIdGenerator.html",
    "title": "Class ActorIdGenerator | GameFrameX.Server",
    "summary": "Class ActorIdGenerator Namespace GameFrameX.Core.Utility Assembly GameFrameX.Core.dll ActorId 生成器 14 + 7 + 30 + 12 = 63 服务器id 类型 时间戳 自增 玩家 公会 服务器id * 100000 + 全局功能id 全局玩法 public static class ActorIdGenerator Inheritance object ActorIdGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetActorId(ushort, int) 根据ActorType获取ActorId public static long GetActorId(ushort type, int serverId = 0) Parameters type ushort serverId int Returns long Exceptions ArgumentException GetActorType(long) 根据ActorId获取ActorType public static ushort GetActorType(long actorId) Parameters actorId long Returns ushort Exceptions ArgumentException GetServerId(long) 根据ActorId获取服务器id public static int GetServerId(long actorId) Parameters actorId long ActorId Returns int 服务器id GetUniqueId(ushort) 根据模块获取唯一ID public static long GetUniqueId(ushort module = 999) Parameters module ushort 默认最大值. Returns long GetUniqueIdByModule(ushort) 根据模块获取唯一ID public static long GetUniqueIdByModule(ushort module = 999) Parameters module ushort 默认最大值. 最大值不能超过999 Returns long"
  },
  "api/GameFrameX.Core.Utility.AgentCallback-1.html": {
    "href": "api/GameFrameX.Core.Utility.AgentCallback-1.html",
    "title": "Class AgentCallback<TAgent> | GameFrameX.Server",
    "summary": "Class AgentCallback<TAgent> Namespace GameFrameX.Core.Utility Assembly GameFrameX.Core.dll 代理调用回调 public abstract class AgentCallback<TAgent> : IAgentCallback where TAgent : IComponentAgent Type Parameters TAgent Inheritance object AgentCallback<TAgent> Implements IAgentCallback Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CompAgentType() public Type CompAgentType() Returns Type Invoke(IComponentAgent, GameEventArgs) 执行 public Task<bool> Invoke(IComponentAgent agent, GameEventArgs gameEventArgs = null) Parameters agent IComponentAgent gameEventArgs GameEventArgs Returns Task<bool> OnCall(TAgent, GameEventArgs) 回调 protected abstract Task<bool> OnCall(TAgent comp, GameEventArgs gameEventArgs) Parameters comp TAgent gameEventArgs GameEventArgs Returns Task<bool>"
  },
  "api/GameFrameX.Core.Utility.IAgentCallback.html": {
    "href": "api/GameFrameX.Core.Utility.IAgentCallback.html",
    "title": "Interface IAgentCallback | GameFrameX.Server",
    "summary": "Interface IAgentCallback Namespace GameFrameX.Core.Utility Assembly GameFrameX.Core.dll 代理调用回调 public interface IAgentCallback Methods CompAgentType() 组件代理类型 Type CompAgentType() Returns Type Invoke(IComponentAgent, GameEventArgs) 执行 Task<bool> Invoke(IComponentAgent agent, GameEventArgs gameEventArgs = null) Parameters agent IComponentAgent 组件代理 gameEventArgs GameEventArgs 参数 Returns Task<bool>"
  },
  "api/GameFrameX.Core.Utility.StatisticsTool.html": {
    "href": "api/GameFrameX.Core.Utility.StatisticsTool.html",
    "title": "Class StatisticsTool | GameFrameX.Server",
    "summary": "Class StatisticsTool Namespace GameFrameX.Core.Utility Assembly GameFrameX.Core.dll 统计工具 public sealed class StatisticsTool Inheritance object StatisticsTool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods ClearCount() 清理统计 public void ClearCount() ClearCount(DateTime) 清理统计 public void ClearCount(DateTime time) Parameters time DateTime Count(string, int) 记录统计 public void Count(string key, int num = 1) Parameters key string num int CountRecord(int) 统计 public Task<string> CountRecord(int limit = 10) Parameters limit int Returns Task<string>"
  },
  "api/GameFrameX.Core.Utility.html": {
    "href": "api/GameFrameX.Core.Utility.html",
    "title": "Namespace GameFrameX.Core.Utility | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Core.Utility Classes ActorIdGenerator ActorId 生成器 14 + 7 + 30 + 12 = 63 服务器id 类型 时间戳 自增 玩家 公会 服务器id * 100000 + 全局功能id 全局玩法 AgentCallback<TAgent> 代理调用回调 StatisticsTool 统计工具 Interfaces IAgentCallback 代理调用回调"
  },
  "api/GameFrameX.NetWork.Abstractions.IActorHeartBeat.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IActorHeartBeat.html",
    "title": "Interface IActorHeartBeat | GameFrameX.Server",
    "summary": "Interface IActorHeartBeat Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 心跳接口，用于标识具备心跳时间戳的Actor public interface IActorHeartBeat : INetworkMessage, IMessage Inherited Members INetworkMessage.UniqueId INetworkMessage.SetMessageId(int) INetworkMessage.UpdateUniqueId() INetworkMessage.SetUniqueId(int) INetworkMessage.ToJsonString() IMessage.ToFormatMessageString(long) Properties Timestamp 时间戳，单位毫秒，表示该Actor最后一次心跳的时间 long Timestamp { get; set; } Property Value long"
  },
  "api/GameFrameX.NetWork.Abstractions.ICommandInfo.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.ICommandInfo.html",
    "title": "Interface ICommandInfo | GameFrameX.Server",
    "summary": "Interface ICommandInfo Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息指令信息 public interface ICommandInfo Properties MainId 主消息ID int MainId { get; } Property Value int MessageId 合并后的消息ID int MessageId { get; } Property Value int SubId 次消息ID int SubId { get; } Property Value int"
  },
  "api/GameFrameX.NetWork.Abstractions.IHeartBeatMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IHeartBeatMessage.html",
    "title": "Interface IHeartBeatMessage | GameFrameX.Server",
    "summary": "Interface IHeartBeatMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 心跳消息接口 public interface IHeartBeatMessage : INetworkMessage, IMessage Inherited Members INetworkMessage.UniqueId INetworkMessage.SetMessageId(int) INetworkMessage.UpdateUniqueId() INetworkMessage.SetUniqueId(int) INetworkMessage.ToJsonString() IMessage.ToFormatMessageString(long)"
  },
  "api/GameFrameX.NetWork.Abstractions.IInnerNetworkMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IInnerNetworkMessage.html",
    "title": "Interface IInnerNetworkMessage | GameFrameX.Server",
    "summary": "Interface IInnerNetworkMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 内部消息 public interface IInnerNetworkMessage : IMessage Inherited Members IMessage.ToFormatMessageString(long) Properties Header 消息头对象 INetworkMessageHeader Header { get; } Property Value INetworkMessageHeader MessageData 消息数据 byte[] MessageData { get; } Property Value byte[] Methods ClearData() 清除消息数据 void ClearData() DeserializeMessageObject() 转换消息数据为消息对象 INetworkMessage DeserializeMessageObject() Returns INetworkMessage GetData(string) 获取消息数据 object GetData(string key) Parameters key string Returns object SetData(string, object) 设置消息数据 void SetData(string key, object value) Parameters key string value object SetMessageData(byte[]) 设置消息数据 void SetMessageData(byte[] messageData) Parameters messageData byte[]"
  },
  "api/GameFrameX.NetWork.Abstractions.IMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IMessage.html",
    "title": "Interface IMessage | GameFrameX.Server",
    "summary": "Interface IMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 网络消息 public interface IMessage Methods ToFormatMessageString(long) 获取格式化后的消息字符串 string ToFormatMessageString(long actorId = 0) Parameters actorId long ActorId Returns string 格式化后的消息字符串"
  },
  "api/GameFrameX.NetWork.Abstractions.IMessageCompressHandler.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IMessageCompressHandler.html",
    "title": "Interface IMessageCompressHandler | GameFrameX.Server",
    "summary": "Interface IMessageCompressHandler Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息压缩器接口定义，用于压缩消息数据 public interface IMessageCompressHandler Methods Handler(byte[]) 压缩处理 byte[] Handler(byte[] message) Parameters message byte[] 消息未压缩内容 Returns byte[]"
  },
  "api/GameFrameX.NetWork.Abstractions.IMessageDecoderHandler.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IMessageDecoderHandler.html",
    "title": "Interface IMessageDecoderHandler | GameFrameX.Server",
    "summary": "Interface IMessageDecoderHandler Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息解码器定义接口 public interface IMessageDecoderHandler Properties PackageHeaderLength 消息头长度 ushort PackageHeaderLength { get; } Property Value ushort Methods Handler(ref ReadOnlySequence<byte>) 解析消息 IMessage Handler(ref ReadOnlySequence<byte> sequence) Parameters sequence ReadOnlySequence<byte> 消息数据 Returns IMessage 消息结果对象 Handler(byte[]) 解析消息 IMessage Handler(byte[] data) Parameters data byte[] 消息数据 Returns IMessage 消息结果对象 SetDecompressionHandler(IMessageDecompressHandler) 设置解压消息处理器 void SetDecompressionHandler(IMessageDecompressHandler decompressHandler = null) Parameters decompressHandler IMessageDecompressHandler 解压消息处理器"
  },
  "api/GameFrameX.NetWork.Abstractions.IMessageDecompressHandler.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IMessageDecompressHandler.html",
    "title": "Interface IMessageDecompressHandler | GameFrameX.Server",
    "summary": "Interface IMessageDecompressHandler Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息解压器接口定义，用于解压压缩后的消息 public interface IMessageDecompressHandler Methods Handler(byte[]) 解压处理 byte[] Handler(byte[] message) Parameters message byte[] 消息压缩内容 Returns byte[]"
  },
  "api/GameFrameX.NetWork.Abstractions.IMessageEncoderHandler.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IMessageEncoderHandler.html",
    "title": "Interface IMessageEncoderHandler | GameFrameX.Server",
    "summary": "Interface IMessageEncoderHandler Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息编码器接口定义 public interface IMessageEncoderHandler Properties LimitCompressLength 超过多少字节长度才启用压缩 uint LimitCompressLength { get; } Property Value uint PackageHeaderLength 消息包头长度 ushort PackageHeaderLength { get; } Property Value ushort Methods Handler(IMessage) 消息编码,当压缩消息处理器存在的时候将会被调用 byte[] Handler(IMessage message) Parameters message IMessage 消息对象 Returns byte[] SetCompressionHandler(IMessageCompressHandler) 设置压缩消息处理器 void SetCompressionHandler(IMessageCompressHandler compressHandler = null) Parameters compressHandler IMessageCompressHandler 压缩消息处理器"
  },
  "api/GameFrameX.NetWork.Abstractions.INetWorkChannel.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.INetWorkChannel.html",
    "title": "Interface INetWorkChannel | GameFrameX.Server",
    "summary": "Interface INetWorkChannel Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 网络通道 public interface INetWorkChannel Properties GameAppSession 应用会话对象 IGameAppSession GameAppSession { get; } Property Value IGameAppSession ReceiveBytesLength 接收字节长度 - 记录通过此通道接收的总字节数 ulong ReceiveBytesLength { get; } Property Value ulong ReceivePacketLength 接收数据包长度 - 记录通过此通道接收的数据包总数 ulong ReceivePacketLength { get; } Property Value ulong RpcSession RPC 会话 IRpcSession RpcSession { get; } Property Value IRpcSession SendBytesLength 发送字节长度 - 记录通过此通道发送的总字节数 ulong SendBytesLength { get; } Property Value ulong SendPacketLength 发送数据包长度 - 记录通过此通道发送的数据包总数 ulong SendPacketLength { get; } Property Value ulong Methods ClearData() 清除自定义数据 void ClearData() Close() 关闭网络 void Close() GetData<T>(string) 获取用户数据对象. 可能会发生转换失败的异常。 如果数据不存在则返回null T GetData<T>(string key) Parameters key string 数据Key Returns T 用户数据对象 Type Parameters T 将要获取的数据类型。 GetLastMessageTimeSecond(in DateTime) 获取最后一次消息的时间 long GetLastMessageTimeSecond(in DateTime utcTime) Parameters utcTime DateTime UTC时间 Returns long IsClosed() 网络是否已经关闭 bool IsClosed() Returns bool 是否已经关闭 RemoveData(string) 移除用户数据 void RemoveData(string key) Parameters key string 数据Key SetData(string, object) 设置用户数据 void SetData(string key, object value) Parameters key string 数据Key value object 数据值 UpdateReceiveMessageTime(long) 更新接收消息时间 void UpdateReceiveMessageTime(long offsetTicks = 0) Parameters offsetTicks long UpdateReceivePacketBytesLength(ulong) 更新接收数据包字节长度 void UpdateReceivePacketBytesLength(ulong bufferLength) Parameters bufferLength ulong 接收数据包字节长度 WriteAsync(INetworkMessage, int) 异步写入消息到网络通道 Task WriteAsync(INetworkMessage msg, int errorCode = 0) Parameters msg INetworkMessage 要发送的网络消息对象,包含消息内容和相关元数据 errorCode int 错误码,默认为0表示无错误。当发生错误时,可以通过此参数传递错误码 Returns Task 表示异步操作的Task对象。当消息成功写入时完成,如果发生错误则抛出异常 Remarks 此方法用于将消息异步发送到网络通道。 如果errorCode不为0,接收方可以根据错误码进行相应的错误处理。 调用此方法时需要确保网络通道处于打开状态。"
  },
  "api/GameFrameX.NetWork.Abstractions.INetworkMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.INetworkMessage.html",
    "title": "Interface INetworkMessage | GameFrameX.Server",
    "summary": "Interface INetworkMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 网络消息接口 public interface INetworkMessage : IMessage Inherited Members IMessage.ToFormatMessageString(long) Properties UniqueId 消息的唯一ID int UniqueId { get; } Property Value int Methods SetMessageId(int) 设置消息ID void SetMessageId(int messageId) Parameters messageId int SetUniqueId(int) 设置唯一消息ID void SetUniqueId(int uniqueId) Parameters uniqueId int ToJsonString() 获取JSON格式化后的消息字符串 string ToJsonString() Returns string UpdateUniqueId() 更新唯一消息ID void UpdateUniqueId()"
  },
  "api/GameFrameX.NetWork.Abstractions.INetworkMessageHeader.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.INetworkMessageHeader.html",
    "title": "Interface INetworkMessageHeader | GameFrameX.Server",
    "summary": "Interface INetworkMessageHeader Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 网络消息头 public interface INetworkMessageHeader Properties MessageId 消息ID int MessageId { get; set; } Property Value int OperationType 操作类型 byte OperationType { get; set; } Property Value byte UniqueId 唯一消息序列ID int UniqueId { get; set; } Property Value int ZipFlag 压缩标记 byte ZipFlag { get; set; } Property Value byte"
  },
  "api/GameFrameX.NetWork.Abstractions.INotifyActorHeartBeat.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.INotifyActorHeartBeat.html",
    "title": "Interface INotifyActorHeartBeat | GameFrameX.Server",
    "summary": "Interface INotifyActorHeartBeat Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 服务器通知心跳结果，因为有些业务需要对心跳结果做处理所以不做成RPC的方式处理 public interface INotifyActorHeartBeat Properties Timestamp 时间戳，单位毫秒，表示该Actor最后一次心跳的时间 long Timestamp { get; set; } Property Value long"
  },
  "api/GameFrameX.NetWork.Abstractions.INotifyMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.INotifyMessage.html",
    "title": "Interface INotifyMessage | GameFrameX.Server",
    "summary": "Interface INotifyMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 通知消息 public interface INotifyMessage : INetworkMessage, IMessage Inherited Members INetworkMessage.UniqueId INetworkMessage.SetMessageId(int) INetworkMessage.UpdateUniqueId() INetworkMessage.SetUniqueId(int) INetworkMessage.ToJsonString() IMessage.ToFormatMessageString(long)"
  },
  "api/GameFrameX.NetWork.Abstractions.IOuterNetworkMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IOuterNetworkMessage.html",
    "title": "Interface IOuterNetworkMessage | GameFrameX.Server",
    "summary": "Interface IOuterNetworkMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 外部消息 public interface IOuterNetworkMessage : IMessage Inherited Members IMessage.ToFormatMessageString(long) Properties Header 消息头对象 INetworkMessageHeader Header { get; } Property Value INetworkMessageHeader MessageData 消息数据 byte[] MessageData { get; } Property Value byte[] UniqueId 消息唯一ID string UniqueId { get; } Property Value string Methods ClearData() 清除消息数据 void ClearData() DeserializeMessageObject() 转换消息数据为消息对象 INetworkMessage DeserializeMessageObject() Returns INetworkMessage GetData(string) 获取消息数据 object GetData(string key) Parameters key string Returns object SetData(string, object) 设置消息数据 void SetData(string key, object value) Parameters key string value object SetMessageData(byte[]) 设置消息数据 void SetMessageData(byte[] messageData) Parameters messageData byte[]"
  },
  "api/GameFrameX.NetWork.Abstractions.IRequestMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IRequestMessage.html",
    "title": "Interface IRequestMessage | GameFrameX.Server",
    "summary": "Interface IRequestMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 请求消息 public interface IRequestMessage : INetworkMessage, IMessage Inherited Members INetworkMessage.UniqueId INetworkMessage.SetMessageId(int) INetworkMessage.UpdateUniqueId() INetworkMessage.SetUniqueId(int) INetworkMessage.ToJsonString() IMessage.ToFormatMessageString(long)"
  },
  "api/GameFrameX.NetWork.Abstractions.IResponseMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IResponseMessage.html",
    "title": "Interface IResponseMessage | GameFrameX.Server",
    "summary": "Interface IResponseMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 响应消息 public interface IResponseMessage : INetworkMessage, IMessage Inherited Members INetworkMessage.UniqueId INetworkMessage.SetMessageId(int) INetworkMessage.UpdateUniqueId() INetworkMessage.SetUniqueId(int) INetworkMessage.ToJsonString() IMessage.ToFormatMessageString(long) Properties ErrorCode 错误码，非 0 表示错误 int ErrorCode { get; set; } Property Value int"
  },
  "api/GameFrameX.NetWork.Abstractions.IRpcResult.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IRpcResult.html",
    "title": "Interface IRpcResult | GameFrameX.Server",
    "summary": "Interface IRpcResult Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll RPC请求结果 public interface IRpcResult Properties Error 错误信息 string Error { get; } Property Value string IsSuccess 是否成功 bool IsSuccess { get; } Property Value bool Message 返回消息 IResponseMessage Message { get; } Property Value IResponseMessage"
  },
  "api/GameFrameX.NetWork.Abstractions.IRpcSession.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IRpcSession.html",
    "title": "Interface IRpcSession | GameFrameX.Server",
    "summary": "Interface IRpcSession Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll RPC会话接口 public interface IRpcSession Methods Call(IRequestMessage, int) 异步调用,且等待返回 Task<IRpcResult> Call(IRequestMessage message, int timeOutMillisecond = 10000) Parameters message IRequestMessage 调用消息对象 timeOutMillisecond int 调用超时,单位毫秒,默认10秒 Returns Task<IRpcResult> 返回消息对象 Send(IRequestMessage) 异步发送,不等待结果 void Send(IRequestMessage message) Parameters message IRequestMessage 调用消息对象"
  },
  "api/GameFrameX.NetWork.Abstractions.IServiceNotifyOffline.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IServiceNotifyOffline.html",
    "title": "Interface IServiceNotifyOffline | GameFrameX.Server",
    "summary": "Interface IServiceNotifyOffline Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 服务下线通知接口，用于在节点退出集群时广播自身信息。 public interface IServiceNotifyOffline Properties Host 外部访问 IP 地址，客户端或其他服务器通过该地址与本节点通信。 string Host { get; set; } Property Value string Name 服务器名称，便于运维与监控时快速识别，通常保持全局唯一。 string Name { get; set; } Property Value string Port 外部访问端口，与 Host 组合成完整的外部访问地址。 ushort Port { get; set; } Property Value ushort ServerId 服务器唯一编号，整个集群生命周期内保持不变，用于路由、日志、监控等场景。 long ServerId { get; set; } Property Value long ServerInstanceId 服务器实例 ID，每次进程启动时重新生成，用于区分同一 ServerId 的不同运行实例。 long ServerInstanceId { get; set; } Property Value long Type 服务器类型，标识该节点承担的业务角色（如 Gateway、Game、DB 等）。 string Type { get; set; } Property Value string"
  },
  "api/GameFrameX.NetWork.Abstractions.IServiceNotifyOnline.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IServiceNotifyOnline.html",
    "title": "Interface IServiceNotifyOnline | GameFrameX.Server",
    "summary": "Interface IServiceNotifyOnline Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 服务上线通知接口，用于在节点加入集群时广播自身信息。 public interface IServiceNotifyOnline Properties Host 外部访问 IP 地址，客户端或其他服务器通过该地址与本节点通信。 string Host { get; set; } Property Value string Name 服务器名称，便于运维与监控时快速识别，通常保持全局唯一。 string Name { get; set; } Property Value string Port 外部访问端口，与 Host 组合成完整的外部访问地址。 ushort Port { get; set; } Property Value ushort ServerId 服务器唯一编号，整个集群生命周期内保持不变，用于路由、日志、监控等场景。 long ServerId { get; set; } Property Value long ServerInstanceId 服务器实例 ID，每次进程启动时重新生成，用于区分同一 ServerId 的不同运行实例。 long ServerInstanceId { get; set; } Property Value long Type 服务器类型，标识该节点承担的业务角色（如 Gateway、Game、DB 等）。 string Type { get; set; } Property Value string"
  },
  "api/GameFrameX.NetWork.Abstractions.IServiceRegister.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IServiceRegister.html",
    "title": "Interface IServiceRegister | GameFrameX.Server",
    "summary": "Interface IServiceRegister Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 服务注册接口，用于描述一个可被注册到集群中的服务器节点信息。 public interface IServiceRegister Properties Host 外部访问 IP 地址，客户端或其他服务器通过该地址与本节点通信。 string Host { get; set; } Property Value string Name 服务器名称，便于运维与监控时快速识别，通常保持全局唯一。 string Name { get; set; } Property Value string Port 外部访问端口，与 Host 组合成完整的外部访问地址。 ushort Port { get; set; } Property Value ushort ServerId 服务器唯一编号，整个集群生命周期内保持不变，用于路由、日志、监控等场景。 long ServerId { get; set; } Property Value long ServerInstanceId 服务器实例 ID，每次进程启动时重新生成，用于区分同一 ServerId 的不同运行实例。 long ServerInstanceId { get; set; } Property Value long Type 服务器类型，标识该节点承担的业务角色（如 Gateway、Game、DB 等）。 string Type { get; set; } Property Value string"
  },
  "api/GameFrameX.NetWork.Abstractions.MessageCodeDescriptionAttribute.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.MessageCodeDescriptionAttribute.html",
    "title": "Class MessageCodeDescriptionAttribute | GameFrameX.Server",
    "summary": "Class MessageCodeDescriptionAttribute Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息错误码的描述 [AttributeUsage(AttributeTargets.Enum|AttributeTargets.Property|AttributeTargets.Field)] public sealed class MessageCodeDescriptionAttribute : Attribute Inheritance object Attribute MessageCodeDescriptionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MessageCodeDescriptionAttribute(string) 构造消息错误码的描述 public MessageCodeDescriptionAttribute(string description) Parameters description string 错误码描述 Properties Description 消息错误码的描述 public string Description { get; } Property Value string"
  },
  "api/GameFrameX.NetWork.Abstractions.MessageHelper.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.MessageHelper.html",
    "title": "Class MessageHelper | GameFrameX.Server",
    "summary": "Class MessageHelper Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息处理帮助类，用于管理消息的编码和解码处理器 public sealed class MessageHelper Inheritance object MessageHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties DecoderHandler 消息解码处理器 - 用于将二进制数据解码成消息对象 public static IMessageDecoderHandler DecoderHandler { get; } Property Value IMessageDecoderHandler EncoderHandler 消息编码处理器 - 用于将消息编码成二进制格式 public static IMessageEncoderHandler EncoderHandler { get; } Property Value IMessageEncoderHandler Methods SetMessageDecoderHandler(IMessageDecoderHandler, IMessageDecompressHandler) 设置消息解码处理器和解压缩处理器 public static void SetMessageDecoderHandler(IMessageDecoderHandler decoderHandler, IMessageDecompressHandler decompressHandler) Parameters decoderHandler IMessageDecoderHandler 消息解码处理器实例 decompressHandler IMessageDecompressHandler 消息解压缩处理器实例 Exceptions ArgumentNullException 当decoderHandler为null时抛出 SetMessageEncoderHandler(IMessageEncoderHandler, IMessageCompressHandler) 设置消息编码处理器和压缩处理器 public static void SetMessageEncoderHandler(IMessageEncoderHandler encoderHandler, IMessageCompressHandler compressHandler) Parameters encoderHandler IMessageEncoderHandler 消息编码处理器实例 compressHandler IMessageCompressHandler 消息压缩处理器实例 Exceptions ArgumentNullException 当encoderHandler为null时抛出"
  },
  "api/GameFrameX.NetWork.Abstractions.MessageIdUtility.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.MessageIdUtility.html",
    "title": "Class MessageIdUtility | GameFrameX.Server",
    "summary": "Class MessageIdUtility Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息ID工具类 public static class MessageIdUtility Inheritance object MessageIdUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetMainId(int) 获取主消息ID public static int GetMainId(int messageId) Parameters messageId int 消息码 Returns int GetMessageId(int, int) 获取消息ID public static int GetMessageId(int mainId, int subId) Parameters mainId int 主消息码 subId int 子消息码 Returns int 返回组合之后的完整消息码 GetSubId(int) 获取子消息ID public static int GetSubId(int messageId) Parameters messageId int 消息码 Returns int"
  },
  "api/GameFrameX.NetWork.Abstractions.MessageMappingAttribute.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.MessageMappingAttribute.html",
    "title": "Class MessageMappingAttribute | GameFrameX.Server",
    "summary": "Class MessageMappingAttribute Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息类型对应的消息映射处理器 [AttributeUsage(AttributeTargets.Class)] public sealed class MessageMappingAttribute : Attribute Inheritance object Attribute MessageMappingAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MessageMappingAttribute(Type) 构造消息类型对应的消息映射处理器 public MessageMappingAttribute(Type messageType) Parameters messageType Type 消息处理类型 Properties MessageType 处理类型 public Type MessageType { get; } Property Value Type"
  },
  "api/GameFrameX.NetWork.Abstractions.MessageOperationType.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.MessageOperationType.html",
    "title": "Enum MessageOperationType | GameFrameX.Server",
    "summary": "Enum MessageOperationType Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息操作业务类型 public enum MessageOperationType : byte Fields ConnectService = 25 请求连接服务器信息，客户端向中心获取目标游戏服务器或网关的接入地址与凭证 Game = 4 游戏逻辑相关消息 HeartBeat = 1 心跳 Max = 64 最大值，保留位 None = 0 空类型 NotifyPlayerOffLine = 35 玩家下线通知，玩家会话断开时向相关服务广播玩家已离线，需清理玩家状态与数据 NotifyPlayerOnLine = 34 玩家上线通知，玩家会话成功建立后向相关服务广播玩家已登录，可推送游戏数据 NotifyServiceOffLine = 19 服务下线通知，用于服务实例即将停止时向中心广播自身将离线，不再接受调用 NotifyServiceOnLine = 18 服务上线通知，用于服务实例成功启动后向中心广播自身已就绪，可接受调用 PlayerRegister = 32 玩家注册，用于玩家会话首次建立时在中心记录玩家与具体游戏服务器的映射关系 PlayerUnRegister = 33 玩家注销，用于玩家会话结束时在中心移除玩家与游戏服务器的映射关系 ServiceRegister = 16 服务注册，用于服务实例向中心注册自身信息，声明可提供的服务能力 ServiceUnRegister = 17 服务注销，用于服务实例从中心移除自身注册信息，停止服务宣告"
  },
  "api/GameFrameX.NetWork.Abstractions.MessageProtoHelper.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.MessageProtoHelper.html",
    "title": "Class MessageProtoHelper | GameFrameX.Server",
    "summary": "Class MessageProtoHelper Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 协议消息处理器 public static class MessageProtoHelper Inheritance object MessageProtoHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetMessageIdByType(INetworkMessage) 获取消息ID,如果没有找到则返回 -1 public static int GetMessageIdByType(INetworkMessage message) Parameters message INetworkMessage 消息对象 Returns int GetMessageIdByType(Type) 获取消息ID,如果没有找到则返回 -1 public static int GetMessageIdByType(Type type) Parameters type Type 消息类型 Returns int GetMessageOperationType(INetworkMessage) 获取消息操作类型 public static byte GetMessageOperationType(INetworkMessage message) Parameters message INetworkMessage 消息对象 Returns byte GetMessageOperationType(Type) 获取消息操作类型 public static byte GetMessageOperationType(Type type) Parameters type Type 消息类型 Returns byte GetMessageTypeById(int) 获取消息类型，如果没有则返回null public static Type GetMessageTypeById(int messageId) Parameters messageId int 消息ID Returns Type Init(params Assembly[]) 初始化所有协议对象 public static void Init(params Assembly[] assemblies) Parameters assemblies Assembly[] 协议所在程序集集合.将在集合中查找所有的类型进行识别 Exceptions Exception 如果ID重复将会触发异常 IsHeartbeat(INetworkMessage) 获取消息类型是否是心跳类型 public static bool IsHeartbeat(INetworkMessage message) Parameters message INetworkMessage 消息对象 Returns bool IsHeartbeat(Type) 获取消息类型是否是心跳类型 public static bool IsHeartbeat(Type type) Parameters type Type 消息类型 Returns bool SetMessageId(INetworkMessage) 设置消息ID和操作类型 public static void SetMessageId(INetworkMessage message) Parameters message INetworkMessage 消息对象"
  },
  "api/GameFrameX.NetWork.Abstractions.MessageRpcMappingAttribute.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.MessageRpcMappingAttribute.html",
    "title": "Class MessageRpcMappingAttribute | GameFrameX.Server",
    "summary": "Class MessageRpcMappingAttribute Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll RPC 消息属性标记 [AttributeUsage(AttributeTargets.Class)] public class MessageRpcMappingAttribute : Attribute Inheritance object Attribute MessageRpcMappingAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageRpcMappingAttribute(IRequestMessage, IResponseMessage) 构建RPC 消息 public MessageRpcMappingAttribute(IRequestMessage requestMessage, IResponseMessage responseMessage) Parameters requestMessage IRequestMessage 请求消息类型 responseMessage IResponseMessage 返回消息类型 Properties RequestMessage 请求消息 public IRequestMessage RequestMessage { get; } Property Value IRequestMessage ResponseMessage 响应消息 public IResponseMessage ResponseMessage { get; } Property Value IResponseMessage"
  },
  "api/GameFrameX.NetWork.Abstractions.MessageTypeHandlerAttribute.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.MessageTypeHandlerAttribute.html",
    "title": "Class MessageTypeHandlerAttribute | GameFrameX.Server",
    "summary": "Class MessageTypeHandlerAttribute Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息类型处理器标记 [AttributeUsage(AttributeTargets.Class)] public class MessageTypeHandlerAttribute : Attribute Inheritance object Attribute MessageTypeHandlerAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageTypeHandlerAttribute(int, byte) 构造消息类型处理器 public MessageTypeHandlerAttribute(int messageId, byte operationType = 0) Parameters messageId int 消息ID operationType byte 消息类型 Properties MainId 主消息ID public int MainId { get; } Property Value int MessageId 消息ID public int MessageId { get; } Property Value int OperationType 消息操作类型 public byte OperationType { get; } Property Value byte SubId 子消息ID public int SubId { get; } Property Value int"
  },
  "api/GameFrameX.NetWork.Abstractions.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.html",
    "title": "Namespace GameFrameX.NetWork.Abstractions | GameFrameX.Server",
    "summary": "Namespace GameFrameX.NetWork.Abstractions Classes MessageCodeDescriptionAttribute 消息错误码的描述 MessageHelper 消息处理帮助类，用于管理消息的编码和解码处理器 MessageIdUtility 消息ID工具类 MessageMappingAttribute 消息类型对应的消息映射处理器 MessageProtoHelper 协议消息处理器 MessageRpcMappingAttribute RPC 消息属性标记 MessageTypeHandlerAttribute 消息类型处理器标记 Interfaces IActorHeartBeat 心跳接口，用于标识具备心跳时间戳的Actor ICommandInfo 消息指令信息 IHeartBeatMessage 心跳消息接口 IInnerNetworkMessage 内部消息 IMessage 网络消息 IMessageCompressHandler 消息压缩器接口定义，用于压缩消息数据 IMessageDecoderHandler 消息解码器定义接口 IMessageDecompressHandler 消息解压器接口定义，用于解压压缩后的消息 IMessageEncoderHandler 消息编码器接口定义 INetWorkChannel 网络通道 INetworkMessage 网络消息接口 INetworkMessageHeader 网络消息头 INotifyActorHeartBeat 服务器通知心跳结果，因为有些业务需要对心跳结果做处理所以不做成RPC的方式处理 INotifyMessage 通知消息 IOuterNetworkMessage 外部消息 IRequestMessage 请求消息 IResponseMessage 响应消息 IRpcResult RPC请求结果 IRpcSession RPC会话接口 IServiceNotifyOffline 服务下线通知接口，用于在节点退出集群时广播自身信息。 IServiceNotifyOnline 服务上线通知接口，用于在节点加入集群时广播自身信息。 IServiceRegister 服务注册接口，用于描述一个可被注册到集群中的服务器节点信息。 Enums MessageOperationType 消息操作业务类型"
  },
  "api/GameFrameX.NetWork.BaseNetWorkChannel.html": {
    "href": "api/GameFrameX.NetWork.BaseNetWorkChannel.html",
    "title": "Class BaseNetWorkChannel | GameFrameX.Server",
    "summary": "Class BaseNetWorkChannel Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll 基础网络通道 public abstract class BaseNetWorkChannel : INetWorkChannel Inheritance object BaseNetWorkChannel Implements INetWorkChannel Derived DefaultNetWorkChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseNetWorkChannel(IGameAppSession, AppSetting, IRpcSession, bool) 初始化 public BaseNetWorkChannel(IGameAppSession session, AppSetting setting, IRpcSession rpcSession, bool isWebSocket) Parameters session IGameAppSession setting AppSetting rpcSession IRpcSession isWebSocket bool Fields CancellationTokenSource 关闭源 protected readonly CancellationTokenSource CancellationTokenSource Field Value CancellationTokenSource NetWorkSendTimeOutSecondsTimeSpan 网络发送超时时间,单位秒 protected readonly TimeSpan NetWorkSendTimeOutSecondsTimeSpan Field Value TimeSpan Properties GameAppSession 会话 public IGameAppSession GameAppSession { get; } Property Value IGameAppSession IsWebSocket 是否是WebSocket public bool IsWebSocket { get; } Property Value bool ReceiveBytesLength 接收字节长度 - 记录通过此通道接收的总字节数 public ulong ReceiveBytesLength { get; } Property Value ulong ReceivePacketLength 接收数据包长度 - 记录通过此通道接收的数据包总数 public ulong ReceivePacketLength { get; } Property Value ulong RpcSession Rpc会话 public IRpcSession RpcSession { get; } Property Value IRpcSession SendBytesLength 发送字节长度 - 记录通过此通道发送的总字节数 public ulong SendBytesLength { get; } Property Value ulong SendPacketLength 发送数据包长度 - 记录通过此通道发送的数据包总数 public ulong SendPacketLength { get; } Property Value ulong Setting 设置 public AppSetting Setting { get; } Property Value AppSetting Methods ClearData() 清除自定义数据 public void ClearData() Close() 关闭 public virtual void Close() GetData<T>(string) 获取用户数据对象. 可能会发生转换失败的异常。 如果数据不存在则返回null public T GetData<T>(string key) Parameters key string 数据Key Returns T 用户数据对象 Type Parameters T 将要获取的数据类型。 GetLastMessageTimeSecond(in DateTime) 获取最后接收消息到现在的时间。单位秒 public long GetLastMessageTimeSecond(in DateTime utcTime) Parameters utcTime DateTime Returns long IsClosed() 是否关闭 public virtual bool IsClosed() Returns bool RemoveData(string) 删除自定义数据 public void RemoveData(string key) Parameters key string SetData(string, object) 设置自定义数据 public void SetData(string key, object value) Parameters key string value object UpdateReceiveMessageTime(long) 更新接收消息的时间 public void UpdateReceiveMessageTime(long offsetTicks = 0) Parameters offsetTicks long UpdateReceivePacketBytesLength(ulong) 更新接收数据包字节长度 public void UpdateReceivePacketBytesLength(ulong bufferLength) Parameters bufferLength ulong 接收数据包字节长度 WriteAsync(INetworkMessage, int) 异步写入消息 public virtual Task WriteAsync(INetworkMessage messageObject, int errorCode = 0) Parameters messageObject INetworkMessage 消息对象 errorCode int 错误码 Returns Task"
  },
  "api/GameFrameX.NetWork.DefaultNetWorkChannel.html": {
    "href": "api/GameFrameX.NetWork.DefaultNetWorkChannel.html",
    "title": "Class DefaultNetWorkChannel | GameFrameX.Server",
    "summary": "Class DefaultNetWorkChannel Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll 默认网络通道 public sealed class DefaultNetWorkChannel : BaseNetWorkChannel, INetWorkChannel Inheritance object BaseNetWorkChannel DefaultNetWorkChannel Implements INetWorkChannel Inherited Members BaseNetWorkChannel.IsWebSocket BaseNetWorkChannel.Setting BaseNetWorkChannel.SendBytesLength BaseNetWorkChannel.SendPacketLength BaseNetWorkChannel.ReceiveBytesLength BaseNetWorkChannel.ReceivePacketLength BaseNetWorkChannel.UpdateReceivePacketBytesLength(ulong) BaseNetWorkChannel.GameAppSession BaseNetWorkChannel.RpcSession BaseNetWorkChannel.WriteAsync(INetworkMessage, int) BaseNetWorkChannel.Close() BaseNetWorkChannel.IsClosed() BaseNetWorkChannel.GetData<T>(string) BaseNetWorkChannel.ClearData() BaseNetWorkChannel.RemoveData(string) BaseNetWorkChannel.SetData(string, object) BaseNetWorkChannel.UpdateReceiveMessageTime(long) BaseNetWorkChannel.GetLastMessageTimeSecond(in DateTime) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultNetWorkChannel(IGameAppSession, AppSetting, IRpcSession, bool) 初始化 public DefaultNetWorkChannel(IGameAppSession session, AppSetting setting, IRpcSession rpcSession = null, bool isWebSocket = false) Parameters session IGameAppSession setting AppSetting rpcSession IRpcSession isWebSocket bool"
  },
  "api/GameFrameX.NetWork.HTTP.BaseHttpHandler.html": {
    "href": "api/GameFrameX.NetWork.HTTP.BaseHttpHandler.html",
    "title": "Class BaseHttpHandler | GameFrameX.Server",
    "summary": "Class BaseHttpHandler Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll 基础HTTP处理器，用于处理HTTP请求的基础逻辑。 public abstract class BaseHttpHandler : IHttpHandler Inheritance object BaseHttpHandler Implements IHttpHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CheckCodeEnd 尾校验码，用于生成签名时的尾部校验码。 protected virtual ushort CheckCodeEnd { get; } Property Value ushort CheckCodeStart 头校验码，用于生成签名时的头部校验码。 protected virtual ushort CheckCodeStart { get; } Property Value ushort CheckCodeTime 校验时间差，用于生成签名时的时间偏移量。 protected virtual int CheckCodeTime { get; } Property Value int IsCheckSign 是否需要校验签名，默认为不需要校验。 public virtual bool IsCheckSign { get; } Property Value bool Methods Action(string, string, HttpMessageRequestBase) 处理HTTP请求的异步操作，返回MessageObject对象。 public virtual Task<string> Action(string ip, string url, HttpMessageRequestBase request) Parameters ip string 客户端IP地址。 url string 请求的URL。 request HttpMessageRequestBase 请求参数对象。 Returns Task<string> 返回处理结果的MessageObject对象。 Action(string, string, Dictionary<string, object>) 处理HTTP请求的异步操作，返回字符串结果。 public virtual Task<string> Action(string ip, string url, Dictionary<string, object> paramMap) Parameters ip string 客户端IP地址。 url string 请求的URL。 paramMap Dictionary<string, object> 请求参数字典，键为参数名，值为参数值。 Returns Task<string> 返回处理结果的字符串。 Action(string, string, Dictionary<string, object>, MessageObject) 处理HTTP请求的异步操作，返回MessageObject对象。 public virtual Task<MessageObject> Action(string ip, string url, Dictionary<string, object> paramMap, MessageObject messageObject) Parameters ip string 客户端IP地址。 url string 请求的URL。 paramMap Dictionary<string, object> 请求参数字典，键为参数名，值为参数值。 messageObject MessageObject 消息对象，包含更多信息。 Returns Task<MessageObject> 返回处理结果的MessageObject对象。 CheckSign(Dictionary<string, object>, out string) 校验签名是否有效。 public bool CheckSign(Dictionary<string, object> paramMap, out string error) Parameters paramMap Dictionary<string, object> 请求参数字典。 error string 错误消息，如果校验失败则返回具体的错误信息。 Returns bool 校验结果，true表示校验成功，false表示校验失败。 GetStringSign(string) 获取签名字符串。 public string GetStringSign(string str) Parameters str string 待签名的字符串。 Returns string 签名后的字符串。"
  },
  "api/GameFrameX.NetWork.HTTP.HttpHandler.html": {
    "href": "api/GameFrameX.NetWork.HTTP.HttpHandler.html",
    "title": "Class HttpHandler | GameFrameX.Server",
    "summary": "Class HttpHandler Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP处理器，用于处理HTTP请求 public static class HttpHandler Inheritance object HttpHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleRequest(HttpContext, Func<string, BaseHttpHandler>, List<IHttpAopHandler>) 处理HTTP请求 public static Task HandleRequest(HttpContext context, Func<string, BaseHttpHandler> baseHandler, List<IHttpAopHandler> aopHandlerTypes = null) Parameters context HttpContext HTTP上下文 baseHandler Func<string, BaseHttpHandler> 基础HTTP处理器工厂方法 aopHandlerTypes List<IHttpAopHandler> AOP处理器列表，可选 Returns Task"
  },
  "api/GameFrameX.NetWork.HTTP.HttpMessageMappingAttribute.html": {
    "href": "api/GameFrameX.NetWork.HTTP.HttpMessageMappingAttribute.html",
    "title": "Class HttpMessageMappingAttribute | GameFrameX.Server",
    "summary": "Class HttpMessageMappingAttribute Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP消息处理器属性，用于标记HTTP消息处理器类 [AttributeUsage(AttributeTargets.Class)] public sealed class HttpMessageMappingAttribute : Attribute Inheritance object Attribute HttpMessageMappingAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors HttpMessageMappingAttribute(Type) 构造函数 public HttpMessageMappingAttribute(Type classType) Parameters classType Type 处理器类的类型 Exceptions ArgumentNullException 当classType为null时抛出 InvalidOperationException 当classType不是密封类或不以HTTPsuffix结尾时抛出 Fields HTTPprefix 处理器命名前缀 public const string HTTPprefix = \"\" Field Value string HTTPsuffix 处理器命名后缀 public const string HTTPsuffix = \"HttpHandler\" Field Value string Properties OriginalCmd 原始命令名称 public string OriginalCmd { get; } Property Value string StandardCmd 标准化后的命令名称 public string StandardCmd { get; } Property Value string"
  },
  "api/GameFrameX.NetWork.HTTP.HttpMessageRequestAttribute.html": {
    "href": "api/GameFrameX.NetWork.HTTP.HttpMessageRequestAttribute.html",
    "title": "Class HttpMessageRequestAttribute | GameFrameX.Server",
    "summary": "Class HttpMessageRequestAttribute Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP请求消息特性，用于标记HTTP请求消息类型 此特性用于标记HTTP处理器的请求消息类型，确保请求消息类型继承自HttpMessageRequestBase [AttributeUsage(AttributeTargets.Class)] public sealed class HttpMessageRequestAttribute : Attribute Inheritance object Attribute HttpMessageRequestAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors HttpMessageRequestAttribute(Type) 初始化 HttpMessageRequestAttribute 的新实例 构造函数会验证传入的类型是否为有效的HTTP请求消息类型 public HttpMessageRequestAttribute(Type classType) Parameters classType Type 请求消息的类型，必须继承自HttpMessageRequestBase Exceptions ArgumentNullException 当 classType 为 null 时抛出此异常 InvalidCastException 当 classType 未继承自HttpMessageRequestBase时抛出此异常 Properties MessageType 获取请求消息的类型 该属性存储HTTP请求消息的具体类型，用于运行时的消息处理和序列化 public Type MessageType { get; } Property Value Type"
  },
  "api/GameFrameX.NetWork.HTTP.HttpMessageRequestBase.html": {
    "href": "api/GameFrameX.NetWork.HTTP.HttpMessageRequestBase.html",
    "title": "Class HttpMessageRequestBase | GameFrameX.Server",
    "summary": "Class HttpMessageRequestBase Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP请求消息基类，所有HTTP请求消息类都应该继承此类 public abstract class HttpMessageRequestBase Inheritance object HttpMessageRequestBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 提供HTTP请求消息的基本功能和属性"
  },
  "api/GameFrameX.NetWork.HTTP.HttpMessageResponseAttribute.html": {
    "href": "api/GameFrameX.NetWork.HTTP.HttpMessageResponseAttribute.html",
    "title": "Class HttpMessageResponseAttribute | GameFrameX.Server",
    "summary": "Class HttpMessageResponseAttribute Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP响应消息特性，用于标记HTTP响应消息类型 此特性用于标记HTTP处理器的响应消息类型，确保响应消息类型继承自HttpMessageResponseBase [AttributeUsage(AttributeTargets.Class)] public sealed class HttpMessageResponseAttribute : Attribute Inheritance object Attribute HttpMessageResponseAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors HttpMessageResponseAttribute(Type) 初始化 HttpMessageResponseAttribute 的新实例 构造函数会验证传入的类型是否为有效的HTTP响应消息类型 public HttpMessageResponseAttribute(Type classType) Parameters classType Type 响应消息的类型，必须继承自HttpMessageResponseBase Exceptions ArgumentNullException 当 classType 为 null 时抛出此异常 InvalidCastException 当 classType 未继承自HttpMessageResponseBase时抛出此异常 Properties MessageType 获取响应消息的类型 该属性存储HTTP响应消息的具体类型，用于运行时的消息处理和序列化 public Type MessageType { get; } Property Value Type"
  },
  "api/GameFrameX.NetWork.HTTP.HttpMessageResponseBase.html": {
    "href": "api/GameFrameX.NetWork.HTTP.HttpMessageResponseBase.html",
    "title": "Class HttpMessageResponseBase | GameFrameX.Server",
    "summary": "Class HttpMessageResponseBase Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP响应消息基类，所有HTTP响应消息类都应该继承此类 public abstract class HttpMessageResponseBase Inheritance object HttpMessageResponseBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 提供HTTP响应消息的基本功能和属性"
  },
  "api/GameFrameX.NetWork.HTTP.HttpStatusCode.html": {
    "href": "api/GameFrameX.NetWork.HTTP.HttpStatusCode.html",
    "title": "Class HttpStatusCode | GameFrameX.Server",
    "summary": "Class HttpStatusCode Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP状态码 public static class HttpStatusCode Inheritance object HttpStatusCode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ActionFailed 操作失败 public const int ActionFailed = 15 Field Value int Illegal 非法 public const int Illegal = 12 Field Value int ParamErr 参数错误 public const int ParamErr = 13 Field Value int Undefined 未定义的命令 public const int Undefined = 11 Field Value int"
  },
  "api/GameFrameX.NetWork.HTTP.HttpStatusMessage.html": {
    "href": "api/GameFrameX.NetWork.HTTP.HttpStatusMessage.html",
    "title": "Class HttpStatusMessage | GameFrameX.Server",
    "summary": "Class HttpStatusMessage Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP状态消息 public static class HttpStatusMessage Inheritance object HttpStatusMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields CheckFailedCommand 验证失败的命令 public const string CheckFailedCommand = \"check failed command\" Field Value string NotFoundCommand 未找到的命令 public const string NotFoundCommand = \"not found command\" Field Value string ParamErrorMessage 参数错误 public const string ParamErrorMessage = \"http命令未包含验证参数sign 和 timestamp\" Field Value string ServerError 服务器错误 public const string ServerError = \"server error\" Field Value string Success 成功 public const string Success = \"ok\" Field Value string UndefinedCommand 未定义的命令 public const string UndefinedCommand = \"undefined command\" Field Value string"
  },
  "api/GameFrameX.NetWork.HTTP.IHttpAopHandler.html": {
    "href": "api/GameFrameX.NetWork.HTTP.IHttpAopHandler.html",
    "title": "Interface IHttpAopHandler | GameFrameX.Server",
    "summary": "Interface IHttpAopHandler Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP 拦截处理器 public interface IHttpAopHandler Properties Priority 优先级 int Priority { get; } Property Value int Methods Run(HttpContext, string, string, Dictionary<string, object>) 执行处理 bool Run(HttpContext context, string ip, string url, Dictionary<string, object> paramMap) Parameters context HttpContext 上下文 ip string 请求IP url string 请求地址 paramMap Dictionary<string, object> 参数列表 Returns bool 需要继续执行返回TRUE,否则返回FALSE"
  },
  "api/GameFrameX.NetWork.HTTP.IHttpHandler.html": {
    "href": "api/GameFrameX.NetWork.HTTP.IHttpHandler.html",
    "title": "Interface IHttpHandler | GameFrameX.Server",
    "summary": "Interface IHttpHandler Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP处理器 public interface IHttpHandler Properties IsCheckSign 是否校验签名 bool IsCheckSign { get; } Property Value bool Methods Action(string, string, Dictionary<string, object>) 处理HTTP请求的异步操作，返回字符串结果。 Task<string> Action(string ip, string url, Dictionary<string, object> paramMap) Parameters ip string 客户端IP地址。 url string 请求的URL。 paramMap Dictionary<string, object> 请求参数字典，键为参数名，值为参数值。 Returns Task<string> 返回处理结果的字符串。 Action(string, string, Dictionary<string, object>, MessageObject) 处理HTTP请求的异步操作，返回MessageObject对象。 Task<MessageObject> Action(string ip, string url, Dictionary<string, object> paramMap, MessageObject messageObject) Parameters ip string 客户端IP地址。 url string 请求的URL。 paramMap Dictionary<string, object> 请求参数字典，键为参数名，值为参数值。 messageObject MessageObject 消息对象，包含更多信息。 Returns Task<MessageObject> 返回处理结果的MessageObject对象。"
  },
  "api/GameFrameX.NetWork.HTTP.MessageHttpObject.html": {
    "href": "api/GameFrameX.NetWork.HTTP.MessageHttpObject.html",
    "title": "Class MessageHttpObject | GameFrameX.Server",
    "summary": "Class MessageHttpObject Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP消息包装基类 public sealed class MessageHttpObject Inheritance object MessageHttpObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties Body 消息体 [JsonIgnore] [ProtoMember(3)] public byte[] Body { get; set; } Property Value byte[] Id 消息ID [ProtoMember(1)] public int Id { get; set; } Property Value int UniqueId 消息序列号 [ProtoMember(2)] public int UniqueId { get; set; } Property Value int Methods ToString() 转换为字符串 public override string ToString() Returns string"
  },
  "api/GameFrameX.NetWork.HTTP.PreservePropertyCasingSchemaFilter.html": {
    "href": "api/GameFrameX.NetWork.HTTP.PreservePropertyCasingSchemaFilter.html",
    "title": "Class PreservePropertyCasingSchemaFilter | GameFrameX.Server",
    "summary": "Class PreservePropertyCasingSchemaFilter Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll 保持属性名称大小写的 Schema 过滤器 用于在生成 Swagger/OpenAPI 文档时保持属性名称的原始大小写形式 public sealed class PreservePropertyCasingSchemaFilter : ISchemaFilter Inheritance object PreservePropertyCasingSchemaFilter Implements ISchemaFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Apply(OpenApiSchema, SchemaFilterContext) 应用 Schema 过滤器，处理属性名称的大小写 public void Apply(OpenApiSchema schema, SchemaFilterContext context) Parameters schema OpenApiSchema 要修改的 OpenAPI Schema context SchemaFilterContext Schema 过滤器上下文，包含类型信息"
  },
  "api/GameFrameX.NetWork.HTTP.SwaggerOperationFilter.html": {
    "href": "api/GameFrameX.NetWork.HTTP.SwaggerOperationFilter.html",
    "title": "Class SwaggerOperationFilter | GameFrameX.Server",
    "summary": "Class SwaggerOperationFilter Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll 自定义 Swagger 操作过滤器,用于处理动态路由和请求/响应文档 public sealed class SwaggerOperationFilter : IOperationFilter Inheritance object SwaggerOperationFilter Implements IOperationFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SwaggerOperationFilter(List<BaseHttpHandler>) 构造函数 public SwaggerOperationFilter(List<BaseHttpHandler> handlers) Parameters handlers List<BaseHttpHandler> HTTP处理器字典 Methods Apply(OpenApiOperation, OperationFilterContext) 应用过滤器配置 public void Apply(OpenApiOperation operation, OperationFilterContext context) Parameters operation OpenApiOperation OpenAPI操作对象 context OperationFilterContext 操作过滤器上下文"
  },
  "api/GameFrameX.NetWork.HTTP.html": {
    "href": "api/GameFrameX.NetWork.HTTP.html",
    "title": "Namespace GameFrameX.NetWork.HTTP | GameFrameX.Server",
    "summary": "Namespace GameFrameX.NetWork.HTTP Classes BaseHttpHandler 基础HTTP处理器，用于处理HTTP请求的基础逻辑。 HttpHandler HTTP处理器，用于处理HTTP请求 HttpMessageMappingAttribute HTTP消息处理器属性，用于标记HTTP消息处理器类 HttpMessageRequestAttribute HTTP请求消息特性，用于标记HTTP请求消息类型 此特性用于标记HTTP处理器的请求消息类型，确保请求消息类型继承自HttpMessageRequestBase HttpMessageRequestBase HTTP请求消息基类，所有HTTP请求消息类都应该继承此类 HttpMessageResponseAttribute HTTP响应消息特性，用于标记HTTP响应消息类型 此特性用于标记HTTP处理器的响应消息类型，确保响应消息类型继承自HttpMessageResponseBase HttpMessageResponseBase HTTP响应消息基类，所有HTTP响应消息类都应该继承此类 HttpStatusCode HTTP状态码 HttpStatusMessage HTTP状态消息 MessageHttpObject HTTP消息包装基类 PreservePropertyCasingSchemaFilter 保持属性名称大小写的 Schema 过滤器 用于在生成 Swagger/OpenAPI 文档时保持属性名称的原始大小写形式 SwaggerOperationFilter 自定义 Swagger 操作过滤器,用于处理动态路由和请求/响应文档 Interfaces IHttpAopHandler HTTP 拦截处理器 IHttpHandler HTTP处理器"
  },
  "api/GameFrameX.NetWork.IMessageHandler.html": {
    "href": "api/GameFrameX.NetWork.IMessageHandler.html",
    "title": "Interface IMessageHandler | GameFrameX.Server",
    "summary": "Interface IMessageHandler Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll 消息处理器 public interface IMessageHandler Properties Message 消息对象 INetworkMessage Message { get; } Property Value INetworkMessage NetWorkChannel 网络频道对象 INetWorkChannel NetWorkChannel { get; } Property Value INetWorkChannel Methods Init(INetworkMessage, INetWorkChannel) 初始化 子类实现必须调用 Task<bool> Init(INetworkMessage message, INetWorkChannel netWorkChannel) Parameters message INetworkMessage 消息对象 netWorkChannel INetWorkChannel 网络渠道 Returns Task<bool> 返回是否初始化成功,true:成功,false:失败 InnerAction(int, CancellationToken) 内部执行 Task InnerAction(int timeout = 30000, CancellationToken cancellationToken = default) Parameters timeout int 执行超时时间，单位毫秒，默认30秒 cancellationToken CancellationToken 取消令牌 Returns Task"
  },
  "api/GameFrameX.NetWork.InnerNetworkMessage.html": {
    "href": "api/GameFrameX.NetWork.InnerNetworkMessage.html",
    "title": "Class InnerNetworkMessage | GameFrameX.Server",
    "summary": "Class InnerNetworkMessage Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll 内部消息 public sealed class InnerNetworkMessage : IInnerNetworkMessage, IMessage Inheritance object InnerNetworkMessage Implements IInnerNetworkMessage IMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Header 消息头对象 public INetworkMessageHeader Header { get; } Property Value INetworkMessageHeader MessageData 消息数据 public byte[] MessageData { get; } Property Value byte[] MessageType 消息类型 [JsonIgnore] public Type MessageType { get; } Property Value Type Methods ClearData() 清除自定义数据 public void ClearData() Create(INetworkMessage, INetworkMessageHeader) 创建内部消息 public static IInnerNetworkMessage Create(INetworkMessage message, INetworkMessageHeader messageObjectHeader) Parameters message INetworkMessage messageObjectHeader INetworkMessageHeader Returns IInnerNetworkMessage Create(INetworkMessageHeader, byte[], Type) 创建内部消息 public static InnerNetworkMessage Create(INetworkMessageHeader messageObjectHeader, byte[] messageData, Type messageType) Parameters messageObjectHeader INetworkMessageHeader 消息头 messageData byte[] 消息体 messageType Type 消息体的类型 Returns InnerNetworkMessage DeserializeMessageObject() 转换消息数据为消息对象 public INetworkMessage DeserializeMessageObject() Returns INetworkMessage GetData() 获取自定义数据 public Dictionary<string, object> GetData() Returns Dictionary<string, object> GetData(string) 获取自定义数据 public object GetData(string key) Parameters key string Returns object RemoveData(string) 删除自定义数据 public bool RemoveData(string key) Parameters key string Returns bool SetData(string, object) 设置自定义数据 public void SetData(string key, object value) Parameters key string value object SetMessageData(byte[]) 设置消息数据 public void SetMessageData(byte[] messageData) Parameters messageData byte[] SetMessageHeader(INetworkMessageHeader) 设置消息头 public void SetMessageHeader(INetworkMessageHeader header) Parameters header INetworkMessageHeader SetMessageType(Type) 设置消息类型 public void SetMessageType(Type messageType) Parameters messageType Type ToFormatMessageString(long) 获取格式化后的消息字符串 public string ToFormatMessageString(long actorId = 0) Parameters actorId long ActorId Returns string 格式化后的消息字符串"
  },
  "api/GameFrameX.NetWork.Message.BaseMessageDecoderHandler.html": {
    "href": "api/GameFrameX.NetWork.Message.BaseMessageDecoderHandler.html",
    "title": "Class BaseMessageDecoderHandler | GameFrameX.Server",
    "summary": "Class BaseMessageDecoderHandler Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 基础消息解码处理器 public abstract class BaseMessageDecoderHandler : IMessageDecoderHandler Inheritance object BaseMessageDecoderHandler Implements IMessageDecoderHandler Derived DefaultMessageDecoderHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DecompressHandler 解压消息处理器 protected IMessageDecompressHandler DecompressHandler { get; } Property Value IMessageDecompressHandler PackageHeaderLength 消息头长度 public virtual ushort PackageHeaderLength { get; } Property Value ushort Methods Handler(ref ReadOnlySequence<byte>) 消息解码 public abstract IMessage Handler(ref ReadOnlySequence<byte> sequence) Parameters sequence ReadOnlySequence<byte> Returns IMessage Handler(byte[]) 和客户端之间的消息 数据长度(2)+消息唯一ID(4)+消息ID(4)+消息内容 public IMessage Handler(byte[] data) Parameters data byte[] Returns IMessage SetDecompressionHandler(IMessageDecompressHandler) 设置解压消息处理器 public void SetDecompressionHandler(IMessageDecompressHandler decompressHandler = null) Parameters decompressHandler IMessageDecompressHandler 解压消息处理器"
  },
  "api/GameFrameX.NetWork.Message.BaseMessageEncoderHandler.html": {
    "href": "api/GameFrameX.NetWork.Message.BaseMessageEncoderHandler.html",
    "title": "Class BaseMessageEncoderHandler | GameFrameX.Server",
    "summary": "Class BaseMessageEncoderHandler Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 基础消息编码处理器 public abstract class BaseMessageEncoderHandler : IMessageEncoderHandler Inheritance object BaseMessageEncoderHandler Implements IMessageEncoderHandler Derived DefaultMessageEncoderHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CompressHandler 压缩消息处理器 protected IMessageCompressHandler CompressHandler { get; } Property Value IMessageCompressHandler LimitCompressLength 超过多少字节长度才启用压缩,默认512 public virtual uint LimitCompressLength { get; } Property Value uint PackageHeaderLength totalLength + headerLength public virtual ushort PackageHeaderLength { get; } Property Value ushort Methods BytesCompressHandler(ref byte[], ref byte) 消息压缩处理 protected void BytesCompressHandler(ref byte[] bytes, ref byte zipFlag) Parameters bytes byte[] 压缩前的数据 zipFlag byte 压缩标记 Handler(IMessage) 和客户端之间的消息 数据长度(2)+消息唯一ID(4)+消息ID(4)+消息内容 public abstract byte[] Handler(IMessage message) Parameters message IMessage Returns byte[] SetCompressionHandler(IMessageCompressHandler) 设置压缩消息处理器 public void SetCompressionHandler(IMessageCompressHandler compressHandler = null) Parameters compressHandler IMessageCompressHandler 压缩消息处理器"
  },
  "api/GameFrameX.NetWork.Message.DefaultMessageCompressHandler.html": {
    "href": "api/GameFrameX.NetWork.Message.DefaultMessageCompressHandler.html",
    "title": "Class DefaultMessageCompressHandler | GameFrameX.Server",
    "summary": "Class DefaultMessageCompressHandler Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 默认消息压缩器 public sealed class DefaultMessageCompressHandler : IMessageCompressHandler Inheritance object DefaultMessageCompressHandler Implements IMessageCompressHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Handler(byte[]) 压缩处理 public byte[] Handler(byte[] message) Parameters message byte[] 消息未压缩内容 Returns byte[]"
  },
  "api/GameFrameX.NetWork.Message.DefaultMessageDecoderHandler.html": {
    "href": "api/GameFrameX.NetWork.Message.DefaultMessageDecoderHandler.html",
    "title": "Class DefaultMessageDecoderHandler | GameFrameX.Server",
    "summary": "Class DefaultMessageDecoderHandler Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 基础消息解码处理器 public class DefaultMessageDecoderHandler : BaseMessageDecoderHandler, IMessageDecoderHandler Inheritance object BaseMessageDecoderHandler DefaultMessageDecoderHandler Implements IMessageDecoderHandler Inherited Members BaseMessageDecoderHandler.DecompressHandler BaseMessageDecoderHandler.Handler(byte[]) BaseMessageDecoderHandler.SetDecompressionHandler(IMessageDecompressHandler) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PackageHeaderLength 消息头长度 public override ushort PackageHeaderLength { get; } Property Value ushort Methods Handler(ref ReadOnlySequence<byte>) 消息解码 public override IMessage Handler(ref ReadOnlySequence<byte> sequence) Parameters sequence ReadOnlySequence<byte> Returns IMessage"
  },
  "api/GameFrameX.NetWork.Message.DefaultMessageDecompressHandler.html": {
    "href": "api/GameFrameX.NetWork.Message.DefaultMessageDecompressHandler.html",
    "title": "Class DefaultMessageDecompressHandler | GameFrameX.Server",
    "summary": "Class DefaultMessageDecompressHandler Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 默认消息解压器 public sealed class DefaultMessageDecompressHandler : IMessageDecompressHandler Inheritance object DefaultMessageDecompressHandler Implements IMessageDecompressHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Handler(byte[]) 解压处理 public byte[] Handler(byte[] message) Parameters message byte[] 消息压缩内容 Returns byte[]"
  },
  "api/GameFrameX.NetWork.Message.DefaultMessageEncoderHandler.html": {
    "href": "api/GameFrameX.NetWork.Message.DefaultMessageEncoderHandler.html",
    "title": "Class DefaultMessageEncoderHandler | GameFrameX.Server",
    "summary": "Class DefaultMessageEncoderHandler Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 基础消息编码处理器 public sealed class DefaultMessageEncoderHandler : BaseMessageEncoderHandler, IMessageEncoderHandler Inheritance object BaseMessageEncoderHandler DefaultMessageEncoderHandler Implements IMessageEncoderHandler Inherited Members BaseMessageEncoderHandler.LimitCompressLength BaseMessageEncoderHandler.SetCompressionHandler(IMessageCompressHandler) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties PackageHeaderLength 消息头长度 public override ushort PackageHeaderLength { get; } Property Value ushort Methods Handler(IMessage) 和客户端之间的消息 数据长度(2)+消息唯一ID(4)+消息ID(4)+消息内容 public override byte[] Handler(IMessage message) Parameters message IMessage Returns byte[]"
  },
  "api/GameFrameX.NetWork.Message.MessageObjectPipelineFilter.html": {
    "href": "api/GameFrameX.NetWork.Message.MessageObjectPipelineFilter.html",
    "title": "Class MessageObjectPipelineFilter | GameFrameX.Server",
    "summary": "Class MessageObjectPipelineFilter Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 消息对象流水线过滤处理器 public sealed class MessageObjectPipelineFilter : PipelineFilterBase<IMessage>, IPipelineFilter<IMessage>, IPipelineFilter Inheritance object PipelineFilterBase<IMessage> MessageObjectPipelineFilter Implements IPipelineFilter<IMessage> IPipelineFilter Inherited Members PipelineFilterBase<IMessage>.Reset() PipelineFilterBase<IMessage>.NextFilter PipelineFilterBase<IMessage>.Decoder PipelineFilterBase<IMessage>.Context object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Filter(ref SequenceReader<byte>) 解析函数 public override IMessage Filter(ref SequenceReader<byte> reader) Parameters reader SequenceReader<byte> Returns IMessage"
  },
  "api/GameFrameX.NetWork.Message.html": {
    "href": "api/GameFrameX.NetWork.Message.html",
    "title": "Namespace GameFrameX.NetWork.Message | GameFrameX.Server",
    "summary": "Namespace GameFrameX.NetWork.Message Classes BaseMessageDecoderHandler 基础消息解码处理器 BaseMessageEncoderHandler 基础消息编码处理器 DefaultMessageCompressHandler 默认消息压缩器 DefaultMessageDecoderHandler 基础消息解码处理器 DefaultMessageDecompressHandler 默认消息解压器 DefaultMessageEncoderHandler 基础消息编码处理器 MessageObjectPipelineFilter 消息对象流水线过滤处理器"
  },
  "api/GameFrameX.NetWork.MessageObjectLoggerHelper.html": {
    "href": "api/GameFrameX.NetWork.MessageObjectLoggerHelper.html",
    "title": "Class MessageObjectLoggerHelper | GameFrameX.Server",
    "summary": "Class MessageObjectLoggerHelper Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll 消息对象日志帮助类 public static class MessageObjectLoggerHelper Inheritance object MessageObjectLoggerHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FormatMessage(int, byte, int, INetworkMessage, long) 格式化网络消息为可读的字符串格式 public static string FormatMessage(int messageId, byte operationType, int uniqueId, INetworkMessage messageObject, long actorId) Parameters messageId int 消息ID operationType byte 操作类型 uniqueId int 唯一标识ID messageObject INetworkMessage 网络消息对象 actorId long Returns string 格式化后的消息字符串"
  },
  "api/GameFrameX.NetWork.Messages.CommandInfo.html": {
    "href": "api/GameFrameX.NetWork.Messages.CommandInfo.html",
    "title": "Class CommandInfo | GameFrameX.Server",
    "summary": "Class CommandInfo Namespace GameFrameX.NetWork.Messages Assembly GameFrameX.NetWork.dll 指令信息 public sealed class CommandInfo : ICommandInfo Inheritance object CommandInfo Implements ICommandInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CommandInfo(int) 创建指令对象 public CommandInfo(int messageId) Parameters messageId int CommandInfo(int, int) 创建指令对象 public CommandInfo(int mainId, int subId) Parameters mainId int subId int Properties MainId 主消息ID public int MainId { get; } Property Value int MessageId 合并后的消息ID public int MessageId { get; } Property Value int SubId 次消息ID public int SubId { get; } Property Value int Methods Create(int) 创建指令对象 public static CommandInfo Create(int messageId) Parameters messageId int Returns CommandInfo Create(int, int) 创建指令对象 public static CommandInfo Create(int mainId, int subId) Parameters mainId int subId int Returns CommandInfo"
  },
  "api/GameFrameX.NetWork.Messages.InnerMessageObjectHeader.html": {
    "href": "api/GameFrameX.NetWork.Messages.InnerMessageObjectHeader.html",
    "title": "Class InnerMessageObjectHeader | GameFrameX.Server",
    "summary": "Class InnerMessageObjectHeader Namespace GameFrameX.NetWork.Messages Assembly GameFrameX.NetWork.dll 内部消息对象头 public sealed class InnerMessageObjectHeader : MessageObjectHeader, INetworkMessageHeader Inheritance object MessageObjectHeader InnerMessageObjectHeader Implements INetworkMessageHeader Inherited Members MessageObjectHeader.MessageId MessageObjectHeader.OperationType MessageObjectHeader.ZipFlag MessageObjectHeader.UniqueId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ServerId 服务器ID [ProtoMember(5)] public int ServerId { get; set; } Property Value int"
  },
  "api/GameFrameX.NetWork.Messages.MessageObject.html": {
    "href": "api/GameFrameX.NetWork.Messages.MessageObject.html",
    "title": "Class MessageObject | GameFrameX.Server",
    "summary": "Class MessageObject Namespace GameFrameX.NetWork.Messages Assembly GameFrameX.NetWork.dll 消息对象 public abstract class MessageObject : INetworkMessage, IMessage Inheritance object MessageObject Implements INetworkMessage IMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MessageObject() protected MessageObject() Properties MessageId 消息ID [JsonIgnore] public int MessageId { get; } Property Value int OperationType 消息业务类型 [JsonIgnore] public byte OperationType { get; } Property Value byte UniqueId 消息的唯一ID [JsonIgnore] public int UniqueId { get; set; } Property Value int Methods SetMessageId(int) 设置消息ID public void SetMessageId(int messageId) Parameters messageId int SetOperationType(byte) 设置消息业务类型 public void SetOperationType(byte messageOperationType) Parameters messageOperationType byte 消息业务类型 SetUniqueId(int) 设置唯一消息ID public void SetUniqueId(int uniqueId) Parameters uniqueId int ToFormatMessageString(long) 获取格式化后的消息字符串 public string ToFormatMessageString(long actorId = 0) Parameters actorId long ActorId Returns string 格式化后的消息字符串 ToJsonString() 获取JSON格式化后的消息字符串 public string ToJsonString() Returns string ToString() 转换为字符串 public override string ToString() Returns string UpdateUniqueId() 更新唯一消息ID public void UpdateUniqueId()"
  },
  "api/GameFrameX.NetWork.Messages.MessageObjectHeader.html": {
    "href": "api/GameFrameX.NetWork.Messages.MessageObjectHeader.html",
    "title": "Class MessageObjectHeader | GameFrameX.Server",
    "summary": "Class MessageObjectHeader Namespace GameFrameX.NetWork.Messages Assembly GameFrameX.NetWork.dll 消息对象头 public class MessageObjectHeader : INetworkMessageHeader Inheritance object MessageObjectHeader Implements INetworkMessageHeader Derived InnerMessageObjectHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MessageId 消息ID [ProtoMember(1)] public int MessageId { get; set; } Property Value int OperationType 操作类型 [ProtoMember(2)] public byte OperationType { get; set; } Property Value byte UniqueId 唯一消息序列ID [ProtoMember(4)] public int UniqueId { get; set; } Property Value int ZipFlag 压缩标记 [ProtoMember(3)] public byte ZipFlag { get; set; } Property Value byte"
  },
  "api/GameFrameX.NetWork.Messages.MessageObjectLogObject.html": {
    "href": "api/GameFrameX.NetWork.Messages.MessageObjectLogObject.html",
    "title": "Class MessageObjectLogObject | GameFrameX.Server",
    "summary": "Class MessageObjectLogObject Namespace GameFrameX.NetWork.Messages Assembly GameFrameX.NetWork.dll 消息对象日志 public sealed class MessageObjectLogObject Inheritance object MessageObjectLogObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MessageObjectLogObject(string, int, int, int, INetworkMessage, long) 消息日志对象 public MessageObjectLogObject(string name, int messageId, int operationType, int uniqueId, INetworkMessage messageObject, long actorId) Parameters name string messageId int operationType int uniqueId int messageObject INetworkMessage actorId long Properties ActorId ActorId public long ActorId { get; set; } Property Value long Data 消息对象 public object Data { get; set; } Property Value object MessageId 消息ID public int MessageId { get; set; } Property Value int MessageType 消息类型 public string MessageType { get; set; } Property Value string OpType 操作类型 public int OpType { get; set; } Property Value int UniqueId 唯一ID public int UniqueId { get; set; } Property Value int"
  },
  "api/GameFrameX.NetWork.Messages.html": {
    "href": "api/GameFrameX.NetWork.Messages.html",
    "title": "Namespace GameFrameX.NetWork.Messages | GameFrameX.Server",
    "summary": "Namespace GameFrameX.NetWork.Messages Classes CommandInfo 指令信息 InnerMessageObjectHeader 内部消息对象头 MessageObject 消息对象 MessageObjectHeader 消息对象头 MessageObjectLogObject 消息对象日志"
  },
  "api/GameFrameX.NetWork.OuterNetworkMessage.html": {
    "href": "api/GameFrameX.NetWork.OuterNetworkMessage.html",
    "title": "Class OuterNetworkMessage | GameFrameX.Server",
    "summary": "Class OuterNetworkMessage Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll 外部消息 public sealed class OuterNetworkMessage : IOuterNetworkMessage, IMessage Inheritance object OuterNetworkMessage Implements IOuterNetworkMessage IMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Header 消息头对象 public INetworkMessageHeader Header { get; } Property Value INetworkMessageHeader MessageData 消息数据 public byte[] MessageData { get; } Property Value byte[] MessageType 消息类型 [JsonIgnore] public Type MessageType { get; } Property Value Type UniqueId 消息唯一ID public string UniqueId { get; } Property Value string Methods ClearData() 清除自定义数据 public void ClearData() Create(INetworkMessage, INetworkMessageHeader) 创建内部消息 public static IOuterNetworkMessage Create(INetworkMessage message, INetworkMessageHeader messageObjectHeader) Parameters message INetworkMessage messageObjectHeader INetworkMessageHeader Returns IOuterNetworkMessage Create(INetworkMessageHeader, byte[], Type) 创建内部消息 public static OuterNetworkMessage Create(INetworkMessageHeader messageObjectHeader, byte[] messageData, Type messageType) Parameters messageObjectHeader INetworkMessageHeader 消息头 messageData byte[] 消息体 messageType Type 消息体的类型 Returns OuterNetworkMessage DeserializeMessageObject() 转换消息数据为消息对象 public INetworkMessage DeserializeMessageObject() Returns INetworkMessage GetData() 获取自定义数据 public Dictionary<string, object> GetData() Returns Dictionary<string, object> GetData(string) 获取自定义数据 public object GetData(string key) Parameters key string Returns object RemoveData(string) 删除自定义数据 public bool RemoveData(string key) Parameters key string Returns bool SetData(string, object) 设置自定义数据 public void SetData(string key, object value) Parameters key string value object SetMessageData(byte[]) 设置消息数据 public void SetMessageData(byte[] messageData) Parameters messageData byte[] SetMessageHeader(INetworkMessageHeader) 设置消息头 public void SetMessageHeader(INetworkMessageHeader header) Parameters header INetworkMessageHeader SetMessageType(Type) 设置消息类型 public void SetMessageType(Type messageType) Parameters messageType Type SetUniqueId(string) 设置唯一消息ID public void SetUniqueId(string uniqueId) Parameters uniqueId string ToFormatMessageString(long) 获取格式化后的消息字符串 public string ToFormatMessageString(long actorId = 0) Parameters actorId long ActorId Returns string 格式化后的消息字符串"
  },
  "api/GameFrameX.NetWork.RpcData.html": {
    "href": "api/GameFrameX.NetWork.RpcData.html",
    "title": "Class RpcData | GameFrameX.Server",
    "summary": "Class RpcData Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll RPC 数据 public sealed class RpcData : IDisposable Inheritance object RpcData Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CreatedTime 创建时间 public long CreatedTime { get; } Property Value long IsReply 是否需要回复 public bool IsReply { get; } Property Value bool RequestMessage 请求消息 public IRequestMessage RequestMessage { get; } Property Value IRequestMessage ResponseMessage 响应消息 public IResponseMessage ResponseMessage { get; } Property Value IResponseMessage Task RPC 回复任务 public Task<IRpcResult> Task { get; } Property Value Task<IRpcResult> Time RPC 耗时时间.单位毫秒 从创建到回复的时间差 public long Time { get; } Property Value long Timeout 超时时间。单位毫秒 public int Timeout { get; } Property Value int UniqueId 消息的唯一ID 从RequestMessage中获得 public long UniqueId { get; } Property Value long Methods Create(IRequestMessage, bool, int) 创建 public static RpcData Create(IRequestMessage requestMessage, bool isReply = true, int timeout = 10000) Parameters requestMessage IRequestMessage 请求消息 isReply bool 是否需要回复 timeout int 超时时间,单位毫秒 Returns RpcData Dispose() public void Dispose() ~RpcData() 析构函数 protected ~RpcData() Reply(IResponseMessage) RPC 回复 public void Reply(IResponseMessage responseMessage) Parameters responseMessage IResponseMessage"
  },
  "api/GameFrameX.NetWork.RpcResult.html": {
    "href": "api/GameFrameX.NetWork.RpcResult.html",
    "title": "Class RpcResult | GameFrameX.Server",
    "summary": "Class RpcResult Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll RPC请求结果 public sealed class RpcResult : IRpcResult, IDisposable Inheritance object RpcResult Implements IRpcResult IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Error 错误信息 public string Error { get; } Property Value string IsSuccess 是否成功 public bool IsSuccess { get; } Property Value bool Message 返回消息 public IResponseMessage Message { get; } Property Value IResponseMessage Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ~RpcResult() 析构函数 protected ~RpcResult()"
  },
  "api/GameFrameX.NetWork.RpcSession.html": {
    "href": "api/GameFrameX.NetWork.RpcSession.html",
    "title": "Class RpcSession | GameFrameX.Server",
    "summary": "Class RpcSession Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll RPC会话 public sealed class RpcSession : IRpcSession, IDisposable Inheritance object RpcSession Implements IRpcSession IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Call(IRequestMessage, int) 异步调用,且等待返回 public Task<IRpcResult> Call(IRequestMessage message, int timeOutMillisecond = 10000) Parameters message IRequestMessage 调用消息对象 timeOutMillisecond int 调用超时,单位毫秒,默认10秒 Returns Task<IRpcResult> 返回消息对象 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ~RpcSession() 析构函数 protected ~RpcSession() Handler() 处理消息队列 public RpcData Handler() Returns RpcData Reply(IResponseMessage) 回复 public bool Reply(IResponseMessage message) Parameters message IResponseMessage Returns bool Send(IRequestMessage) 异步发送,不等待结果 public void Send(IRequestMessage message) Parameters message IRequestMessage 调用消息对象 Stop() 停止 public void Stop() Tick(int) 计时器 public void Tick(int elapseMillisecondsTime) Parameters elapseMillisecondsTime int 流逝时间,单位毫秒 TryPeek() 处理消息队列 public RpcData TryPeek() Returns RpcData"
  },
  "api/GameFrameX.NetWork.html": {
    "href": "api/GameFrameX.NetWork.html",
    "title": "Namespace GameFrameX.NetWork | GameFrameX.Server",
    "summary": "Namespace GameFrameX.NetWork Classes BaseNetWorkChannel 基础网络通道 DefaultNetWorkChannel 默认网络通道 InnerNetworkMessage 内部消息 MessageObjectLoggerHelper 消息对象日志帮助类 OuterNetworkMessage 外部消息 RpcData RPC 数据 RpcResult RPC请求结果 RpcSession RPC会话 Interfaces IMessageHandler 消息处理器"
  },
  "api/GameFrameX.StartUp.Abstractions.IAppStartUp.html": {
    "href": "api/GameFrameX.StartUp.Abstractions.IAppStartUp.html",
    "title": "Interface IAppStartUp | GameFrameX.Server",
    "summary": "Interface IAppStartUp Namespace GameFrameX.StartUp.Abstractions Assembly GameFrameX.StartUp.dll 程序启动器基类接口定义 public interface IAppStartUp Properties AppExitToken 应用退出 Task<string> AppExitToken { get; } Property Value Task<string> ServerType 服务器类型 string ServerType { get; } Property Value string Setting 配置信息 AppSetting Setting { get; } Property Value AppSetting Methods Init(string, AppSetting, string[]) 初始化 bool Init(string serverType, AppSetting setting, string[] args) Parameters serverType string 服务器类型 setting AppSetting 启动设置 args string[] 启动参数 Returns bool StartAsync() 启动 Task StartAsync() Returns Task StopAsync(string) 终止服务器 Task StopAsync(string message = \"\") Parameters message string 终止原因 Returns Task"
  },
  "api/GameFrameX.StartUp.Abstractions.IFetalExceptionExitHandler.html": {
    "href": "api/GameFrameX.StartUp.Abstractions.IFetalExceptionExitHandler.html",
    "title": "Interface IFetalExceptionExitHandler | GameFrameX.Server",
    "summary": "Interface IFetalExceptionExitHandler Namespace GameFrameX.StartUp.Abstractions Assembly GameFrameX.StartUp.dll 程序异常退出的执行器 public interface IFetalExceptionExitHandler Methods Run(string, AppSetting, string) 执行 void Run(string tag, AppSetting setting, string message) Parameters tag string 标签 setting AppSetting 服务器设置 message string 退出原因"
  },
  "api/GameFrameX.StartUp.Abstractions.html": {
    "href": "api/GameFrameX.StartUp.Abstractions.html",
    "title": "Namespace GameFrameX.StartUp.Abstractions | GameFrameX.Server",
    "summary": "Namespace GameFrameX.StartUp.Abstractions Interfaces IAppStartUp 程序启动器基类接口定义 IFetalExceptionExitHandler 程序异常退出的执行器"
  },
  "api/GameFrameX.StartUp.AppStartUpBase.html": {
    "href": "api/GameFrameX.StartUp.AppStartUpBase.html",
    "title": "Class AppStartUpBase | GameFrameX.Server",
    "summary": "Class AppStartUpBase Namespace GameFrameX.StartUp Assembly GameFrameX.StartUp.dll 程序启动器基类 public abstract class AppStartUpBase : IAppStartUp Inheritance object AppStartUpBase Implements IAppStartUp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AppExitSource 应用退出 protected readonly TaskCompletionSource<string> AppExitSource Field Value TaskCompletionSource<string> Properties AppExitToken 应用退出 public Task<string> AppExitToken { get; } Property Value Task<string> IsRegisterToDiscoveryCenter 是否将当前服务注册到服务中心 默认 false：不自动注册；子类可重写为 true 以开启注册逻辑。 protected virtual bool IsRegisterToDiscoveryCenter { get; set; } Property Value bool ServerType 服务器类型 public string ServerType { get; } Property Value string Setting 配置信息 public AppSetting Setting { get; protected set; } Property Value AppSetting Methods GameAppClientOnClosed() 与发现中心连接断开时的回调 protected virtual void GameAppClientOnClosed() GameAppClientOnConnected() 与发现中心连接建立成功时的回调 protected virtual void GameAppClientOnConnected() GameAppClientOnError(ErrorEventArgs) 与发现中心通信发生错误时的回调 protected virtual void GameAppClientOnError(ErrorEventArgs obj) Parameters obj ErrorEventArgs 包含异常信息的错误事件参数 GameAppClientOnHeartBeat() 心跳回调：当需要向发现中心发送心跳消息时触发，可在此构造并返回心跳数据 protected virtual MessageObject GameAppClientOnHeartBeat() Returns MessageObject 返回要发送的心跳消息对象；如无需发送心跳，返回 null GameAppClientOnMessage(MessageObject) 收到发现中心推送消息时的回调 protected virtual void GameAppClientOnMessage(MessageObject message) Parameters message MessageObject 发现中心下发的消息对象 Init() 初始化 protected virtual void Init() Init(string, AppSetting, string[]) 初始化 public bool Init(string serverType, AppSetting setting, string[] args = null) Parameters serverType string 服务器类型 setting AppSetting 配置信息对象 args string[] 参数 Returns bool InvokeMessageHandler(IMessageHandler, INetworkMessage, INetWorkChannel, int, CancellationToken) 异步消息处理方法 protected Task InvokeMessageHandler(IMessageHandler handler, INetworkMessage message, INetWorkChannel netWorkChannel, int timeout = 30000, CancellationToken cancellationToken = default) Parameters handler IMessageHandler 消息处理器 message INetworkMessage 网络消息 netWorkChannel INetWorkChannel 网络通道 timeout int 超时时间(毫秒) cancellationToken CancellationToken 取消令牌 Returns Task OnConnected(IAppSession) 客户端连接成功时的处理方法 protected virtual ValueTask OnConnected(IAppSession appSession) Parameters appSession IAppSession 新建立的会话对象 Returns ValueTask OnDisconnected(IAppSession, CloseEventArgs) 客户端断开连接时的处理方法 protected virtual ValueTask OnDisconnected(IAppSession appSession, CloseEventArgs disconnectEventArgs) Parameters appSession IAppSession 断开连接的会话对象 disconnectEventArgs CloseEventArgs 断开连接的相关参数 Returns ValueTask PackageErrorHandler(IAppSession, PackageHandlingException<IMessage>) 消息处理异常处理方法 protected virtual ValueTask<bool> PackageErrorHandler(IAppSession appSession, PackageHandlingException<IMessage> exception) Parameters appSession IAppSession 会话对象 exception PackageHandlingException<IMessage> 异常信息 Returns ValueTask<bool> 返回true表示继续处理，返回false表示终止处理 PackageHandler(IAppSession, IMessage) 收到消息包的处理方法 protected virtual ValueTask PackageHandler(IAppSession session, IMessage message) Parameters session IAppSession 会话对象 message IMessage 接收到的消息 Returns ValueTask Send(MessageObject) 向发现中心（DiscoveryCenter）发送消息 public void Send(MessageObject message) Parameters message MessageObject 待发送的消息对象 StartAsync() 启动 public abstract Task StartAsync() Returns Task StartServerAsync<TMessageDecoderHandler, TMessageEncoderHandler>(IMessageCompressHandler, IMessageDecompressHandler, List<BaseHttpHandler>, Func<string, BaseHttpHandler>, List<IHttpAopHandler>, LogLevel) 启动服务器 - 同时启动TCP和WebSocket服务 protected Task StartServerAsync<TMessageDecoderHandler, TMessageEncoderHandler>(IMessageCompressHandler messageCompressHandler, IMessageDecompressHandler messageDecompressHandler, List<BaseHttpHandler> baseHandler, Func<string, BaseHttpHandler> httpFactory, List<IHttpAopHandler> aopHandlerTypes = null, LogLevel minimumLevelLogLevel = LogLevel.Debug) where TMessageDecoderHandler : class, IMessageDecoderHandler, new() where TMessageEncoderHandler : class, IMessageEncoderHandler, new() Parameters messageCompressHandler IMessageCompressHandler 消息编码的时候使用的压缩处理器，如果为空则不处理压缩消息 messageDecompressHandler IMessageDecompressHandler 消息解码的时候使用的解压处理器,如果为空则不处理压缩消息 baseHandler List<BaseHttpHandler> HTTP处理器列表,用于处理不同的HTTP请求 httpFactory Func<string, BaseHttpHandler> HTTP处理器工厂,根据命令标识符创建对应的处理器实例 aopHandlerTypes List<IHttpAopHandler> AOP处理器列表,用于在HTTP请求处理前后执行额外的逻辑 minimumLevelLogLevel LogLevel 日志记录的最小级别,用于控制日志输出 Returns Task Type Parameters TMessageDecoderHandler 消息解码处理器类型，必须实现IMessageDecoderHandler和IPackageDecoder接口 TMessageEncoderHandler 消息编码处理器类型，必须实现IMessageEncoderHandler和IPackageEncoder接口 StopAsync(string) 终止服务器 public virtual Task StopAsync(string message = \"\") Parameters message string 终止原因 Returns Task StopServerAsync() 停止服务器 - 关闭所有网络服务 protected Task StopServerAsync() Returns Task"
  },
  "api/GameFrameX.StartUp.Extensions.HealthCheckResponse.HealthCheckItem.html": {
    "href": "api/GameFrameX.StartUp.Extensions.HealthCheckResponse.HealthCheckItem.html",
    "title": "Class HealthCheckResponse.HealthCheckItem | GameFrameX.Server",
    "summary": "Class HealthCheckResponse.HealthCheckItem Namespace GameFrameX.StartUp.Extensions Assembly GameFrameX.StartUp.dll 健康检查项目信息 public sealed class HealthCheckResponse.HealthCheckItem Inheritance object HealthCheckResponse.HealthCheckItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Description 获取或设置健康检查项目的描述信息 public string Description { get; set; } Property Value string 健康检查项目的详细描述信息 Duration 获取或设置健康检查项目的执行持续时间 public double Duration { get; set; } Property Value double 健康检查项目的执行持续时间，单位为毫秒 Name 获取或设置健康检查项目的名称 public string Name { get; set; } Property Value string 健康检查项目的名称 Status 获取或设置健康检查项目的状态 public string Status { get; set; } Property Value string 健康检查项目的状态，如\"Healthy\"、\"Unhealthy\"等"
  },
  "api/GameFrameX.StartUp.Extensions.HealthCheckResponse.HealthCheckSetting.html": {
    "href": "api/GameFrameX.StartUp.Extensions.HealthCheckResponse.HealthCheckSetting.html",
    "title": "Class HealthCheckResponse.HealthCheckSetting | GameFrameX.Server",
    "summary": "Class HealthCheckResponse.HealthCheckSetting Namespace GameFrameX.StartUp.Extensions Assembly GameFrameX.StartUp.dll 健康检查设置信息类 public sealed class HealthCheckResponse.HealthCheckSetting Inheritance object HealthCheckResponse.HealthCheckSetting Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks 该类用于在健康检查响应中携带服务器的基本配置信息， 便于运维人员通过健康检查接口快速了解服务器的运行状态和配置参数。 包含服务器标识、类型、时间等关键信息。 Properties Description 获取或设置描述信息 public string Description { get; set; } Property Value string 服务器的详细描述信息 Remarks 描述信息提供服务器的详细说明，包括功能介绍、版本信息等。 主要用于文档记录和运维人员了解服务器的具体用途。 Label 获取或设置标签信息 public string Label { get; set; } Property Value string 服务器的标签信息 Remarks 标签信息用于对服务器进行分类和过滤，支持多标签管理。 可以用于服务发现、监控分组、资源管理等场景。 标签通常以逗号分隔的字符串形式存储。 Language 获取或设置语言设置 public string Language { get; set; } Property Value string 服务器使用的语言代码 Remarks 语言设置用于国际化和本地化支持，影响服务器返回的消息和日志的语言。 通常使用标准的语言代码，如\"zh-CN\"、\"en-US\"等。 LaunchTime 获取或设置应用程序启动时间 public DateTime LaunchTime { get; set; } Property Value DateTime 应用程序的启动时间戳 Remarks 用于计算服务器运行时长，便于监控服务器的稳定性和运行状态。 该时间通常在应用程序初始化时设置，不会在运行期间改变。 Note 获取或设置备注信息 public string Note { get; set; } Property Value string 服务器的备注信息 Remarks 备注信息用于记录服务器的额外说明、注意事项或临时信息。 可以包含运维相关的提醒、配置说明或其他重要信息。 ServerId 获取或设置服务器ID public int ServerId { get; set; } Property Value int 服务器的唯一标识符 Remarks 服务器ID用于在集群环境中唯一标识一个服务器实例。 通常在配置文件中指定，用于服务发现、负载均衡和消息路由等场景。 ServerInstanceId 获取或设置服务器实例ID public long ServerInstanceId { get; set; } Property Value long 服务器实例的唯一标识符 Remarks 服务器实例ID是一个长整型的唯一标识符，通常在服务器启动时生成。 用于区分同一服务器类型的不同实例，在分布式环境中确保实例的唯一性。 与ServerId不同，实例ID通常是动态生成的。 ServerName 获取或设置服务器名称 public string ServerName { get; set; } Property Value string 服务器的显示名称 Remarks 服务器名称通常基于服务器类型自动生成，也可以手动指定。 用于日志记录、监控界面显示和调试信息输出等场景。 例如：\"Game\"、\"Gateway\"、\"Account\"等。 ServerType 获取或设置服务器类型 public string ServerType { get; set; } Property Value string 当前服务器的类型，如游戏服、网关服、账号服等 Remarks 服务器类型决定了服务器的功能和职责范围。 支持的类型包括：Game（游戏服）、Gateway（网关服）、Account（账号服）、 DiscoveryCenter（服务发现中心）、Login（登录服）等。 See Also ServerType TagName 获取或设置标记名称 public string TagName { get; set; } Property Value string 服务器的标记名称 Remarks 标记名称用于对服务器进行分类或标记，便于管理和识别。 可以用于环境区分（如dev、test、prod）或功能标记等。"
  },
  "api/GameFrameX.StartUp.Extensions.HealthCheckResponse.html": {
    "href": "api/GameFrameX.StartUp.Extensions.HealthCheckResponse.html",
    "title": "Class HealthCheckResponse | GameFrameX.Server",
    "summary": "Class HealthCheckResponse Namespace GameFrameX.StartUp.Extensions Assembly GameFrameX.StartUp.dll 健康检查响应信息 public sealed class HealthCheckResponse Inheritance object HealthCheckResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Checks 获取或设置健康检查项目列表 public List<HealthCheckResponse.HealthCheckItem> Checks { get; set; } Property Value List<HealthCheckResponse.HealthCheckItem> 包含所有健康检查项目的列表 See Also HealthCheckResponse.HealthCheckItem Setting 获取或设置应用设置信息 public HealthCheckResponse.HealthCheckSetting Setting { get; set; } Property Value HealthCheckResponse.HealthCheckSetting 当前应用程序的 AppSetting 实例，可能为 null。 Remarks 该属性用于在健康检查响应中携带当前应用程序的配置信息，便于调试与监控。 包含端口、功能开关等关键配置项，方便在健康检查接口中直接查看运行参数。 Status 获取或设置整体健康检查状态 public string Status { get; set; } Property Value string 整体健康检查状态，如\"Healthy\"、\"Unhealthy\"等 Timestamp 获取或设置健康检查执行的时间戳 public DateTime Timestamp { get; set; } Property Value DateTime 健康检查执行的时间戳 TotalDuration 获取或设置所有健康检查项目的总执行时间 public double TotalDuration { get; set; } Property Value double 所有健康检查项目的总执行时间，单位为毫秒"
  },
  "api/GameFrameX.StartUp.Extensions.HealthChecksExtensions.html": {
    "href": "api/GameFrameX.StartUp.Extensions.HealthChecksExtensions.html",
    "title": "Class HealthChecksExtensions | GameFrameX.Server",
    "summary": "Class HealthChecksExtensions Namespace GameFrameX.StartUp.Extensions Assembly GameFrameX.StartUp.dll 健康检查配置扩展方法 public static class HealthChecksExtensions Inheritance object HealthChecksExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DefaultHealthCheckPath 默认健康检查端点路径 public const string DefaultHealthCheckPath = \"/health\" Field Value string 返回默认的健康检查端点路径 \"/health\" OpenTelemetryHealthCheckPath OpenTelemetry 健康检查端点路径 public const string OpenTelemetryHealthCheckPath = \"/health/opentelemetry\" Field Value string SimpleHealthCheckPath 简单健康检查端点路径（兼容性端点） public const string SimpleHealthCheckPath = \"/health/simple\" Field Value string Methods AddGameFrameXHealthChecks(IServiceCollection, AppSetting) 添加 GameFrameX 健康检查服务（包含多种检查项目） public static IServiceCollection AddGameFrameXHealthChecks(this IServiceCollection services, AppSetting setting) Parameters services IServiceCollection 服务集合 setting AppSetting 应用设置 Returns IServiceCollection 服务集合 UseGameFrameXHealthChecks(IApplicationBuilder, AppSetting, List<string>) 使用 GameFrameX 健康检查中间件 public static IApplicationBuilder UseGameFrameXHealthChecks(this IApplicationBuilder app, AppSetting setting, List<string> ipList) Parameters app IApplicationBuilder 应用程序构建器，用于配置HTTP请求管道 setting AppSetting 应用设置对象，包含应用程序的配置信息 ipList List<string> Returns IApplicationBuilder 返回配置了健康检查端点的应用程序构建器 Examples // 使用默认路径 app.UseGameFrameXHealthChecks(appSetting); // 使用自定义路径 app.UseGameFrameXHealthChecks(appSetting, \"/api/health\"); Remarks 此方法会配置以下健康检查端点： /health - 详细的JSON格式健康检查报告 /health/simple - 简单的\"OK\"响应（兼容性端点） 健康检查响应包含状态、检查项详情、持续时间、服务器信息和时间戳。 See Also AddGameFrameXHealthChecks(IServiceCollection, AppSetting) AppSetting"
  },
  "api/GameFrameX.StartUp.Extensions.OpenTelemetryExtensions.html": {
    "href": "api/GameFrameX.StartUp.Extensions.OpenTelemetryExtensions.html",
    "title": "Class OpenTelemetryExtensions | GameFrameX.Server",
    "summary": "Class OpenTelemetryExtensions Namespace GameFrameX.StartUp.Extensions Assembly GameFrameX.StartUp.dll OpenTelemetry 配置扩展方法 public static class OpenTelemetryExtensions Inheritance object OpenTelemetryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddGameFrameXOpenTelemetry(IServiceCollection, AppSetting, string, string) 添加 GameFrameX OpenTelemetry 配置 public static IServiceCollection AddGameFrameXOpenTelemetry(this IServiceCollection services, AppSetting setting, string servicePrefix = \"\", string tracingSourcePrefix = \"\") Parameters services IServiceCollection 服务集合 setting AppSetting 应用设置 servicePrefix string 服务名前缀 tracingSourcePrefix string 追踪源前缀 Returns IServiceCollection 服务集合 AddGameFrameXOpenTelemetryLogging(ILoggingBuilder, AppSetting) 添加 GameFrameX OpenTelemetry 日志配置 public static ILoggingBuilder AddGameFrameXOpenTelemetryLogging(this ILoggingBuilder logging, AppSetting setting) Parameters logging ILoggingBuilder 日志构建器 setting AppSetting 应用设置 Returns ILoggingBuilder 日志构建器 CreateMetricsServerAsync(AppSetting, string) 创建独立的指标服务器 public static Task<WebApplication> CreateMetricsServerAsync(AppSetting setting, string servicePrefix = \"\") Parameters setting AppSetting 应用设置 servicePrefix string 服务名前缀 Returns Task<WebApplication> 指标服务器任务"
  },
  "api/GameFrameX.StartUp.Extensions.html": {
    "href": "api/GameFrameX.StartUp.Extensions.html",
    "title": "Namespace GameFrameX.StartUp.Extensions | GameFrameX.Server",
    "summary": "Namespace GameFrameX.StartUp.Extensions Classes HealthCheckResponse 健康检查响应信息 HealthCheckResponse.HealthCheckItem 健康检查项目信息 HealthCheckResponse.HealthCheckSetting 健康检查设置信息类 HealthChecksExtensions 健康检查配置扩展方法 OpenTelemetryExtensions OpenTelemetry 配置扩展方法"
  },
  "api/GameFrameX.StartUp.GameApp.html": {
    "href": "api/GameFrameX.StartUp.GameApp.html",
    "title": "Class GameApp | GameFrameX.Server",
    "summary": "Class GameApp Namespace GameFrameX.StartUp Assembly GameFrameX.StartUp.dll 程序入口类 public static class GameApp Inheritance object GameApp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Entry(string[], Action, Action<LogOptions>) 启动入口函数 public static Task Entry(string[] args, Action initAction, Action<LogOptions> logConfiguration = null) Parameters args string[] 启动参数 initAction Action 在启动服务器之前执行,需要外部初始化协议注册 logConfiguration Action<LogOptions> 初始化日志系统之前回调,可以重写参数 Returns Task"
  },
  "api/GameFrameX.StartUp.Options.LauncherOptions.html": {
    "href": "api/GameFrameX.StartUp.Options.LauncherOptions.html",
    "title": "Class LauncherOptions | GameFrameX.Server",
    "summary": "Class LauncherOptions Namespace GameFrameX.StartUp.Options Assembly GameFrameX.StartUp.dll 启动参数 public sealed class LauncherOptions Inheritance object LauncherOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ActorQueueTimeOut Actor 执行任务队列超时时间(毫秒),默认值为30秒 [Option(\"ActorQueueTimeOut\", Description = \"Actor 执行任务队列超时时间(毫秒),默认值为30秒\")] [DefaultValue(30000)] public int ActorQueueTimeOut { get; set; } Property Value int ActorRecycleTime Actor 空闲多久回收,单位分钟,默认值为15分钟,最小值为1分钟,小于1则强制设置为5分钟 [Option(\"ActorRecycleTime\", Description = \"Actor 空闲多久回收,单位分钟,默认值为15分钟,最小值为1分钟,小于1则强制设置为5分钟\")] [DefaultValue(15)] public int ActorRecycleTime { get; set; } Property Value int ActorTimeOut Actor 执行任务超时时间(毫秒),默认值为30秒 [Option(\"ActorTimeOut\", Description = \"Actor 执行任务超时时间(毫秒),默认值为30秒\")] [DefaultValue(30000)] public int ActorTimeOut { get; set; } Property Value int ClientApiHost 客户端API地址 [Option(\"ClientApiHost\", Description = \"客户端API地址\")] [DefaultValue(\"\")] public string ClientApiHost { get; set; } Property Value string DataBaseName 数据库名称 [Option(\"DataBaseName\", Description = \"数据库名称\")] public string DataBaseName { get; set; } Property Value string DataBaseUrl 数据库 地址 [Option(\"DataBaseUrl\", Description = \"数据库 地址\")] public string DataBaseUrl { get; set; } Property Value string DataCenter 数据中心 [Option(\"DataCenter\", Description = \"数据中心\")] public string DataCenter { get; set; } Property Value string Description 描述信息-用于描述该服务器的用途,没有实际用途,只是方便运维管理 [Option(\"Description\", Description = \"描述信息-用于描述该服务器的用途,没有实际用途,只是方便运维管理\")] [DefaultValue(\"\")] [GrafanaLokiLabelTag] public string Description { get; set; } Property Value string DiscoveryCenterHost 发现中心地址 [Option(\"DiscoveryCenterHost\", Description = \"发现中心地址\")] public string DiscoveryCenterHost { get; set; } Property Value string DiscoveryCenterPort 发现中心端口 [Option(\"DiscoveryCenterPort\", Description = \"发现中心端口\")] public ushort DiscoveryCenterPort { get; set; } Property Value ushort GameAppClientConnectDelay 连接延迟（毫秒），默认 5000 毫秒 [Option(\"GameAppClientConnectDelay\", Description = \"连接延迟（毫秒），默认 5000 毫秒\")] [DefaultValue(5000)] public int GameAppClientConnectDelay { get; set; } Property Value int GameAppClientHeartBeatInterval 心跳间隔（毫秒），默认 5000 毫秒 [Option(\"GameAppClientHeartBeatInterval\", Description = \"心跳间隔（毫秒），默认 5000 毫秒\")] [DefaultValue(5000)] public int GameAppClientHeartBeatInterval { get; set; } Property Value int GameAppClientMaxRetryCount 最大重试次数，默认 -1 表示无限重试 [Option(\"GameAppClientMaxRetryCount\", Description = \"最大重试次数，默认 -1 表示无限重试\")] [DefaultValue(-1)] public int GameAppClientMaxRetryCount { get; set; } Property Value int GameAppClientRetryDelay 重试延迟（毫秒），默认 5000 毫秒 [Option(\"GameAppClientRetryDelay\", Description = \"重试延迟（毫秒），默认 5000 毫秒\")] [DefaultValue(5000)] public int GameAppClientRetryDelay { get; set; } Property Value int HttpIsDevelopment HTTP 是否是开发模式,当是开发模式的时候将会启用Swagger [Option(\"HttpIsDevelopment\", Description = \"HTTP 是否是开发模式,当是开发模式的时候将会启用Swagger\")] [DefaultValue(false)] public bool HttpIsDevelopment { get; set; } Property Value bool HttpPort HTTP 端口 [Option(\"HttpPort\", DefaultValue = 8080, Description = \"HTTP 端口\")] public ushort HttpPort { get; set; } Property Value ushort HttpUrl API接口根路径,必须以/开头和以/结尾,默认为[/game/api/] [Option(\"HttpUrl\", Description = \"API接口根路径,必须以/开头和以/结尾,默认为[/game/api/]\")] [DefaultValue(\"/game/api/\")] public string HttpUrl { get; set; } Property Value string HttpsPort HTTPS 端口 [Option(\"HttpsPort\", Description = \"HTTPS 端口\")] public ushort HttpsPort { get; set; } Property Value ushort HubApiHost HubAPI地址 [Option(\"HubApiHost\", Description = \"HubAPI地址\")] [DefaultValue(\"\")] public string HubApiHost { get; set; } Property Value string InnerHost 内部主机地址 [Option(\"InnerHost\", Description = \"内部IP\")] [DefaultValue(\"0.0.0.0\")] public string InnerHost { get; set; } Property Value string InnerPort 内部端口 [Option(\"InnerPort\", Description = \"内部端口\")] [DefaultValue(8888)] public ushort InnerPort { get; set; } Property Value ushort IsDebug 是否是Debug打印日志模式,默认值为false [Option(\"IsDebug\", Description = \"是否是Debug打印日志模式,默认值为false\")] [DefaultValue(false)] public bool IsDebug { get; set; } Property Value bool IsDebugReceive 是否打印接收数据,只有在IsDebug为true时有效,默认值为false [Option(\"IsDebugReceive\", Description = \"是否打印接收数据,只有在IsDebug为true时有效,默认值为false\")] [DefaultValue(false)] public bool IsDebugReceive { get; set; } Property Value bool IsDebugReceiveHeartBeat 是否打印接收的心跳数据,只有在IsDebugReceive为true时有效,默认值为false [Option(\"IsDebugReceiveHeartBeat\", Description = \"是否打印接收的心跳数据,只有在IsDebugReceive为true时有效,默认值为false\")] [DefaultValue(false)] public bool IsDebugReceiveHeartBeat { get; set; } Property Value bool IsDebugSend 是否打印发送数据,只有在IsDebug为true时有效,默认值为false [Option(\"IsDebugSend\", Description = \"是否打印发送数据,只有在IsDebug为true时有效,默认值为false\")] [DefaultValue(false)] public bool IsDebugSend { get; set; } Property Value bool IsDebugSendHeartBeat 是否打印发送的心跳数据,只有在IsDebugSend为true时有效,默认值为false [Option(\"IsDebugSendHeartBeat\", Description = \"是否打印发送的心跳数据,只有在IsDebugSend为true时有效,默认值为false\")] [DefaultValue(false)] public bool IsDebugSendHeartBeat { get; set; } Property Value bool IsEnableWebSocket 是否启用 WebSocket 服务 开启后服务器将监听 WebSocket 端口，允许客户端通过 WebSocket 协议进行连接 默认值为 false，即不启用 [Option(\"IsEnableWebSocket\", Description = \"是否启用 WebSocket 服务，默认值为 false\")] [DefaultValue(false)] public bool IsEnableWebSocket { get; set; } Property Value bool IsMonitorMessageTimeOut 是否监控打印超时日志 [Option(\"IsMonitorMessageTimeOut\", Description = \"是否打印超时日志,默认值为false\")] [DefaultValue(false)] public bool IsMonitorMessageTimeOut { get; set; } Property Value bool IsOpenTelemetry 是否启用OpenTelemetry遥测功能 OpenTelemetry是一个开源的可观测性框架 启用后可以统一管理指标、追踪和日志等可观测性数据 默认值为false [Option(\"IsOpenTelemetry\", Description = \"是否启用OpenTelemetry遥测功能,默认值为false\")] [DefaultValue(false)] public bool IsOpenTelemetry { get; set; } Property Value bool IsOpenTelemetryMetrics 是否启用指标收集功能,需要IsOpenTelemetry为true时有效 用于收集和监控应用程序的性能指标数据 默认值为false [Option(\"IsOpenTelemetryMetrics\", Description = \"是否启用分布式追踪功能,需要 IsOpenTelemetry 为true时有效,默认值为false\")] [DefaultValue(false)] public bool IsOpenTelemetryMetrics { get; set; } Property Value bool IsOpenTelemetryTracing 是否启用分布式追踪功能,需要IsOpenTelemetry为true时有效 用于跟踪和分析分布式系统中的请求流程 默认值为false [Option(\"IsOpenTelemetryTracing\", Description = \"是否启用分布式追踪功能,需要 IsOpenTelemetry为true时有效,默认值为false\")] [DefaultValue(false)] public bool IsOpenTelemetryTracing { get; set; } Property Value bool Label 标签信息-用于描述该服务器的标签信息,没有实际用途,只是方便运维管理 [Option(\"Label\", Description = \"标签信息-用于描述该服务器的标签信息,没有实际用途,只是方便运维管理\")] [DefaultValue(\"\")] [GrafanaLokiLabelTag] public string Label { get; set; } Property Value string Language 语言 [Option(\"Language\", Description = \"语言\")] [GrafanaLokiLabelTag] public string Language { get; set; } Property Value string LogEventLevel 日志输出级别,默认为 Debug。 [Option(\"LogEventLevel\", Description = \"日志输出级别,默认为 Debug,日志级别(可选值：Verbose[详细], Debug[调试], Information[信息], Warning[警告], Error[错误], Fatal[致命])\")] [DefaultValue(LogEventLevel.Debug)] public LogEventLevel LogEventLevel { get; set; } Property Value LogEventLevel Remarks 控制日志输出的最低级别,低于此级别的日志将不会被记录。 LogFileSizeLimitBytes 日志单个文件大小限制,默认为 100MB。 当 IsFileSizeLimit 为 true 时有效。 [Option(\"LogFileSizeLimitBytes\", Description = \"日志单个文件大小限制,默认为 100MB。当 LogIsFileSizeLimit 为 true 时有效。\")] [DefaultValue(104857600)] public int LogFileSizeLimitBytes { get; set; } Property Value int Remarks 当日志文件达到此大小限制时,将创建新的日志文件继续写入。 LogGrafanaLokiPassword GrafanaLoki 密码 [Option(\"LogGrafanaLokiPassword\", Description = \"GrafanaLoki 密码,当LogIsGrafanaLoki为true时生效。\")] public string LogGrafanaLokiPassword { get; set; } Property Value string LogGrafanaLokiUrl GrafanaLoki 服务地址,默认为 http://localhost:3100。 [Option(\"LogGrafanaLokiUrl\", Description = \"GrafanaLoki 服务地址,默认为 http://localhost:3100。当LogIsGrafanaLoki为true时生效。\")] [DefaultValue(\"http://localhost:3100\")] public string LogGrafanaLokiUrl { get; set; } Property Value string LogGrafanaLokiUsername GrafanaLoki 用户名或Email [Option(\"LogGrafanaLokiUsername\", Description = \"GrafanaLoki 用户名或Email,当LogIsGrafanaLoki为true时生效。\")] public string LogGrafanaLokiUsername { get; set; } Property Value string LogIsConsole 是否输出到控制台,默认为 true。 [Option(\"LogGrafanaLokiUsername\", Description = \"是否输出到控制台,默认为 false。\")] [DefaultValue(false)] public bool LogIsConsole { get; set; } Property Value bool Remarks 控制日志是否同时在控制台显示,便于开发调试。 LogIsFileSizeLimit 是否限制单个文件大小,默认为 true。 [Option(\"LogIsFileSizeLimit\", Description = \"是否限制单个文件大小,默认为 true。\")] [DefaultValue(true)] public bool LogIsFileSizeLimit { get; set; } Property Value bool Remarks 启用此选项可以防止单个日志文件过大。 LogIsGrafanaLoki 是否输出到 GrafanaLoki,默认为 false。 [Option(\"LogIsGrafanaLoki\", Description = \"是否输出到 GrafanaLoki,默认为 false。\")] [DefaultValue(false)] public bool LogIsGrafanaLoki { get; set; } Property Value bool LogRetainedFileCountLimit 日志文件保留数量限制 默认为 31 个文件,即 31 天的日志文件 当 设置值为 null 时不限制文件数量 [Option(\"LogRetainedFileCountLimit\", Description = \"日志文件保留数量限制 默认为 31 个文件,即 31 天的日志文件\")] [DefaultValue(31)] public int LogRetainedFileCountLimit { get; set; } Property Value int Remarks 用于控制历史日志文件的数量,防止占用过多磁盘空间。 LogRollingInterval 日志滚动间隔,默认为每天（Day）。 [Option(\"LogRollingInterval\", Description = \"日志滚动间隔,默认为每天(Day),日志滚动间隔(可选值：Minute[分], Hour[时], Day[天], Month[月], Year[年], Infinite[无限])\")] [DefaultValue(RollingInterval.Day)] public RollingInterval LogRollingInterval { get; set; } Property Value RollingInterval Remarks 决定日志文件创建新文件的时间间隔,可以是小时、天、月等。 MaxModuleId 游戏逻辑服务器的处理最大模块ID [Option(\"MaxModuleId\", Description = \"游戏逻辑服务器的处理最大模块ID\")] public short MaxModuleId { get; set; } Property Value short MetricsPort Metrics 端口 [Option(\"MetricsPort\", Description = \"Metrics 端口\")] public ushort MetricsPort { get; set; } Property Value ushort MinModuleId 游戏逻辑服务器的处理最小模块ID [Option(\"MinModuleId\", Description = \"游戏逻辑服务器的处理最小模块ID\")] public short MinModuleId { get; set; } Property Value short MonitorMessageTimeOutSeconds 监控处理器超时时间（秒）,默认值为1秒,只有IsMonitorTimeOut为true时有效 [Option(\"MonitorMessageTimeOutSeconds\", Description = \"处理器超时时间（秒）,默认值为1秒,只有IsMonitorMessageTimeOut为true时有效\")] [DefaultValue(1)] public int MonitorMessageTimeOutSeconds { get; set; } Property Value int NetWorkSendTimeOutSeconds 网络发送等待超时时间（秒）,默认值为5秒 [Option(\"NetWorkSendTimeOutSeconds\", Description = \"网络发送等待超时时间（秒）,默认值为5秒,最小值为1秒\")] [DefaultValue(5)] public int NetWorkSendTimeOutSeconds { get; set; } Property Value int Note 备注信息-用于描述该服务器的备注信息,没有实际用途,只是方便运维管理 [Option(\"Note\", Description = \"备注信息-用于描述该服务器的备注信息,没有实际用途,只是方便运维管理\")] [DefaultValue(\"\")] [GrafanaLokiLabelTag] public string Note { get; set; } Property Value string OuterHost 外部主机地址 [Option(\"OuterHost\", Description = \"外部IP\")] [DefaultValue(\"0.0.0.0\")] public string OuterHost { get; set; } Property Value string OuterPort 外部端口 [Option(\"OuterPort\", Description = \"外部端口\")] public ushort OuterPort { get; set; } Property Value ushort SaveDataBatchCount 保存数据的批量数量长度,默认为500 [Option(\"SaveDataBatchCount\", Description = \"保存数据的批量数量长度,默认为500\")] [DefaultValue(500)] public int SaveDataBatchCount { get; set; } Property Value int SaveDataBatchTimeOut 保存数据的超时时间(毫秒),默认值为30秒 [Option(\"SaveDataBatchTimeOut\", Description = \"保存数据的超时时间(毫秒),默认值为30秒\")] [DefaultValue(30000)] public int SaveDataBatchTimeOut { get; set; } Property Value int SaveDataInterval 保存数据间隔,单位毫秒,默认300秒(5分钟),最小值为5秒(5000毫秒) [Option(\"SaveDataInterval\", Description = \"保存数据间隔,单位毫秒,默认300秒(5分钟),最小值为5秒(5000毫秒)\")] [DefaultValue(300000)] public int SaveDataInterval { get; set; } Property Value int ServerId 服务器ID-如果需要合服，请确保不同服的ServerId一样。不然合服后数据会无法处理用户数据 [Option(\"ServerId\", DefaultValue = 2000, Description = \"服务器ID-如果需要合服，请确保不同服的ServerId一样。不然合服后数据会无法处理用户数据\")] [GrafanaLokiLabelTag] public int ServerId { get; set; } Property Value int ServerInstanceId 服务器实例ID-用于区分同一服务器的不同实例,默认值为0,表示不区分 [Option(\"ServerInstanceId\", Description = \"服务器实例ID-用于区分同一服务器的不同实例\")] [GrafanaLokiLabelTag] public long ServerInstanceId { get; set; } Property Value long ServerType 服务器类型 [Option(\"ServerType\", Required = true, Description = \"服务器类型,当该值无效时,默认为后续所有参数无效\")] [GrafanaLokiLabelTag] public string ServerType { get; set; } Property Value string TagName 标签名称-用于区分不同环境的服务器,没有实际用途,只是方便运维管理 [Option(\"TagName\", Description = \"标签名称-用于区分不同环境的服务器,没有实际用途,只是方便运维管理\")] [DefaultValue(\"\")] [GrafanaLokiLabelTag] public string TagName { get; set; } Property Value string WorkerId 雪花ID的工作ID [Option(\"WorkerId\", Description = \"雪花ID的工作ID,默认为0,表示自动分配\")] public ushort WorkerId { get; set; } Property Value ushort WsPort WebSocket 端口 默认值为 8889，当 IsEnableWebSocket 为 true 时才会启用 [Option(\"WsPort\", DefaultValue = 8889, Description = \"WebSocket 端口，默认值为 8889，当 IsEnableWebSocket 为 true 时才会启用\")] public ushort WsPort { get; set; } Property Value ushort WssCertFilePath Wss 使用的证书路径 [Option(\"WssCertFilePath\", Description = \"Wss 使用的证书路径\")] public string WssCertFilePath { get; set; } Property Value string WssPort WebSocket 加密端口 [Option(\"WssPort\", Description = \"WebSocket 加密端口\")] public ushort WssPort { get; set; } Property Value ushort"
  },
  "api/GameFrameX.StartUp.Options.html": {
    "href": "api/GameFrameX.StartUp.Options.html",
    "title": "Namespace GameFrameX.StartUp.Options | GameFrameX.Server",
    "summary": "Namespace GameFrameX.StartUp.Options Classes LauncherOptions 启动参数"
  },
  "api/GameFrameX.StartUp.StartUpTagAttribute.html": {
    "href": "api/GameFrameX.StartUp.StartUpTagAttribute.html",
    "title": "Class StartUpTagAttribute | GameFrameX.Server",
    "summary": "Class StartUpTagAttribute Namespace GameFrameX.StartUp Assembly GameFrameX.StartUp.dll 启动属性 [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)] public class StartUpTagAttribute : Attribute Inheritance object Attribute StartUpTagAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StartUpTagAttribute(string, int) 构建启动属性 public StartUpTagAttribute(string serverType, int priority = 1000) Parameters serverType string 服务器类型 priority int 优先级，默认为1000 Fields Priority 启动优先级。值越小优先级越高 public readonly int Priority Field Value int ServerType 服务器类型 public readonly string ServerType Field Value string"
  },
  "api/GameFrameX.StartUp.html": {
    "href": "api/GameFrameX.StartUp.html",
    "title": "Namespace GameFrameX.StartUp | GameFrameX.Server",
    "summary": "Namespace GameFrameX.StartUp Classes AppStartUpBase 程序启动器基类 GameApp 程序入口类 StartUpTagAttribute 启动属性"
  },
  "api/GameFrameX.Utility.AssemblyHelper.html": {
    "href": "api/GameFrameX.Utility.AssemblyHelper.html",
    "title": "Class AssemblyHelper | GameFrameX.Server",
    "summary": "Class AssemblyHelper Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 程序集辅助工具类 提供程序集和类型的加载、缓存和查询功能，支持线程安全操作 主要功能： 程序集管理：获取当前应用程序域中的所有已加载程序集 类型发现：查找和缓存程序集中的类型信息 继承关系分析：查找指定类型的实现类、派生类和子类 实例创建：自动实例化符合条件的类型 特性过滤：基于自定义特性标记进行类型筛选 性能特性： 使用 ConcurrentDictionary 提供线程安全的类型缓存 采用 Lazy<T> 实现延迟加载，避免重复的类型扫描 内置异常处理，确保部分程序集加载失败不影响整体功能 适用场景： 插件系统的类型发现和加载 IoC 容器的类型注册和解析 组件化架构的模块扫描 反射操作的性能优化 public static class AssemblyHelper Inheritance object AssemblyHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAssemblies() 获取已加载的程序集 返回当前应用程序域中所有已加载的程序集，包括动态加载的程序集 public static Assembly[] GetAssemblies() Returns Assembly[] 已加载的程序集数组，包含系统程序集和用户程序集 GetRuntimeImplementTypeNames(Type) 获取已加载的程序集中的指定类型的子类列表 核心实现方法，支持接口实现、类继承和类型分配的多种匹配模式 public static List<Type> GetRuntimeImplementTypeNames(Type type) Parameters type Type 指定的基类型或接口类型，不能为 null Returns List<Type> 指定类型的子类列表，包括实现类、派生类和可分配类型 Exceptions ArgumentNullException 当 type 参数为 null 时抛出 GetRuntimeImplementTypeNamesInstance<T>() 获取已加载的程序集中的指定类型的子类实例化列表 自动创建所有实现类型的实例，只实例化具有无参构造函数的类型 public static List<T> GetRuntimeImplementTypeNamesInstance<T>() Returns List<T> 指定类型的子类实例化列表，已排除无法实例化的类型 Type Parameters T 指定的基类型或接口类型 GetRuntimeImplementTypeNames<T>() 获取已加载的程序集中的指定类型的子类列表 泛型版本，提供类型安全的调用方式 public static List<Type> GetRuntimeImplementTypeNames<T>() Returns List<Type> 指定类型的子类列表，包括所有实现类和派生类 Type Parameters T 指定的基类型或接口类型 GetRuntimeImplementTypeNames<T, TAttribute>() 获取已加载的程序集中的指定类型的子类列表，并过滤出具有指定特性的类型 结合类型继承和特性标记进行双重过滤，常用于插件系统和组件发现 public static List<Type> GetRuntimeImplementTypeNames<T, TAttribute>() where TAttribute : Attribute Returns List<Type> 指定类型的子类列表，且这些类型具有指定的特性标记 Type Parameters T 指定的基类型或接口类型 TAttribute 指定的自定义特性标记类型 GetRuntimeTypeNames(Type) 获取已加载的程序集中的指定类型的子类列表，并返回它们的全名 返回类型的完全限定名称，便于序列化、配置和日志记录 public static List<string> GetRuntimeTypeNames(Type type) Parameters type Type 指定的基类型或接口类型 Returns List<string> 指定类型的子类列表的全名字符串集合 GetType(string) 获取已加载的程序集中的指定类型 支持完全限定名和简单类型名，使用缓存机制提高查找性能 public static Type GetType(string typeName) Parameters typeName string 要获取的类型名，支持完全限定名（如 \"System.String\"） Returns Type 已加载的程序集中的指定类型，如果未找到则返回 null Exceptions ArgumentException 当 typeName 参数为 null 或空字符串时抛出 GetTypes() 获取已加载的程序集中的所有类型 使用延迟加载和缓存机制，确保类型信息只被加载一次，提高性能 public static Type[] GetTypes() Returns Type[] 已加载的程序集中的所有类型数组，包括类、接口、枚举、委托等 GetTypes(List<Type>) 获取已加载的程序集中的所有类型，并将结果添加到指定的列表中 此方法会清空目标列表，然后添加所有类型信息 public static void GetTypes(List<Type> results) Parameters results List<Type> 用于存储结果的列表，不能为 null Exceptions ArgumentNullException 当 results 参数为 null 时抛出"
  },
  "api/GameFrameX.Utility.BigInteger.html": {
    "href": "api/GameFrameX.Utility.BigInteger.html",
    "title": "Class BigInteger | GameFrameX.Server",
    "summary": "Class BigInteger Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 表示一个大整数的类，支持多种数学运算和转换。 public sealed class BigInteger Inheritance object BigInteger Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors BigInteger() 初始化一个新的 BigInteger 实例，默认值为 0。 public BigInteger() BigInteger(BigInteger) 使用指定的 BigInteger 实例初始化一个新的 BigInteger 实例。 public BigInteger(BigInteger bi) Parameters bi BigInteger 要复制的 BigInteger 实例。 BigInteger(byte[]) 使用字节数组初始化一个新的 BigInteger 实例。 public BigInteger(byte[] inData) Parameters inData byte[] 包含数字的字节数组。 Exceptions ArithmeticException 当字节溢出时引发。 BigInteger(byte[], int) 使用指定长度的字节数组初始化一个新的 BigInteger 实例。 public BigInteger(byte[] inData, int inLen) Parameters inData byte[] 包含数字的字节数组。 inLen int 字节数组的长度。 Exceptions ArithmeticException 当字节溢出时引发。 BigInteger(long) 使用指定的 long 值初始化一个新的 BigInteger 实例。 public BigInteger(long value) Parameters value long 要初始化的 long 值。 Exceptions ArithmeticException 当发生溢出或下溢时引发。 BigInteger(string, int) 使用指定基数的数字字符串初始化一个新的 BigInteger 实例。 public BigInteger(string value, int radix = 10) Parameters value string 表示数字的字符串。 radix int 基数，范围为 2 到 36。 Remarks 示例 (基数 10) 使用默认值 1234 初始化 \"a\"： BigInteger a = new BigInteger(\"1234\", 10); 使用默认值 -1234 初始化 \"a\"： BigInteger a = new BigInteger(\"-1234\", 10); 示例 (基数 16) 使用默认值 0x1D4F 初始化 \"a\"： BigInteger a = new BigInteger(\"1D4F\", 16); 使用默认值 -0x1D4F 初始化 \"a\"： BigInteger a = new BigInteger(\"-1D4F\", 16); 注意：字符串值应按照指定格式提供。 Exceptions ArithmeticException 当字符串格式无效或发生溢出时引发。 BigInteger(uint[]) 使用无符号整数数组初始化一个新的 BigInteger 实例。 public BigInteger(uint[] inData) Parameters inData uint[] 无符号整数数组，表示大整数的值。 Exceptions ArithmeticException 当输入数据的长度超过最大长度时引发。 BigInteger(ulong) 使用指定的 ulong 值初始化一个新的 BigInteger 实例。 public BigInteger(ulong value) Parameters value ulong 要初始化的 ulong 值。 Exceptions ArithmeticException 当发生溢出时引发。 Fields dataLength 实际使用的字符数 public int dataLength Field Value int primesBelow2000 小于 2000 的素数数组，用于测试生成的素数。 public static readonly int[] primesBelow2000 Field Value int[] Methods BitCount() bitCount public int BitCount() Returns int CompareTo(BigInteger) 比较当前 BigInteger 实例与另一个 BigInteger 实例的大小。 public int CompareTo(BigInteger other) Parameters other BigInteger 要比较的另一个 BigInteger 实例。 Returns int 如果当前实例大于 other，则返回 1；如果小于，则返回 -1；否则返回 0。 Equals(object) 重写 Equals(object) 方法。 public override bool Equals(object o) Parameters o object 要比较的对象。 Returns bool 如果当前实例与 o 相等，则返回 true；否则返回 false。 FermatLittleTest(int) 概率素数测试 public bool FermatLittleTest(int confidence) Parameters confidence int Returns bool Gcd(BigInteger) 返回当前对象和指定对象的最大公约数 public BigInteger Gcd(BigInteger bi) Parameters bi BigInteger 要比较的对象 Returns BigInteger 返回最大公约数 GenCoPrime(int, Random) 生成一个具有指定位数的随机数，使得 gcd(number, this) = 1 public BigInteger GenCoPrime(int bits, Random rand) Parameters bits int 位数 rand Random 随机数生成器 Returns BigInteger 生成的互质的 BigInteger GenPseudoPrime(int, int, Random) 生成一个可能是素数的正 BigInteger。 public static BigInteger GenPseudoPrime(int bits, int confidence, Random rand) Parameters bits int 位数 confidence int 置信度 rand Random 随机数生成器 Returns BigInteger 生成的可能是素数的 BigInteger GenRandomBits(int, Random) 用指定数量的随机位填充当前对象 public void GenRandomBits(int bits, Random rand) Parameters bits int 要生成的位数 rand Random 随机数生成器 Exceptions ArithmeticException 当所需位数超过最大长度时抛出异常 GetBytes() 返回 BigInteger 的字节数组。最低索引包含 MSB。 public byte[] GetBytes() Returns byte[] 字节数组 GetHashCode() 作为默认哈希函数。 public override int GetHashCode() Returns int 当前对象的哈希代码。 IntValue() 返回 BigInteger 的最低 4 个字节作为 int。 public int IntValue() Returns int 最低 4 个字节的整数值 IsProbablePrime() 确定这个 BigInteger 是否可能是素数 public bool IsProbablePrime() Returns bool 如果是可能的素数则返回 true，否则返回 false IsProbablePrime(int) 确定一个数字是否可能是素数，使用拉宾-米勒的测试 public bool IsProbablePrime(int confidence) Parameters confidence int 置信度，表示随机选择的基数数量 Returns bool 如果数字可能是素数则返回 true，否则返回 false Jacobi(BigInteger, BigInteger) 计算 a 和 b 的雅可比符号。算法改编自 [3] 和 [4]，并进行了优化 public static int Jacobi(BigInteger a, BigInteger b) Parameters a BigInteger 第一个参数 b BigInteger 第二个参数 Returns int 雅可比符号的值 Exceptions ArgumentException 如果 b 不是奇数则抛出异常 LongValue() 返回 BigInteger 的最低 8 个字节作为 long。 public long LongValue() Returns long 最低 8 个字节的长整型值 LucasSequence(BigInteger, BigInteger, BigInteger, BigInteger) 返回 Lucas 序列中第 k 个数字，模 n 计算 public static BigInteger[] LucasSequence(BigInteger P, BigInteger Q, BigInteger k, BigInteger n) Parameters P BigInteger 参数 P Q BigInteger 参数 Q k BigInteger 索引 k n BigInteger 模数 n Returns BigInteger[] Lucas 序列的第 k 个数字 LucasStrongTest() 实现卢卡斯强伪素数测试 public bool LucasStrongTest() Returns bool 如果是强卢卡斯伪素数则返回 true，否则返回 false ModInverse(BigInteger) 返回这个的模逆。如果逆不存在则抛出 ArithmeticException。 （即 gcd(this, modulus) != 1） public BigInteger ModInverse(BigInteger modulus) Parameters modulus BigInteger 模数 Returns BigInteger 模逆 Exceptions ArithmeticException 如果逆不存在则抛出异常 ModPow(BigInteger, BigInteger) 模幂运算 public BigInteger ModPow(BigInteger exp, BigInteger n) Parameters exp BigInteger 指数 n BigInteger 模数 Returns BigInteger 返回模幂运算的结果 Exceptions ArithmeticException 当指数为负时抛出异常 RabinMillerTest(int) 拉宾-米勒素数测试 public bool RabinMillerTest(int confidence) Parameters confidence int 置信度，表示随机选择的基数数量 Returns bool 如果 \"this\" 是强伪素数则返回 true，否则返回 false SetBit(uint) 将指定的位的值设置为 1。最低有效位位置为 0。 public void SetBit(uint bitNum) Parameters bitNum uint 位编号 SolovayStrassenTest(int) 索洛维-斯特拉森素数测试 public bool SolovayStrassenTest(int confidence) Parameters confidence int 置信度，表示随机选择的基数数量 Returns bool 如果 \"this\" 是欧拉伪素数则返回 true，否则返回 false Sqrt() 返回与整数平方根等效的值 public BigInteger Sqrt() Returns BigInteger 整数平方根的值 ToHexString() 返回表示 BigInteger 内容的十六进制字符串 public string ToHexString() Returns string 返回十六进制字符串 ToString() 返回表示当前 BigInteger 的十进制字符串 public override string ToString() Returns string 返回十进制字符串 ToString(int) 返回表示当前 BigInteger 在指定基数下的字符串 public string ToString(int radix) Parameters radix int 基数，范围在 2 到 36 之间 Returns string 返回指定基数的字符串表示 Exceptions ArgumentException 当基数不在有效范围内时抛出异常 UnsetBit(uint) 将指定的位的值设置为 0。最低有效位位置为 0。 public void UnsetBit(uint bitNum) Parameters bitNum uint 位编号 abs() 返回当前对象的绝对值 public BigInteger abs() Returns BigInteger 返回绝对值 max(BigInteger) 返回当前对象和指定对象的较大值 public BigInteger max(BigInteger bi) Parameters bi BigInteger 要比较的对象 Returns BigInteger 返回较大值 min(BigInteger) 返回当前对象和指定对象的较小值 public BigInteger min(BigInteger bi) Parameters bi BigInteger 要比较的对象 Returns BigInteger 返回较小值 Operators operator +(BigInteger, BigInteger) 重载加法运算符。 public static BigInteger operator +(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger 第一个 BigInteger 实例。 bi2 BigInteger 第二个 BigInteger 实例。 Returns BigInteger 两个 BigInteger 实例的和。 Exceptions ArithmeticException 当加法溢出时引发。 operator &(BigInteger, BigInteger) 重载按位与运算符 public static BigInteger operator &(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger 第一个操作数 bi2 BigInteger 第二个操作数 Returns BigInteger 返回按位与的结果 operator |(BigInteger, BigInteger) 重载按位或运算符 public static BigInteger operator |(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger 第一个操作数 bi2 BigInteger 第二个操作数 Returns BigInteger 返回按位或的结果 operator --(BigInteger) 重载一元自减运算符。 public static BigInteger operator --(BigInteger bi1) Parameters bi1 BigInteger 要自减的 BigInteger 实例。 Returns BigInteger 自减后的 BigInteger 实例。 Exceptions ArithmeticException 当自减溢出时引发。 operator /(BigInteger, BigInteger) 重载除法运算符 public static BigInteger operator /(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger 被除数 bi2 BigInteger 除数 Returns BigInteger 返回商 operator ==(BigInteger, BigInteger) 重载相等运算符。 public static bool operator ==(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger 第一个 BigInteger 实例。 bi2 BigInteger 第二个 BigInteger 实例。 Returns bool 如果两个 BigInteger 实例相等，则返回 true；否则返回 false。 operator ^(BigInteger, BigInteger) 重载按位异或运算符 public static BigInteger operator ^(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger 第一个操作数 bi2 BigInteger 第二个操作数 Returns BigInteger 返回按位异或的结果 operator >(BigInteger, BigInteger) 重载大于运算符。 public static bool operator >(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger 第一个 BigInteger 实例。 bi2 BigInteger 第二个 BigInteger 实例。 Returns bool 如果 bi1 大于 bi2，则返回 true；否则返回 false。 operator >=(BigInteger, BigInteger) 重载大于等于运算符。 public static bool operator >=(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger 第一个 BigInteger 实例。 bi2 BigInteger 第二个 BigInteger 实例。 Returns bool 如果 bi1 大于或等于 bi2，则返回 true；否则返回 false。 implicit operator BigInteger(int) 将 int 类型的值隐式转换为 BigInteger。 public static implicit operator BigInteger(int value) Parameters value int 要转换的 int 值。 Returns BigInteger 转换后的 BigInteger 实例。 implicit operator BigInteger(long) 将 long 类型的值隐式转换为 BigInteger。 public static implicit operator BigInteger(long value) Parameters value long 要转换的 long 值。 Returns BigInteger 转换后的 BigInteger 实例。 implicit operator BigInteger(uint) 将 uint 类型的值隐式转换为 BigInteger。 public static implicit operator BigInteger(uint value) Parameters value uint 要转换的 uint 值。 Returns BigInteger 转换后的 BigInteger 实例。 implicit operator BigInteger(ulong) 将 ulong 类型的值隐式转换为 BigInteger。 public static implicit operator BigInteger(ulong value) Parameters value ulong 要转换的 ulong 值。 Returns BigInteger 转换后的 BigInteger 实例。 operator ++(BigInteger) 重载一元自增运算符。 public static BigInteger operator ++(BigInteger bi1) Parameters bi1 BigInteger 要自增的 BigInteger 实例。 Returns BigInteger 自增后的 BigInteger 实例。 Exceptions ArithmeticException 当自增溢出时引发。 operator !=(BigInteger, BigInteger) 重载不相等运算符。 public static bool operator !=(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger 第一个 BigInteger 实例。 bi2 BigInteger 第二个 BigInteger 实例。 Returns bool 如果两个 BigInteger 实例不相等，则返回 true；否则返回 false。 operator <<(BigInteger, int) 重载左移运算符。 public static BigInteger operator <<(BigInteger bi1, int shiftVal) Parameters bi1 BigInteger 要左移的 BigInteger 实例。 shiftVal int 左移的位数。 Returns BigInteger 左移后的 BigInteger 实例。 operator <(BigInteger, BigInteger) 重载小于运算符。 public static bool operator <(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger 第一个 BigInteger 实例。 bi2 BigInteger 第二个 BigInteger 实例。 Returns bool 如果 bi1 小于 bi2，则返回 true；否则返回 false。 operator <=(BigInteger, BigInteger) 重载小于等于运算符。 public static bool operator <=(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger 第一个 BigInteger 实例。 bi2 BigInteger 第二个 BigInteger 实例。 Returns bool 如果 bi1 小于或等于 bi2，则返回 true；否则返回 false。 operator %(BigInteger, BigInteger) 重载取模运算符 public static BigInteger operator %(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger 被取模数 bi2 BigInteger 模数 Returns BigInteger 返回余数 operator *(BigInteger, BigInteger) 重载乘法运算符。 public static BigInteger operator *(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger 第一个 BigInteger 实例。 bi2 BigInteger 第二个 BigInteger 实例。 Returns BigInteger 两个 BigInteger 实例的乘积。 Exceptions ArithmeticException 当乘法溢出时引发。 operator ~(BigInteger) 重载按位取反运算符（1 的补码）。 public static BigInteger operator ~(BigInteger bi1) Parameters bi1 BigInteger 要取反的 BigInteger 实例。 Returns BigInteger 取反后的 BigInteger 实例。 operator >>(BigInteger, int) 重载右移运算符。 public static BigInteger operator >>(BigInteger bi1, int shiftVal) Parameters bi1 BigInteger 要右移的 BigInteger 实例。 shiftVal int 右移的位数。 Returns BigInteger 右移后的 BigInteger 实例。 operator -(BigInteger, BigInteger) 重载减法运算符。 public static BigInteger operator -(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger 第一个 BigInteger 实例。 bi2 BigInteger 第二个 BigInteger 实例。 Returns BigInteger 两个 BigInteger 实例的差。 Exceptions ArithmeticException 当减法溢出时引发。 operator -(BigInteger) 重载取负运算符（2 的补码）。 public static BigInteger operator -(BigInteger bi1) Parameters bi1 BigInteger 要取负的 BigInteger 实例。 Returns BigInteger 取负后的 BigInteger 实例。 Exceptions ArithmeticException 当取负溢出时引发。"
  },
  "api/GameFrameX.Utility.CompressionHelper.html": {
    "href": "api/GameFrameX.Utility.CompressionHelper.html",
    "title": "Class CompressionHelper | GameFrameX.Server",
    "summary": "Class CompressionHelper Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 压缩解压缩辅助器。 public static class CompressionHelper Inheritance object CompressionHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Compress(byte[]) 压缩数据。使用Deflate算法将原始字节数组压缩成更小的字节数组。 public static byte[] Compress(byte[] bytes) Parameters bytes byte[] 要压缩的原始字节数组。不能为null。 Returns byte[] 压缩后的字节数组。如果输入为空数组，则直接返回该空数组。如果压缩过程中发生异常，则返回原始数组。 Exceptions ArgumentNullException 当输入参数bytes为null时抛出。 Decompress(byte[]) 解压数据。使用Inflate算法将压缩的字节数组还原成原始字节数组。 public static byte[] Decompress(byte[] bytes) Parameters bytes byte[] 要解压的压缩字节数组。不能为null。 Returns byte[] 解压后的原始字节数组。如果输入为空数组，则直接返回该空数组。如果解压过程中发生异常，则返回原始数组。 Exceptions ArgumentNullException 当输入参数bytes为null时抛出。 InvalidDataException 当压缩数据格式无效或已损坏时抛出。"
  },
  "api/GameFrameX.Utility.ConsoleHelper.html": {
    "href": "api/GameFrameX.Utility.ConsoleHelper.html",
    "title": "Class ConsoleHelper | GameFrameX.Server",
    "summary": "Class ConsoleHelper Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 控制台辅助器 public static class ConsoleHelper Inheritance object ConsoleHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConsoleLogo() 打印控制台logo public static void ConsoleLogo()"
  },
  "api/GameFrameX.Utility.EnvironmentHelper.html": {
    "href": "api/GameFrameX.Utility.EnvironmentHelper.html",
    "title": "Class EnvironmentHelper | GameFrameX.Server",
    "summary": "Class EnvironmentHelper Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 环境帮助器 public static class EnvironmentHelper Inheritance object EnvironmentHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetEnvironmentName() 获取当前运行环境名称 优先获取 ASPNETCORE_ENVIRONMENT 环境变量，如果不存在则获取 DOTNET_ENVIRONMENT 环境变量 public static string GetEnvironmentName() Returns string 返回当前环境名称，如果未设置环境变量则返回null IsDevelopment() 判断是否为开发环境 通过检查环境变量 ASPNETCORE_ENVIRONMENT 或 DOTNET_ENVIRONMENT 的值是否为 Development public static bool IsDevelopment() Returns bool 如果是开发环境返回true，否则返回false IsDocker() 判断当前应用是否运行在Docker容器中 通过检查环境变量 DOTNET_RUNNING_IN_CONTAINER 是否存在来判断 public static bool IsDocker() Returns bool 如果在Docker容器中运行返回true，否则返回false IsEnvironment(string) 判断是否为任意自定义环境 通过检查环境变量 ASPNETCORE_ENVIRONMENT 或 DOTNET_ENVIRONMENT 的值是否与指定环境名称匹配 public static bool IsEnvironment(string environmentName) Parameters environmentName string 要检查的环境名称 Returns bool 如果当前环境与指定环境名称匹配返回true，否则返回false IsKubernetes() 判断当前应用是否运行在Kubernetes集群中 通过检查环境变量 KUBERNETES_SERVICE_HOST 是否存在来判断 public static bool IsKubernetes() Returns bool 如果在Kubernetes集群中运行返回true，否则返回false IsProduction() 判断是否为生产环境 通过检查环境变量 ASPNETCORE_ENVIRONMENT 或 DOTNET_ENVIRONMENT 的值是否为 Production public static bool IsProduction() Returns bool 如果是生产环境返回true，否则返回false IsStaging() 判断是否为测试/预发布环境 通过检查环境变量 ASPNETCORE_ENVIRONMENT 或 DOTNET_ENVIRONMENT 的值是否为 Staging public static bool IsStaging() Returns bool 如果是测试/预发布环境返回true，否则返回false"
  },
  "api/GameFrameX.Utility.Extensions.ExpressionExtension.html": {
    "href": "api/GameFrameX.Utility.Extensions.ExpressionExtension.html",
    "title": "Class ExpressionExtension | GameFrameX.Server",
    "summary": "Class ExpressionExtension Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 提供对 Expression 类型的扩展方法，用于组合和操作表达式树。 public static class ExpressionExtension Inheritance object ExpressionExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AndIf<T>(Expression<Func<T, bool>>, Func<bool>, Expression<Func<T, bool>>) 根据条件将两个表达式进行逻辑与运算，使用短路求值。 当条件为false时，仅返回左表达式；当条件为true时，返回两个表达式的逻辑与运算结果。 public static Expression<Func<T, bool>> AndIf<T>(this Expression<Func<T, bool>> leftExpression, Func<bool> condition, Expression<Func<T, bool>> rightExpression) Parameters leftExpression Expression<Func<T, bool>> 第一个表达式，作为逻辑与运算的左操作数。 condition Func<bool> 决定是否执行逻辑与运算的条件委托。 rightExpression Expression<Func<T, bool>> 第二个表达式，作为逻辑与运算的右操作数。 Returns Expression<Func<T, bool>> 当条件为true时返回两个表达式的逻辑与运算结果，否则返回左表达式。 Type Parameters T 表达式的参数类型。 Exceptions ArgumentNullException 当任何参数为null时抛出。 And<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>) 将两个表达式进行逻辑与运算，使用短路求值。 public static Expression<Func<T, bool>> And<T>(this Expression<Func<T, bool>> leftExpression, Expression<Func<T, bool>> rightExpression) Parameters leftExpression Expression<Func<T, bool>> 第一个表达式，作为逻辑与运算的左操作数。 rightExpression Expression<Func<T, bool>> 第二个表达式，作为逻辑与运算的右操作数。 Returns Expression<Func<T, bool>> 一个新的表达式，表示两个输入表达式的逻辑与运算结果。 Type Parameters T 表达式的参数类型。 Exceptions ArgumentNullException 当 leftExpression 或 rightExpression 为 null 时抛出。 Not<T>(Expression<Func<T, bool>>) 对表达式进行逻辑非运算，对表达式的结果取反。 public static Expression<Func<T, bool>> Not<T>(this Expression<Func<T, bool>> expr) Parameters expr Expression<Func<T, bool>> 要进行逻辑非运算的表达式。 Returns Expression<Func<T, bool>> 一个新的表达式，表示输入表达式的逻辑非运算结果。 Type Parameters T 表达式的参数类型。 Remarks 如果输入表达式为 x => x > 5，则输出表达式为 x => !(x > 5)，等价于 x => x <= 5。 Exceptions ArgumentNullException 当 expr 为 null 时抛出。 OrIf<T>(Expression<Func<T, bool>>, Func<bool>, Expression<Func<T, bool>>) 根据条件将两个表达式进行逻辑或运算，使用短路求值。 当条件为false时，仅返回左表达式；当条件为true时，返回两个表达式的逻辑或运算结果。 public static Expression<Func<T, bool>> OrIf<T>(this Expression<Func<T, bool>> leftExpression, Func<bool> condition, Expression<Func<T, bool>> rightExpression) Parameters leftExpression Expression<Func<T, bool>> 第一个表达式，作为逻辑或运算的左操作数。 condition Func<bool> 决定是否执行逻辑或运算的条件委托。 rightExpression Expression<Func<T, bool>> 第二个表达式，作为逻辑或运算的右操作数。 Returns Expression<Func<T, bool>> 当条件为true时返回两个表达式的逻辑或运算结果，否则返回左表达式。 Type Parameters T 表达式的参数类型。 Exceptions ArgumentNullException 当任何参数为null时抛出。 Or<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>) 将两个表达式进行逻辑或运算，使用短路求值。 public static Expression<Func<T, bool>> Or<T>(this Expression<Func<T, bool>> leftExpression, Expression<Func<T, bool>> rightExpression) Parameters leftExpression Expression<Func<T, bool>> 第一个表达式，作为逻辑或运算的左操作数。 rightExpression Expression<Func<T, bool>> 第二个表达式，作为逻辑或运算的右操作数。 Returns Expression<Func<T, bool>> 一个新的表达式，表示两个输入表达式的逻辑或运算结果。 Type Parameters T 表达式的参数类型。 Exceptions ArgumentNullException 当 leftExpression 或 rightExpression 为 null 时抛出。"
  },
  "api/GameFrameX.Utility.Extensions.ExpressionVisitorCustom.html": {
    "href": "api/GameFrameX.Utility.Extensions.ExpressionVisitorCustom.html",
    "title": "Class ExpressionVisitorCustom | GameFrameX.Server",
    "summary": "Class ExpressionVisitorCustom Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 表达式访问器的自定义实现。 public class ExpressionVisitorCustom : ExpressionVisitor Inheritance object ExpressionVisitor ExpressionVisitorCustom Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitMethodCall(MethodCallExpression) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExpressionVisitorCustom(ParameterExpression) 初始化 ExpressionVisitorCustom 类的新实例。 public ExpressionVisitorCustom(ParameterExpression param) Parameters param ParameterExpression 访问器中的参数表达式。不能为 null。 Exceptions ArgumentNullException 当 param 为 null 时抛出。 Properties Parameter 获取或设置访问器中的参数表达式。 public ParameterExpression Parameter { get; } Property Value ParameterExpression Methods VisitLambda<T>(Expression<T>) 访问Lambda表达式，正确处理参数替换。 protected override Expression VisitLambda<T>(Expression<T> node) Parameters node Expression<T> 要访问的Lambda表达式。 Returns Expression 返回访问后的Lambda表达式。 Type Parameters T Lambda表达式的委托类型。 VisitParameter(ParameterExpression) 访问参数表达式。 protected override Expression VisitParameter(ParameterExpression node) Parameters node ParameterExpression 要访问的参数表达式。 Returns Expression 返回访问后的表达式。"
  },
  "api/GameFrameX.Utility.Extensions.TimerExtension.html": {
    "href": "api/GameFrameX.Utility.Extensions.TimerExtension.html",
    "title": "Class TimerExtension | GameFrameX.Server",
    "summary": "Class TimerExtension Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll Timer 扩展方法类 public static class TimerExtension Inheritance object TimerExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Reset(Timer) 重置计时器，停止当前计时并重新开始 public static void Reset(this Timer timer) Parameters timer Timer 要重置的计时器实例 Examples var timer = new Timer(1000); // 1秒间隔 timer.Start(); // ... 一段时间后 timer.Reset(); // 重置计时器，重新开始计时 Remarks 此方法会先停止计时器，然后重新启动它，相当于重置计时器的计时周期。 计时器的配置（如间隔时间、自动重置设置等）将保持不变。 Exceptions ArgumentNullException 当 timer 为 null 时抛出此异常 ObjectDisposedException 当 timer 已被释放时抛出此异常"
  },
  "api/GameFrameX.Utility.Extensions.html": {
    "href": "api/GameFrameX.Utility.Extensions.html",
    "title": "Namespace GameFrameX.Utility.Extensions | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Utility.Extensions Classes ExpressionExtension 提供对 Expression 类型的扩展方法，用于组合和操作表达式树。 ExpressionVisitorCustom 表达式访问器的自定义实现。 TimerExtension Timer 扩展方法类"
  },
  "api/GameFrameX.Utility.IdGenerator.html": {
    "href": "api/GameFrameX.Utility.IdGenerator.html",
    "title": "Class IdGenerator | GameFrameX.Server",
    "summary": "Class IdGenerator Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll ID生成器，提供多种生成唯一标识符的方法，包括整数ID、长整数ID和字符串ID public static class IdGenerator Inheritance object IdGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields UtcTimeStart 全局UTC起始时间，用作计数器的基准时间点 设置为2020年1月1日0时0分0秒(UTC) public static readonly DateTime UtcTimeStart Field Value DateTime Methods GetNextUniqueId() 使用雪花算法生成唯一的长整数ID 基于Yitter.IdGenerator实现，提供分布式环境下的唯一ID生成 public static long GetNextUniqueId() Returns long 返回下一个唯一的长整数ID，保证全局唯一性 Exceptions InvalidOperationException 当YitIdHelper初始化失败时抛出此异常 GetNextUniqueIntId() 使用Interlocked.Increment生成唯一的整数ID 通过原子操作确保线程安全 public static int GetNextUniqueIntId() Returns int 返回下一个唯一的整数ID，保证递增且不重复 GetUniqueIdString() 生成一个全局唯一的GUID字符串 移除了GUID中的连字符，返回32位的十六进制字符串 public static string GetUniqueIdString() Returns string 返回一个32位的十六进制字符串格式的GUID，不包含连字符"
  },
  "api/GameFrameX.Utility.IllegalWordDetection.html": {
    "href": "api/GameFrameX.Utility.IllegalWordDetection.html",
    "title": "Class IllegalWordDetection | GameFrameX.Server",
    "summary": "Class IllegalWordDetection Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 此算法思想来源于“http://www.cnblogs.com/sumtec/archive/2008/02/01/1061742.html”,经测试，检测\"屄defg东正教dsa SofU ckd臺灣青年獨\"这个字符串并替换掉敏感词平均花费2.7ms public sealed class IllegalWordDetection Inheritance object IllegalWordDetection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods DetectIllegalWords(string, bool, out Dictionary<int, int>) 判断text是否有敏感词汇,如果有返回敏感的词汇的位置,利用指针操作来加快运算速度 public static bool DetectIllegalWords(string text, bool returnWhenFindFirst, out Dictionary<int, int> findResult) Parameters text string 敏感词查询文本 returnWhenFindFirst bool 是否返回找到的第一个 findResult Dictionary<int, int> 查找到的敏感词结果 Returns bool 是否有敏感词汇 Filter(string, char) 过滤字符串,默认遇到敏感词汇就以'*'代替 public static string Filter(string text, char mask = '*') Parameters text string 要查询的明感词文本 mask char 替换目标字符 Returns string 返回过滤后的文本 HasBlockWords(string) 判断text是否有敏感词汇 public static bool HasBlockWords(string text) Parameters text string Returns bool Init(byte[], int, bool) 通过配置表初始化 public static void Init(byte[] badData, int badIdx = 1, bool backThread = true) Parameters badData byte[] 配置表数据 badIdx int 字段idx，字段类型必须是string（从0开始） backThread bool 是否新开线程执行 Init(string[], bool) 初始化敏感词 public static void Init(string[] badWords, bool backThread = true) Parameters badWords string[] 敏感词列表 backThread bool 是否新开线程执行"
  },
  "api/GameFrameX.Utility.LNumber.html": {
    "href": "api/GameFrameX.Utility.LNumber.html",
    "title": "Struct LNumber | GameFrameX.Server",
    "summary": "Struct LNumber Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll public struct LNumber : IComparable<LNumber>, IEquatable<LNumber> Implements IComparable<LNumber> IEquatable<LNumber> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields FMax public const long FMax = 9999 Field Value long FRACTION_BITS public const int FRACTION_BITS = 14 Field Value int Max public const long Max = 562949953421311 Field Value long MaxValue public static readonly LNumber MaxValue Field Value LNumber MinValue 最小值 public static readonly LNumber MinValue Field Value LNumber Raw public long Raw Field Value long Zero 0 public static readonly LNumber Zero Field Value LNumber epsilon 1 public static readonly LNumber epsilon Field Value LNumber minus_one -1 public static readonly LNumber minus_one Field Value LNumber one 1 public static readonly LNumber one Field Value LNumber zero 0 public static readonly LNumber zero Field Value LNumber Properties Ceiling 天花板数 public long Ceiling { get; } Property Value long Floor 地板数 public long Floor { get; } Property Value long Methods CompareTo(LNumber) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(LNumber other) Parameters other LNumber An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Create(long, long) public static LNumber Create(long i, long f) Parameters i long f long Returns LNumber Create_Row(long) public static LNumber Create_Row(long i) Parameters i long Returns LNumber Equals(LNumber) 判断是否相等 public bool Equals(LNumber other) Parameters other LNumber Returns bool Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() 获取哈希 public override int GetHashCode() Returns int ToString() 转为字符串 public override string ToString() Returns string ToString(string) 格式化 public string ToString(string str) Parameters str string Returns string Operators operator +(LNumber, LNumber) 二元操作符 + public static LNumber operator +(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns LNumber operator /(LNumber, LNumber) 二元操作符 / public static LNumber operator /(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns LNumber operator ==(LNumber, LNumber) 比较运算符 == public static bool operator ==(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns bool explicit operator double(LNumber) double类型转换 public static explicit operator double(LNumber number) Parameters number LNumber Returns double explicit operator long(LNumber) long类型转换 public static explicit operator long(LNumber number) Parameters number LNumber Returns long operator >(LNumber, LNumber) 比较运算符 > public static bool operator >(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns bool operator >=(LNumber, LNumber) 比较运算符 >= public static bool operator >=(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns bool implicit operator float(LNumber) float 类型转换 public static implicit operator float(LNumber number) Parameters number LNumber Returns float implicit operator LNumber(int) 赋值运算 public static implicit operator LNumber(int value) Parameters value int Returns LNumber implicit operator LNumber(long) 赋值运算 public static implicit operator LNumber(long value) Parameters value long Returns LNumber operator !=(LNumber, LNumber) 比较运算符 != public static bool operator !=(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns bool operator <(LNumber, LNumber) 比较运算符 小于 public static bool operator <(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns bool operator <=(LNumber, LNumber) 比较运算符 小于等于 public static bool operator <=(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns bool operator %(LNumber, LNumber) 二元操作符 % public static LNumber operator %(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns LNumber operator *(LNumber, LNumber) 二元操作符 * public static LNumber operator *(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns LNumber operator -(LNumber, LNumber) 二元操作符 - public static LNumber operator -(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns LNumber operator -(LNumber) 一元操作符 - (负数操作) public static LNumber operator -(LNumber x) Parameters x LNumber Returns LNumber"
  },
  "api/GameFrameX.Utility.Math.FP.html": {
    "href": "api/GameFrameX.Utility.Math.FP.html",
    "title": "Struct FP | GameFrameX.Server",
    "summary": "Struct FP Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll 表示 Q31.32 固定点数。 [Serializable] public struct FP : IEquatable<FP>, IComparable<FP> Implements IEquatable<FP> IComparable<FP> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FP(int) 从整型值创建 FP 对象。 public FP(int value) Parameters value int Fields AcosLut 余弦查找表。 public static readonly long[] AcosLut Field Value long[] Deg2Rad 将角度转换为弧度的固定点数实例。 public static readonly FP Deg2Rad Field Value FP EN1 表示 0.1 的固定点数实例。 public static readonly FP EN1 Field Value FP EN2 表示 0.01 的固定点数实例。 public static readonly FP EN2 Field Value FP EN3 表示 0.001 的固定点数实例。 public static readonly FP EN3 Field Value FP EN4 表示 0.0001 的固定点数实例。 public static readonly FP EN4 Field Value FP EN5 表示 0.00001 的固定点数实例。 public static readonly FP EN5 Field Value FP EN6 表示 0.000001 的固定点数实例。 public static readonly FP EN6 Field Value FP EN7 表示 0.0000001 的固定点数实例。 public static readonly FP EN7 Field Value FP EN8 表示 0.00000001 的固定点数实例。 public static readonly FP EN8 Field Value FP Epsilon 表示最小精度的固定点数实例。 public static readonly FP Epsilon Field Value FP FRACTIONAL_PLACES 小数位数。 public const int FRACTIONAL_PLACES = 32 Field Value int HALF 表示 0.5 的固定点数值。 public const long HALF = 2147483648 Field Value long Half 表示 0.5 的固定点数实例。 public static readonly FP Half Field Value FP LN2 表示自然对数的底数 2 的对数的固定点数值。 public const long LN2 = 2977044471 Field Value long LOG2MAX 表示 2 的最大对数的固定点数值。 public const long LOG2MAX = 133143986176 Field Value long LOG2MIN 表示 2 的最小对数的固定点数值。 public const long LOG2MIN = -137438953472 Field Value long LUT_SIZE 查找表的大小。 public const int LUT_SIZE = 205887 Field Value int Ln2 表示自然对数的底数 2 的对数的固定点数实例。 public static readonly FP Ln2 Field Value FP Log2Max 表示 2 的最大对数的固定点数实例。 public static readonly FP Log2Max Field Value FP Log2Min 表示 2 的最小对数的固定点数实例。 public static readonly FP Log2Min Field Value FP LutInterval 查找表的间隔。 public static readonly FP LutInterval Field Value FP MAX_VALUE 固定点数的最大值。 public const long MAX_VALUE = 9223372036854775807 Field Value long MIN_VALUE 固定点数的最小值。 public const long MIN_VALUE = -9223372036854775808 Field Value long MaxValue 固定点数的最大值实例。 public static readonly FP MaxValue Field Value FP MinValue 固定点数的最小值实例。 public static readonly FP MinValue Field Value FP NUM_BITS 固定点数的位数。 public const int NUM_BITS = 64 Field Value int NaN 表示 NaN 的固定点数实例。 public static readonly FP NaN Field Value FP NegativeInfinity 表示负无穷大的固定点数实例。 public static readonly FP NegativeInfinity Field Value FP ONE 表示 1 的固定点数值。 public const long ONE = 4294967296 Field Value long One 表示 1 的固定点数实例。 public static readonly FP One Field Value FP PI 表示 π 的固定点数值。 public const long PI = 13493037704 Field Value long PI_OVER_2 表示 π/2 的固定点数值。 public const long PI_OVER_2 = 6746518852 Field Value long PI_TIMES_2 表示 2π 的固定点数值。 public const long PI_TIMES_2 = 26986075409 Field Value long Pi 表示 π 的固定点数实例。 public static readonly FP Pi Field Value FP PiInv 表示 π 的倒数的固定点数实例。 public static readonly FP PiInv Field Value FP PiOver2 表示 π/2 的固定点数实例。 public static readonly FP PiOver2 Field Value FP PiOver2Inv 表示 π/2 的倒数的固定点数实例。 public static readonly FP PiOver2Inv Field Value FP PiTimes2 表示 2π 的固定点数实例。 public static readonly FP PiTimes2 Field Value FP PositiveInfinity 表示正无穷大的固定点数实例。 public static readonly FP PositiveInfinity Field Value FP Precision 此类型的精度。 public static readonly decimal Precision Field Value decimal Rad2Deg 将弧度转换为角度的固定点数实例。 public static readonly FP Rad2Deg Field Value FP SinLut 正弦查找表 public static readonly long[] SinLut Field Value long[] TEN 表示 10 的固定点数值。 public const long TEN = 42949672960 Field Value long TanLut 用于计算正切的 LUT。 public static readonly long[] TanLut Field Value long[] Ten 表示 10 的固定点数实例。 public static readonly FP Ten Field Value FP Zero 表示 0 的固定点数实例。 public static readonly FP Zero Field Value FP _serializedValue 原始值 public long _serializedValue Field Value long Properties RawValue 获取底层整数表示。 public long RawValue { get; } Property Value long Methods Abs(FP) 返回 Fix64 数字的绝对值。 注意：Abs(Fix64.MinValue) == Fix64.MaxValue。 public static FP Abs(FP value) Parameters value FP Returns FP Acos(FP) 返回指定数字的反余弦值，使用 Atan 和 Sqrt 计算。 此函数至少具有 7 位小数的精度。 public static FP Acos(FP x) Parameters x FP Returns FP AsDecimal() 将 FP 转换为十进制型。 public decimal AsDecimal() Returns decimal AsDouble() 将 FP 转换为双精度浮点型。 public double AsDouble() Returns double AsFloat() 将 FP 转换为浮点型。 public float AsFloat() Returns float AsInt() 将 FP 转换为整型。 public int AsInt() Returns int AsLong() 将 FP 转换为长整型。 public long AsLong() Returns long AsUInt() 将 FP 转换为无符号整型。 public uint AsUInt() Returns uint Asin(FP) 返回指定数字的反正弦值。 public static FP Asin(FP value) Parameters value FP Returns FP Atan(FP) 返回指定数字的反正切值，使用欧拉级数计算。 此函数至少具有 7 位小数的精度。 public static FP Atan(FP z) Parameters z FP Returns FP Atan2(FP, FP) 返回 y 和 x 的反正切值。 public static FP Atan2(FP y, FP x) Parameters y FP x FP Returns FP Ceiling(FP) 返回大于或等于指定数字的最小整数。 public static FP Ceiling(FP value) Parameters value FP Returns FP Clamp(FP, FP, FP) 将指定的值限制在给定的最小值和最大值之间。 public static FP Clamp(FP origin, FP min, FP max) Parameters origin FP min FP max FP Returns FP ClampSinValue(long, out bool, out bool) 限制角度值在 0 到 2π 之间；使用模运算，速度较慢，但没有更好的方法。 public static long ClampSinValue(long angle, out bool flipHorizontal, out bool flipVertical) Parameters angle long flipHorizontal bool flipVertical bool Returns long CompareTo(FP) 比较两个 FP 对象的大小。 public int CompareTo(FP other) Parameters other FP Returns int Cos(FP) 返回 x 的余弦值。 参见 Sin() 以获取更多详细信息。 public static FP Cos(FP x) Parameters x FP Returns FP CountLeadingZeroes(ulong) 计算给定无符号长整型数的前导零位数。 public static int CountLeadingZeroes(ulong x) Parameters x ulong Returns int Equals(FP) 判断两个 FP 对象是否相等。 public bool Equals(FP other) Parameters other FP Returns bool Equals(object) 判断两个 FP 对象是否相等。 public override bool Equals(object obj) Parameters obj object Returns bool FastAbs(FP) 返回 Fix64 数字的绝对值。 FastAbs(Fix64.MinValue) 是未定义的。 public static FP FastAbs(FP value) Parameters value FP Returns FP FastAdd(FP, FP) 执行 x 和 y 的加法而不进行溢出检查。应由 CLR 内联。 public static FP FastAdd(FP x, FP y) Parameters x FP y FP Returns FP FastCos(FP) 返回 x 的粗略近似余弦值。 参见 FastSin 以获取更多详细信息。 public static FP FastCos(FP x) Parameters x FP Returns FP FastMod(FP, FP) 尽可能快速地执行取模运算；如果 x == MinValue 且 y == -1，则抛出异常。 使用运算符 (%) 进行更可靠但更慢的取模运算。 public static FP FastMod(FP x, FP y) Parameters x FP y FP Returns FP FastMul(FP, FP) 执行乘法而不进行溢出检查。 对于保证不会导致溢出的性能关键代码非常有用。 public static FP FastMul(FP x, FP y) Parameters x FP y FP Returns FP FastSin(FP) 返回 x 的粗略近似正弦值。 这在 x86 上至少比 Sin() 快 3 倍，并且比 Math.Sin() 稍快， 但是其精度限制在 4-5 位小数，对于足够小的 x 值。 public static FP FastSin(FP x) Parameters x FP Returns FP FastSub(FP, FP) 从 x 中减去 y 而不进行溢出检查。应由 CLR 内联。 public static FP FastSub(FP x, FP y) Parameters x FP y FP Returns FP Floor(FP) 返回小于或等于指定数字的最大整数。 public static FP Floor(FP value) Parameters value FP Returns FP FromRaw(long) 从原始值创建 FP 对象。 public static FP FromRaw(long rawValue) Parameters rawValue long Returns FP GetHashCode() 返回 FP 对象的哈希代码。 public override int GetHashCode() Returns int IsInfinity(FP) 判断 FP 值是否为无穷大。 public static bool IsInfinity(FP value) Parameters value FP Returns bool IsNaN(FP) 判断 FP 值是否为 NaN。 public static bool IsNaN(FP value) Parameters value FP Returns bool Ln(FP) 返回指定数字的自然对数。 提供至少 7 位小数的精度。 public static FP Ln(FP x) Parameters x FP Returns FP Exceptions ArgumentOutOfRangeException 参数为非正数。 Max(FP, FP) 返回两个 FP 数字中较大的一个。 public static FP Max(FP left, FP right) Parameters left FP right FP Returns FP Min(FP, FP) 返回两个 FP 数字中较小的一个。 public static FP Min(FP left, FP right) Parameters left FP right FP Returns FP OverflowAdd(FP, FP) 执行 x 和 y 的加法并进行溢出检查。应由 CLR 内联。 public static FP OverflowAdd(FP x, FP y) Parameters x FP y FP Returns FP OverflowMul(FP, FP) 执行乘法而不进行溢出检查。 对于保证不会导致溢出的性能关键代码非常有用。 public static FP OverflowMul(FP x, FP y) Parameters x FP y FP Returns FP OverflowSub(FP, FP) 从 x 中减去 y 而不进行溢出检查。应由 CLR 内联。 public static FP OverflowSub(FP x, FP y) Parameters x FP y FP Returns FP Round(FP) 将值四舍五入到最接近的整数值。 如果值恰好在偶数和奇数之间，则返回偶数值。 public static FP Round(FP value) Parameters value FP Returns FP Sign(FP) 返回 Fix64 数字的符号。 如果值为正，则返回 1；如果为 0，则返回 0；如果为负，则返回 -1。 public static int Sign(FP value) Parameters value FP Returns int Sin(FP) 返回 x 的正弦值。 此函数对小值 x 的精度约为 9 位小数。 随着 x 值的增大，可能会失去精度。 性能：在 x64 中比 Math.Sin() 慢约 25%，在 x86 中慢约 200%。 public static FP Sin(FP x) Parameters x FP Returns FP Sqrt(FP) 返回指定数字的平方根。 public static FP Sqrt(FP x) Parameters x FP Returns FP Exceptions ArgumentOutOfRangeException 参数为负数。 Tan(FP) 返回 x 的正切值。 public static FP Tan(FP x) Parameters x FP Returns FP Remarks 此函数未经过充分测试，可能会非常不准确。 ToFloat(FP) 将 FP 转换为浮点型。 public static float ToFloat(FP value) Parameters value FP Returns float ToInt(FP) 将 FP 转换为整型。 public static int ToInt(FP value) Parameters value FP Returns int ToString() 返回 FP 对象的字符串表示形式。 public override string ToString() Returns string ToString(IFormatProvider) 返回 FP 对象的字符串表示形式，使用指定的格式提供程序。 public string ToString(IFormatProvider provider) Parameters provider IFormatProvider Returns string ToString(string) 返回 FP 对象的字符串表示形式，使用指定的格式。 public string ToString(string format) Parameters format string Returns string ToUInt(FP) 将 FP 转换为无符号整型。 public static uint ToUInt(FP value) Parameters value FP Returns uint Operators operator +(FP, FP) 将 x 和 y 相加。执行饱和加法，即在溢出情况下， 根据操作数的符号四舍五入到 MinValue 或 MaxValue。 public static FP operator +(FP x, FP y) Parameters x FP y FP Returns FP operator /(FP, FP) 执行 x 和 y 的除法。 public static FP operator /(FP x, FP y) Parameters x FP y FP Returns FP operator ==(FP, FP) 判断两个 FP 数字是否相等。 public static bool operator ==(FP x, FP y) Parameters x FP y FP Returns bool explicit operator decimal(FP) 将 FP 转换为十进制值。 public static explicit operator decimal(FP value) Parameters value FP Returns decimal explicit operator long(FP) 将 FP 转换为长整型值。 public static explicit operator long(FP value) Parameters value FP Returns long explicit operator float(FP) 将 FP 转换为浮点型值。 public static explicit operator float(FP value) Parameters value FP Returns float explicit operator FP(decimal) 将十进制值转换为 FP。 public static explicit operator FP(decimal value) Parameters value decimal Returns FP operator >(FP, FP) 判断 x 是否大于 y。 public static bool operator >(FP x, FP y) Parameters x FP y FP Returns bool operator >=(FP, FP) 判断 x 是否大于或等于 y。 public static bool operator >=(FP x, FP y) Parameters x FP y FP Returns bool implicit operator FP(int) 将整型值转换为 FP。 public static implicit operator FP(int value) Parameters value int Returns FP implicit operator FP(long) 将长整型值转换为 FP。 public static implicit operator FP(long value) Parameters value long Returns FP operator !=(FP, FP) 判断两个 FP 数字是否不相等。 public static bool operator !=(FP x, FP y) Parameters x FP y FP Returns bool operator <(FP, FP) 判断 x 是否小于 y。 public static bool operator <(FP x, FP y) Parameters x FP y FP Returns bool operator <=(FP, FP) 判断 x 是否小于或等于 y。 public static bool operator <=(FP x, FP y) Parameters x FP y FP Returns bool operator %(FP, FP) 执行 x 和 y 的取模运算。 public static FP operator %(FP x, FP y) Parameters x FP y FP Returns FP operator *(FP, FP) 执行 x 和 y 的乘法。 public static FP operator *(FP x, FP y) Parameters x FP y FP Returns FP operator -(FP, FP) 从 x 中减去 y。执行饱和减法，即在溢出情况下， 根据操作数的符号四舍五入到 MinValue 或 MaxValue。 public static FP operator -(FP x, FP y) Parameters x FP y FP Returns FP operator -(FP) 返回 x 的相反数。 public static FP operator -(FP x) Parameters x FP Returns FP"
  },
  "api/GameFrameX.Utility.Math.FPMath.html": {
    "href": "api/GameFrameX.Utility.Math.FPMath.html",
    "title": "Class FPMath | GameFrameX.Server",
    "summary": "Class FPMath Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll 包含常见的数学操作。 public sealed class FPMath Inheritance object FPMath Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Deg2Rad 角度转弧度的常量。 public static FP Deg2Rad Field Value FP Epsilon 一个小值，通常用于判断数值结果是否为零。 public static FP Epsilon Field Value FP Infinity FP 无穷大。 public static FP Infinity Field Value FP Pi PI 常量。 public static FP Pi Field Value FP PiOver2 PI 除以 2 的常量。 public static FP PiOver2 Field Value FP Rad2Deg 弧度转角度的常量。 public static FP Rad2Deg Field Value FP Methods Abs(FP) 返回 Fix64 数字的绝对值。 注意：Abs(Fix64.MinValue) == Fix64.MaxValue。 public static FP Abs(FP value) Parameters value FP 要计算绝对值的值。 Returns FP 返回绝对值。 Absolute(ref FPMatrix, out FPMatrix) 将矩阵的每个元素的符号更改为 '+'。 public static void Absolute(ref FPMatrix matrix, out FPMatrix result) Parameters matrix FPMatrix 输入矩阵。 result FPMatrix 输出绝对值矩阵。 Acos(FP) 返回值的反余弦。 public static FP Acos(FP value) Parameters value FP 要计算反余弦的值。 Returns FP 返回反余弦值。 Asin(FP) 返回值的反正弦。 public static FP Asin(FP value) Parameters value FP 要计算反正弦的值。 Returns FP 返回反正弦值。 Atan(FP) 返回值的反正切。 public static FP Atan(FP value) Parameters value FP 要计算反正切的值。 Returns FP 返回反正切值。 Atan2(FP, FP) 返回坐标 x-y 的反正切。 public static FP Atan2(FP y, FP x) Parameters y FP y 坐标。 x FP x 坐标。 Returns FP 返回反正切值。 Barycentric(FP, FP, FP, FP, FP) 返回三个值的重心插值。 public static FP Barycentric(FP value1, FP value2, FP value3, FP amount1, FP amount2) Parameters value1 FP 第一个值。 value2 FP 第二个值。 value3 FP 第三个值。 amount1 FP 第一个权重。 amount2 FP 第二个权重。 Returns FP 返回重心插值的结果。 CatmullRom(FP, FP, FP, FP, FP) 返回四个值的 CatmullRom 插值。 public static FP CatmullRom(FP value1, FP value2, FP value3, FP value4, FP amount) Parameters value1 FP 第一个值。 value2 FP 第二个值。 value3 FP 第三个值。 value4 FP 第四个值。 amount FP 插值量。 Returns FP 返回 CatmullRom 插值的结果。 Ceiling(FP) 返回大于或等于指定数字的最小整数。 public static FP Ceiling(FP value) Parameters value FP 要计算的值。 Returns FP 返回大于或等于指定数字的最小整数。 Clamp(FP, FP, FP) 返回一个在 [min,max] 范围内的数字。 public static FP Clamp(FP value, FP min, FP max) Parameters value FP 要限制的值。 min FP 最小值。 max FP 最大值。 Returns FP 返回限制后的值。 Clamp01(FP) 返回一个在 [FP.Zero, FP.One] 范围内的数字。 public static FP Clamp01(FP value) Parameters value FP 要限制的值。 Returns FP 返回限制后的值。 Cos(FP) 返回值的余弦。 public static FP Cos(FP value) Parameters value FP 要计算余弦的值。 Returns FP 返回余弦值。 DeltaAngle(FP, FP) 返回两个向量之间的角度。 public static FP DeltaAngle(FP current, FP target) Parameters current FP 当前角度。 target FP 目标角度。 Returns FP 返回两个角度之间的差值。 Distance(FP, FP) 返回两个值之间的距离。 public static FP Distance(FP value1, FP value2) Parameters value1 FP 第一个值。 value2 FP 第二个值。 Returns FP 返回两个值之间的距离。 Floor(FP) 返回小于或等于指定数字的最大整数。 public static FP Floor(FP value) Parameters value FP 要计算的值。 Returns FP 返回小于或等于指定数字的最大整数。 Hermite(FP, FP, FP, FP, FP) 返回两个值的 Hermite 插值。 public static FP Hermite(FP value1, FP tangent1, FP value2, FP tangent2, FP amount) Parameters value1 FP 第一个值。 tangent1 FP 第一个切线。 value2 FP 第二个值。 tangent2 FP 第二个切线。 amount FP 插值量。 Returns FP 返回 Hermite 插值的结果。 InverseLerp(FP, FP, FP) 返回两个值的反向线性插值。 public static FP InverseLerp(FP value1, FP value2, FP amount) Parameters value1 FP 第一个值。 value2 FP 第二个值。 amount FP 插值量。 Returns FP 返回反向线性插值的结果。 Lerp(FP, FP, FP) 返回两个值的线性插值。 public static FP Lerp(FP value1, FP value2, FP amount) Parameters value1 FP 第一个值。 value2 FP 第二个值。 amount FP 插值量。 Returns FP 返回线性插值的结果。 Max(FP, FP) 获取两个值中的最大值。 public static FP Max(FP val1, FP val2) Parameters val1 FP 第一个值。 val2 FP 第二个值。 Returns FP 返回较大的值。 Max(FP, FP, FP) 获取三个值中的最大值。 public static FP Max(FP val1, FP val2, FP val3) Parameters val1 FP 第一个值。 val2 FP 第二个值。 val3 FP 第三个值。 Returns FP 返回较大的值。 Min(FP, FP) 获取两个值中的最小值。 public static FP Min(FP val1, FP val2) Parameters val1 FP 第一个值。 val2 FP 第二个值。 Returns FP 返回较小的值。 MoveTowards(FP, FP, FP) 返回一个在最小值和最大值之间限制的值。 public static FP MoveTowards(FP current, FP target, FP maxDelta) Parameters current FP 当前值。 target FP 目标值。 maxDelta FP 最大变化量。 Returns FP 返回限制后的值。 MoveTowardsAngle(FP, FP, FP) 返回两个向量之间的角度。 public static FP MoveTowardsAngle(FP current, FP target, FP maxDelta) Parameters current FP 当前角度。 target FP 目标角度。 maxDelta FP 最大变化量。 Returns FP 返回更新后的角度。 Pow(FP, FP) 返回指定数字的指定幂。 提供约 5 位数字的结果精度。 public static FP Pow(FP b, FP exp) Parameters b FP 底数。 exp FP 指数。 Returns FP Exceptions DivideByZeroException 底数为零且指数为负时抛出。 ArgumentOutOfRangeException 底数为负且指数非零时抛出。 Repeat(FP, FP) 返回大于或等于指定数字的最小整数。 public static FP Repeat(FP t, FP length) Parameters t FP 要计算的值。 length FP 长度。 Returns FP 返回结果。 Round(FP) 将值四舍五入到最接近的整数值。 如果值恰好在偶数和奇数之间，则返回偶数值。 public static FP Round(FP value) Parameters value FP 要四舍五入的值。 Returns FP 返回四舍五入后的值。 Sign(FP) 返回 Fix64 数字的符号。 如果值为正，则返回 1；如果为 0，则返回 0；如果为负，则返回 -1。 public static int Sign(FP value) Parameters value FP 要检查符号的值。 Returns int 返回值的符号。 Sin(FP) 返回值的正弦。 public static FP Sin(FP value) Parameters value FP 要计算正弦的值。 Returns FP 返回正弦值。 SmoothDamp(FP, FP, ref FP, FP) 返回平滑阻尼函数的值。 public static FP SmoothDamp(FP current, FP target, ref FP currentVelocity, FP smoothTime) Parameters current FP 当前值。 target FP 目标值。 currentVelocity FP 当前速度。 smoothTime FP 平滑时间。 Returns FP 返回平滑阻尼后的值。 SmoothDamp(FP, FP, ref FP, FP, FP) 返回平滑阻尼函数的值。 public static FP SmoothDamp(FP current, FP target, ref FP currentVelocity, FP smoothTime, FP maxSpeed) Parameters current FP 当前值。 target FP 目标值。 currentVelocity FP 当前速度。 smoothTime FP 平滑时间。 maxSpeed FP 最大速度。 Returns FP 返回平滑阻尼后的值。 SmoothDamp(FP, FP, ref FP, FP, FP, FP) 返回平滑阻尼函数的值。 public static FP SmoothDamp(FP current, FP target, ref FP currentVelocity, FP smoothTime, FP maxSpeed, FP deltaTime) Parameters current FP 当前值。 target FP 目标值。 currentVelocity FP 当前速度。 smoothTime FP 平滑时间。 maxSpeed FP 最大速度。 deltaTime FP 时间增量。 Returns FP 返回平滑阻尼后的值。 SmoothStep(FP, FP, FP) 返回两个值的平滑 Hermite 插值。 public static FP SmoothStep(FP value1, FP value2, FP amount) Parameters value1 FP 第一个值。 value2 FP 第二个值。 amount FP 插值量。 Returns FP 返回平滑 Hermite 插值的结果。 Sqrt(FP) 获取平方根。 public static FP Sqrt(FP number) Parameters number FP 要计算平方根的数字。 Returns FP 返回平方根的值。 Tan(FP) 返回值的正切。 public static FP Tan(FP value) Parameters value FP 要计算正切的值。 Returns FP 返回正切值。"
  },
  "api/GameFrameX.Utility.Math.FPMatrix.html": {
    "href": "api/GameFrameX.Utility.Math.FPMatrix.html",
    "title": "Struct FPMatrix | GameFrameX.Server",
    "summary": "Struct FPMatrix Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll 表示一个3x3矩阵。 public struct FPMatrix Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FPMatrix(FP, FP, FP, FP, FP, FP, FP, FP, FP) 初始化矩阵结构的新实例。 public FPMatrix(FP m11, FP m12, FP m13, FP m21, FP m22, FP m23, FP m31, FP m32, FP m33) Parameters m11 FP 矩阵的第1行第1列元素。 m12 FP 矩阵的第1行第2列元素。 m13 FP 矩阵的第1行第3列元素。 m21 FP 矩阵的第2行第1列元素。 m22 FP 矩阵的第2行第2列元素。 m23 FP 矩阵的第2行第3列元素。 m31 FP 矩阵的第3行第1列元素。 m32 FP 矩阵的第3行第2列元素。 m33 FP 矩阵的第3行第3列元素。 Fields Identity 单位矩阵。 public static readonly FPMatrix Identity Field Value FPMatrix M11 矩阵的第1行第1列元素。 public FP M11 Field Value FP M12 矩阵的第1行第2列元素。 public FP M12 Field Value FP M13 矩阵的第1行第3列元素。 public FP M13 Field Value FP M21 矩阵的第2行第1列元素。 public FP M21 Field Value FP M22 矩阵的第2行第2列元素。 public FP M22 Field Value FP M23 矩阵的第2行第3列元素。 public FP M23 Field Value FP M31 矩阵的第3行第1列元素。 public FP M31 Field Value FP M32 矩阵的第3行第2列元素。 public FP M32 Field Value FP M33 矩阵的第3行第3列元素。 public FP M33 Field Value FP Zero 零矩阵。 public static readonly FPMatrix Zero Field Value FPMatrix Properties eulerAngles 获取矩阵的欧拉角。 public FPVector3 eulerAngles { get; } Property Value FPVector3 Methods Add(FPMatrix, FPMatrix) 矩阵相加。 public static FPMatrix Add(FPMatrix matrix1, FPMatrix matrix2) Parameters matrix1 FPMatrix 第一个矩阵。 matrix2 FPMatrix 第二个矩阵。 Returns FPMatrix 两个矩阵的和。 Add(ref FPMatrix, ref FPMatrix, out FPMatrix) 矩阵相加。 public static void Add(ref FPMatrix matrix1, ref FPMatrix matrix2, out FPMatrix result) Parameters matrix1 FPMatrix 第一个矩阵。 matrix2 FPMatrix 第二个矩阵。 result FPMatrix 两个矩阵的和。 AngleAxis(FP, FPVector3) 根据给定轴和角度创建旋转矩阵。 public static FPMatrix AngleAxis(FP angle, FPVector3 axis) Parameters angle FP 旋转角度。 axis FPVector3 旋转轴。 Returns FPMatrix 生成的旋转矩阵。 CreateFromAxisAngle(ref FPVector3, FP, out FPMatrix) 根据给定轴和角度创建旋转矩阵。 public static void CreateFromAxisAngle(ref FPVector3 axis, FP angle, out FPMatrix result) Parameters axis FPVector3 旋转轴。 angle FP 旋转角度。 result FPMatrix 输出的旋转矩阵。 CreateFromLookAt(FPVector3, FPVector3) 根据位置和目标创建视图矩阵 public static FPMatrix CreateFromLookAt(FPVector3 position, FPVector3 target) Parameters position FPVector3 观察者的位置 target FPVector3 观察目标的位置 Returns FPMatrix 返回一个新的视图矩阵 CreateFromQuaternion(FPQuaternion) 根据四元数创建表示方向的矩阵。 public static FPMatrix CreateFromQuaternion(FPQuaternion quaternion) Parameters quaternion FPQuaternion 用于创建矩阵的四元数。 Returns FPMatrix 表示方向的矩阵。 CreateFromQuaternion(ref FPQuaternion, out FPMatrix) 根据四元数创建表示方向的矩阵。 public static void CreateFromQuaternion(ref FPQuaternion quaternion, out FPMatrix result) Parameters quaternion FPQuaternion 用于创建矩阵的四元数。 result FPMatrix 表示方向的矩阵。 CreateFromYawPitchRoll(FP, FP, FP) 根据偏航、俯仰和滚转角度创建旋转矩阵。 public static FPMatrix CreateFromYawPitchRoll(FP yaw, FP pitch, FP roll) Parameters yaw FP 偏航角度。 pitch FP 俯仰角度。 roll FP 滚转角度。 Returns FPMatrix 生成的旋转矩阵。 CreateRotationX(FP) 创建绕X轴旋转的矩阵。 public static FPMatrix CreateRotationX(FP radians) Parameters radians FP 旋转角度（弧度）。 Returns FPMatrix 生成的旋转矩阵。 CreateRotationX(FP, out FPMatrix) 创建绕X轴旋转的矩阵，并将结果输出到指定的矩阵。 public static void CreateRotationX(FP radians, out FPMatrix result) Parameters radians FP 旋转角度（弧度）。 result FPMatrix 输出的旋转矩阵。 CreateRotationY(FP) 创建绕Y轴旋转的矩阵。 public static FPMatrix CreateRotationY(FP radians) Parameters radians FP 旋转角度（弧度）。 Returns FPMatrix 生成的旋转矩阵。 CreateRotationY(FP, out FPMatrix) 创建绕Y轴旋转的矩阵，并将结果输出到指定的矩阵。 public static void CreateRotationY(FP radians, out FPMatrix result) Parameters radians FP 旋转角度（弧度）。 result FPMatrix 输出的旋转矩阵。 CreateRotationZ(FP) 创建绕Z轴旋转的矩阵。 public static FPMatrix CreateRotationZ(FP radians) Parameters radians FP 旋转角度（弧度）。 Returns FPMatrix 生成的旋转矩阵。 CreateRotationZ(FP, out FPMatrix) 创建绕Z轴旋转的矩阵，并将结果输出到指定的矩阵。 public static void CreateRotationZ(FP radians, out FPMatrix result) Parameters radians FP 旋转角度（弧度）。 result FPMatrix 输出的旋转矩阵。 Determinant() 计算矩阵的行列式。 public FP Determinant() Returns FP 矩阵的行列式。 Equals(object) 判断当前矩阵是否与指定对象相等。 public override bool Equals(object obj) Parameters obj object 要比较的对象。 Returns bool 如果相等则返回true，否则返回false。 GetHashCode() 获取当前矩阵的哈希代码。 public override int GetHashCode() Returns int 当前矩阵的哈希代码。 Inverse(FPMatrix) 计算给定矩阵的逆矩阵。 public static FPMatrix Inverse(FPMatrix matrix) Parameters matrix FPMatrix 要计算逆的矩阵。 Returns FPMatrix 逆矩阵。 Inverse(ref FPMatrix, out FPMatrix) Calculates the inverse of a give matrix. public static void Inverse(ref FPMatrix matrix, out FPMatrix result) Parameters matrix FPMatrix The matrix to invert. result FPMatrix The inverted JMatrix. Invert(ref FPMatrix, out FPMatrix) 计算给定矩阵的逆矩阵。 public static void Invert(ref FPMatrix matrix, out FPMatrix result) Parameters matrix FPMatrix 要计算逆的矩阵。 result FPMatrix 逆矩阵。 LookAt(FPVector3, FPVector3) 创建一个观察矩阵。 public static FPMatrix LookAt(FPVector3 forward, FPVector3 upwards) Parameters forward FPVector3 前向向量。 upwards FPVector3 向上向量。 Returns FPMatrix 观察矩阵。 LookAt(FPVector3, FPVector3, out FPMatrix) 创建一个观察矩阵。 public static void LookAt(FPVector3 forward, FPVector3 upwards, out FPMatrix result) Parameters forward FPVector3 前向向量。 upwards FPVector3 向上向量。 result FPMatrix 输出的观察矩阵。 Multiply(FPMatrix, FP) 将矩阵乘以一个缩放因子。 public static FPMatrix Multiply(FPMatrix matrix1, FP scaleFactor) Parameters matrix1 FPMatrix 要缩放的矩阵。 scaleFactor FP 缩放因子。 Returns FPMatrix 缩放后的矩阵。 Multiply(FPMatrix, FPMatrix) 乘以两个矩阵。注意：矩阵乘法不是可交换的。 public static FPMatrix Multiply(FPMatrix matrix1, FPMatrix matrix2) Parameters matrix1 FPMatrix 第一个矩阵。 matrix2 FPMatrix 第二个矩阵。 Returns FPMatrix 两个矩阵的乘积。 Multiply(ref FPMatrix, FP, out FPMatrix) 将矩阵乘以一个缩放因子，并将结果输出到指定的矩阵。 public static void Multiply(ref FPMatrix matrix1, FP scaleFactor, out FPMatrix result) Parameters matrix1 FPMatrix 要缩放的矩阵。 scaleFactor FP 缩放因子。 result FPMatrix 缩放后的矩阵。 Multiply(ref FPMatrix, ref FPMatrix, out FPMatrix) 乘以两个矩阵。注意：矩阵乘法不是可交换的。 public static void Multiply(ref FPMatrix matrix1, ref FPMatrix matrix2, out FPMatrix result) Parameters matrix1 FPMatrix 第一个矩阵。 matrix2 FPMatrix 第二个矩阵。 result FPMatrix 两个矩阵的乘积。 ToString() 将矩阵转换为字符串表示形式。 public override string ToString() Returns string 矩阵的字符串表示形式。 Trace() 计算矩阵的迹。 public FP Trace() Returns FP 矩阵的迹。 Transpose(FPMatrix) 创建转置矩阵。 public static FPMatrix Transpose(FPMatrix matrix) Parameters matrix FPMatrix 要转置的矩阵。 Returns FPMatrix 转置后的矩阵。 Transpose(ref FPMatrix, out FPMatrix) 创建转置矩阵。 public static void Transpose(ref FPMatrix matrix, out FPMatrix result) Parameters matrix FPMatrix 要转置的矩阵。 result FPMatrix 转置后的矩阵。 Operators operator +(FPMatrix, FPMatrix) 将两个矩阵相加。 public static FPMatrix operator +(FPMatrix value1, FPMatrix value2) Parameters value1 FPMatrix 第一个矩阵。 value2 FPMatrix 第二个矩阵。 Returns FPMatrix 两个矩阵的和。 operator ==(FPMatrix, FPMatrix) 判断两个矩阵是否相等。 public static bool operator ==(FPMatrix value1, FPMatrix value2) Parameters value1 FPMatrix 第一个矩阵。 value2 FPMatrix 第二个矩阵。 Returns bool 如果相等则返回true，否则返回false。 operator !=(FPMatrix, FPMatrix) 判断两个矩阵是否不相等。 public static bool operator !=(FPMatrix value1, FPMatrix value2) Parameters value1 FPMatrix 第一个矩阵。 value2 FPMatrix 第二个矩阵。 Returns bool 如果不相等则返回true，否则返回false。 operator *(FPMatrix, FPMatrix) 乘以两个矩阵。 public static FPMatrix operator *(FPMatrix value1, FPMatrix value2) Parameters value1 FPMatrix 第一个矩阵。 value2 FPMatrix 第二个矩阵。 Returns FPMatrix 两个矩阵的乘积。 operator -(FPMatrix, FPMatrix) 将两个矩阵相减。 public static FPMatrix operator -(FPMatrix value1, FPMatrix value2) Parameters value1 FPMatrix 第一个矩阵。 value2 FPMatrix 第二个矩阵。 Returns FPMatrix 两个矩阵的差。"
  },
  "api/GameFrameX.Utility.Math.FPMatrix4x4.html": {
    "href": "api/GameFrameX.Utility.Math.FPMatrix4x4.html",
    "title": "Struct FPMatrix4x4 | GameFrameX.Server",
    "summary": "Struct FPMatrix4x4 Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll 4x4 矩阵结构体，用于表示三维空间中的变换。 public struct FPMatrix4x4 Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FPMatrix4x4(FP, FP, FP, FP, FP, FP, FP, FP, FP, FP, FP, FP, FP, FP, FP, FP) 初始化矩阵结构的新实例。 public FPMatrix4x4(FP m11, FP m12, FP m13, FP m14, FP m21, FP m22, FP m23, FP m24, FP m31, FP m32, FP m33, FP m34, FP m41, FP m42, FP m43, FP m44) Parameters m11 FP 第一行第一列的值。 m12 FP 第一行第二列的值。 m13 FP 第一行第三列的值。 m14 FP 第一行第四列的值。 m21 FP 第二行第一列的值。 m22 FP 第二行第二列的值。 m23 FP 第二行第三列的值。 m24 FP 第二行第四列的值。 m31 FP 第三行第一列的值。 m32 FP 第三行第二列的值。 m33 FP 第三行第三列的值。 m34 FP 第三行第四列的值。 m41 FP 第四行第一列的值。 m42 FP 第四行第二列的值。 m43 FP 第四行第三列的值。 m44 FP 第四行第四列的值。 Fields Identity 单位矩阵。 public static readonly FPMatrix4x4 Identity Field Value FPMatrix4x4 M11 第一行第一列的元素。 public FP M11 Field Value FP M12 第一行第二列的元素。 public FP M12 Field Value FP M13 第一行第三列的元素。 public FP M13 Field Value FP M14 第一行第四列的元素。 public FP M14 Field Value FP M21 第二行第一列的元素。 public FP M21 Field Value FP M22 第二行第二列的元素。 public FP M22 Field Value FP M23 第二行第三列的元素。 public FP M23 Field Value FP M24 第二行第四列的元素。 public FP M24 Field Value FP M31 第三行第一列的元素。 public FP M31 Field Value FP M32 第三行第二列的元素。 public FP M32 Field Value FP M33 第三行第三列的元素。 public FP M33 Field Value FP M34 第三行第四列的元素。 public FP M34 Field Value FP M41 第四行第一列的元素。 public FP M41 Field Value FP M42 第四行第二列的元素。 public FP M42 Field Value FP M43 第四行第三列的元素。 public FP M43 Field Value FP M44 第四行第四列的元素。 public FP M44 Field Value FP Zero 零矩阵。 public static readonly FPMatrix4x4 Zero Field Value FPMatrix4x4 Properties determinant 决定因素 public FP determinant { get; } Property Value FP Methods Add(FPMatrix4x4, FPMatrix4x4) 将两个矩阵相加。 public static FPMatrix4x4 Add(FPMatrix4x4 matrix1, FPMatrix4x4 matrix2) Parameters matrix1 FPMatrix4x4 第一个矩阵。 matrix2 FPMatrix4x4 第二个矩阵。 Returns FPMatrix4x4 两个矩阵的和。 Add(ref FPMatrix4x4, ref FPMatrix4x4, out FPMatrix4x4) 将两个矩阵相加。 public static void Add(ref FPMatrix4x4 matrix1, ref FPMatrix4x4 matrix2, out FPMatrix4x4 result) Parameters matrix1 FPMatrix4x4 第一个矩阵。 matrix2 FPMatrix4x4 第二个矩阵。 result FPMatrix4x4 两个矩阵的和。 AngleAxis(FP, FPVector3) 创建围绕给定轴旋转的矩阵。 public static FPMatrix4x4 AngleAxis(FP angle, FPVector3 axis) Parameters angle FP 旋转角度。 axis FPVector3 旋转轴。 Returns FPMatrix4x4 结果旋转矩阵。 AxisAngle(ref FPVector3, FP, out FPMatrix4x4) 创建围绕给定轴旋转的矩阵。 public static void AxisAngle(ref FPVector3 axis, FP angle, out FPMatrix4x4 result) Parameters axis FPVector3 旋转轴。 angle FP 旋转角度。 result FPMatrix4x4 结果旋转矩阵。 Equals(object) 重写 Equals 方法，判断当前矩阵是否与指定对象相等。 public override bool Equals(object obj) Parameters obj object 要比较的对象。 Returns bool 如果当前矩阵与指定对象相等，则返回 true；否则返回 false。 GetHashCode() 重写 GetHashCode 方法，返回当前矩阵的哈希代码。 public override int GetHashCode() Returns int 当前矩阵的哈希代码。 Inverse(FPMatrix4x4) 计算给定矩阵的逆矩阵。 public static FPMatrix4x4 Inverse(FPMatrix4x4 matrix) Parameters matrix FPMatrix4x4 要计算逆的矩阵。 Returns FPMatrix4x4 逆矩阵。 Inverse(ref FPMatrix4x4, out FPMatrix4x4) 计算给定矩阵的逆矩阵。 public static void Inverse(ref FPMatrix4x4 matrix, out FPMatrix4x4 result) Parameters matrix FPMatrix4x4 要计算逆的矩阵。 result FPMatrix4x4 逆矩阵。 Multiply(FPMatrix4x4, FP) 将矩阵乘以一个缩放因子。 public static FPMatrix4x4 Multiply(FPMatrix4x4 matrix1, FP scaleFactor) Parameters matrix1 FPMatrix4x4 要缩放的矩阵。 scaleFactor FP 缩放因子。 Returns FPMatrix4x4 缩放后的矩阵。 Multiply(FPMatrix4x4, FPMatrix4x4) 计算两个矩阵的乘积。注意：矩阵乘法不是交换的。 public static FPMatrix4x4 Multiply(FPMatrix4x4 matrix1, FPMatrix4x4 matrix2) Parameters matrix1 FPMatrix4x4 第一个矩阵。 matrix2 FPMatrix4x4 第二个矩阵。 Returns FPMatrix4x4 两个矩阵的乘积。 Multiply(ref FPMatrix4x4, FP, out FPMatrix4x4) 将矩阵乘以一个缩放因子。 public static void Multiply(ref FPMatrix4x4 matrix1, FP scaleFactor, out FPMatrix4x4 result) Parameters matrix1 FPMatrix4x4 要缩放的矩阵。 scaleFactor FP 缩放因子。 result FPMatrix4x4 缩放后的矩阵。 Multiply(ref FPMatrix4x4, ref FPMatrix4x4, out FPMatrix4x4) 计算两个矩阵的乘积。注意：矩阵乘法不是交换的。 public static void Multiply(ref FPMatrix4x4 matrix1, ref FPMatrix4x4 matrix2, out FPMatrix4x4 result) Parameters matrix1 FPMatrix4x4 第一个矩阵。 matrix2 FPMatrix4x4 第二个矩阵。 result FPMatrix4x4 两个矩阵的乘积。 Rotate(FPQuaternion) 根据四元数创建旋转矩阵。 public static FPMatrix4x4 Rotate(FPQuaternion quaternion) Parameters quaternion FPQuaternion 用于创建矩阵的四元数。 Returns FPMatrix4x4 表示方向的旋转矩阵。 Rotate(ref FPQuaternion, out FPMatrix4x4) 根据四元数创建旋转矩阵。 public static void Rotate(ref FPQuaternion quaternion, out FPMatrix4x4 result) Parameters quaternion FPQuaternion 用于创建矩阵的四元数。 result FPMatrix4x4 表示方向的旋转矩阵。 RotateX(FP) 创建围绕 X 轴旋转的矩阵。 public static FPMatrix4x4 RotateX(FP radians) Parameters radians FP 围绕 X 轴旋转的弧度。 Returns FPMatrix4x4 旋转矩阵。 RotateX(FP, FPVector3) 创建围绕 X 轴旋转的矩阵，并指定中心点。 public static FPMatrix4x4 RotateX(FP radians, FPVector3 centerPoint) Parameters radians FP 围绕 X 轴旋转的弧度。 centerPoint FPVector3 旋转的中心点。 Returns FPMatrix4x4 旋转矩阵。 RotateY(FP) 创建围绕 Y 轴旋转的矩阵。 public static FPMatrix4x4 RotateY(FP radians) Parameters radians FP 围绕 Y 轴旋转的弧度。 Returns FPMatrix4x4 旋转矩阵。 RotateY(FP, FPVector3) 创建围绕 Y 轴旋转的矩阵，并指定中心点。 public static FPMatrix4x4 RotateY(FP radians, FPVector3 centerPoint) Parameters radians FP 围绕 Y 轴旋转的弧度。 centerPoint FPVector3 旋转的中心点。 Returns FPMatrix4x4 旋转矩阵。 RotateZ(FP) 创建围绕 Z 轴旋转的矩阵。 public static FPMatrix4x4 RotateZ(FP radians) Parameters radians FP 围绕 Z 轴旋转的弧度。 Returns FPMatrix4x4 旋转矩阵。 RotateZ(FP, FPVector3) 创建围绕 Z 轴旋转的矩阵，并指定中心点。 public static FPMatrix4x4 RotateZ(FP radians, FPVector3 centerPoint) Parameters radians FP 围绕 Z 轴旋转的弧度。 centerPoint FPVector3 旋转的中心点。 Returns FPMatrix4x4 旋转矩阵。 Scale(FP) 创建均匀缩放矩阵，使每个轴的缩放相等。 public static FPMatrix4x4 Scale(FP scale) Parameters scale FP 均匀缩放因子。 Returns FPMatrix4x4 缩放矩阵。 Scale(FP, FP, FP) 创建缩放矩阵。 public static FPMatrix4x4 Scale(FP xScale, FP yScale, FP zScale) Parameters xScale FP 在 X 轴上的缩放值。 yScale FP 在 Y 轴上的缩放值。 zScale FP 在 Z 轴上的缩放值。 Returns FPMatrix4x4 缩放矩阵。 Scale(FP, FP, FP, FPVector3) 创建带有中心点的缩放矩阵。 public static FPMatrix4x4 Scale(FP xScale, FP yScale, FP zScale, FPVector3 centerPoint) Parameters xScale FP 在 X 轴上的缩放值。 yScale FP 在 Y 轴上的缩放值。 zScale FP 在 Z 轴上的缩放值。 centerPoint FPVector3 缩放的中心点。 Returns FPMatrix4x4 缩放矩阵。 Scale(FP, FPVector3) 创建均匀缩放矩阵，使每个轴的缩放相等，并指定中心点。 public static FPMatrix4x4 Scale(FP scale, FPVector3 centerPoint) Parameters scale FP 均匀缩放因子。 centerPoint FPVector3 缩放的中心点。 Returns FPMatrix4x4 缩放矩阵。 Scale(FPVector3) 创建缩放矩阵。 public static FPMatrix4x4 Scale(FPVector3 scales) Parameters scales FPVector3 包含每个轴的缩放值的向量。 Returns FPMatrix4x4 缩放矩阵。 Scale(FPVector3, FPVector3) 创建带有中心点的缩放矩阵。 public static FPMatrix4x4 Scale(FPVector3 scales, FPVector3 centerPoint) Parameters scales FPVector3 包含每个轴的缩放值的向量。 centerPoint FPVector3 缩放的中心点。 Returns FPMatrix4x4 缩放矩阵。 TRS(FPVector3, FPQuaternion, FPVector3) 创建平移、旋转和缩放的组合矩阵。 public static FPMatrix4x4 TRS(FPVector3 translation, FPQuaternion rotation, FPVector3 scale) Parameters translation FPVector3 平移向量。 rotation FPQuaternion 旋转四元数。 scale FPVector3 缩放向量。 Returns FPMatrix4x4 组合后的矩阵。 TRS(FPVector3, FPQuaternion, FPVector3, out FPMatrix4x4) 创建平移、旋转和缩放的组合矩阵。 public static void TRS(FPVector3 translation, FPQuaternion rotation, FPVector3 scale, out FPMatrix4x4 matrix) Parameters translation FPVector3 平移向量。 rotation FPQuaternion 旋转四元数。 scale FPVector3 缩放向量。 matrix FPMatrix4x4 组合后的矩阵。 ToString() 返回矩阵的字符串表示形式。 public override string ToString() Returns string 矩阵的字符串表示形式。 Trace() 计算矩阵的迹。 public FP Trace() Returns FP 矩阵的迹。 Translate(FP, FP, FP) 创建平移矩阵。 public static FPMatrix4x4 Translate(FP xPosition, FP yPosition, FP zPosition) Parameters xPosition FP 在 X 轴上的平移量。 yPosition FP 在 Y 轴上的平移量。 zPosition FP 在 Z 轴上的平移量。 Returns FPMatrix4x4 平移矩阵。 Translate(FPVector3) 根据三维向量创建平移矩阵。 public static FPMatrix4x4 Translate(FPVector3 translation) Parameters translation FPVector3 平移向量。 Returns FPMatrix4x4 平移矩阵。 Transpose(FPMatrix4x4) 创建转置矩阵。 public static FPMatrix4x4 Transpose(FPMatrix4x4 matrix) Parameters matrix FPMatrix4x4 要转置的矩阵。 Returns FPMatrix4x4 转置后的矩阵。 Transpose(ref FPMatrix4x4, out FPMatrix4x4) 创建转置矩阵。 public static void Transpose(ref FPMatrix4x4 matrix, out FPMatrix4x4 result) Parameters matrix FPMatrix4x4 要转置的矩阵。 result FPMatrix4x4 转置后的矩阵。 Operators operator +(FPMatrix4x4, FPMatrix4x4) 重载加法运算符，计算两个矩阵的和。 public static FPMatrix4x4 operator +(FPMatrix4x4 value1, FPMatrix4x4 value2) Parameters value1 FPMatrix4x4 第一个矩阵。 value2 FPMatrix4x4 第二个矩阵。 Returns FPMatrix4x4 两个矩阵的和。 operator ==(FPMatrix4x4, FPMatrix4x4) 重载相等运算符，判断两个矩阵是否相等。 public static bool operator ==(FPMatrix4x4 value1, FPMatrix4x4 value2) Parameters value1 FPMatrix4x4 第一个矩阵。 value2 FPMatrix4x4 第二个矩阵。 Returns bool 如果两个矩阵相等，则返回 true；否则返回 false。 operator !=(FPMatrix4x4, FPMatrix4x4) 重载不相等运算符，判断两个矩阵是否不相等。 public static bool operator !=(FPMatrix4x4 value1, FPMatrix4x4 value2) Parameters value1 FPMatrix4x4 第一个矩阵。 value2 FPMatrix4x4 第二个矩阵。 Returns bool 如果两个矩阵不相等，则返回 true；否则返回 false。 operator *(FPMatrix4x4, FPMatrix4x4) 重载乘法运算符，计算两个矩阵的乘积。 public static FPMatrix4x4 operator *(FPMatrix4x4 value1, FPMatrix4x4 value2) Parameters value1 FPMatrix4x4 第一个矩阵。 value2 FPMatrix4x4 第二个矩阵。 Returns FPMatrix4x4 两个矩阵的乘积。 operator -(FPMatrix4x4, FPMatrix4x4) 重载减法运算符，计算两个矩阵的差。 public static FPMatrix4x4 operator -(FPMatrix4x4 value1, FPMatrix4x4 value2) Parameters value1 FPMatrix4x4 第一个矩阵。 value2 FPMatrix4x4 第二个矩阵。 Returns FPMatrix4x4 两个矩阵的差。 operator -(FPMatrix4x4) 返回给定矩阵的元素取反后的新矩阵。 public static FPMatrix4x4 operator -(FPMatrix4x4 value) Parameters value FPMatrix4x4 源矩阵。 Returns FPMatrix4x4 取反后的矩阵。"
  },
  "api/GameFrameX.Utility.Math.FPQuaternion.html": {
    "href": "api/GameFrameX.Utility.Math.FPQuaternion.html",
    "title": "Struct FPQuaternion | GameFrameX.Server",
    "summary": "Struct FPQuaternion Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll 表示一个四元数，用于表示三维空间中的方向和旋转。 [Serializable] public struct FPQuaternion Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FPQuaternion(FP, FP, FP, FP) 初始化一个新的四元数实例。 public FPQuaternion(FP x, FP y, FP z, FP w) Parameters x FP 四元数的 X 分量。 y FP 四元数的 Y 分量。 z FP 四元数的 Z 分量。 w FP 四元数的 W 分量。 Fields identity 表示单位四元数的静态只读字段。 public static readonly FPQuaternion identity Field Value FPQuaternion w 四元数的 W 分量。 public FP w Field Value FP x 四元数的 X 分量。 public FP x Field Value FP y 四元数的 Y 分量。 public FP y Field Value FP z 四元数的 Z 分量。 public FP z Field Value FP Properties eulerAngles 获取四元数对应的欧拉角。 public FPVector3 eulerAngles { get; } Property Value FPVector3 表示欧拉角的向量。 eulerAnglesNew 获取四元数对应的欧拉角（另一种实现）。 public FPVector3 eulerAnglesNew { get; } Property Value FPVector3 表示欧拉角的向量。 Methods Add(FPQuaternion, FPQuaternion) 计算两个四元数的和。 public static FPQuaternion Add(FPQuaternion quaternion1, FPQuaternion quaternion2) Parameters quaternion1 FPQuaternion 第一个四元数。 quaternion2 FPQuaternion 第二个四元数。 Returns FPQuaternion 两个四元数的和。 Add(ref FPQuaternion, ref FPQuaternion, out FPQuaternion) 计算两个四元数的和。 public static void Add(ref FPQuaternion quaternion1, ref FPQuaternion quaternion2, out FPQuaternion result) Parameters quaternion1 FPQuaternion 第一个四元数。 quaternion2 FPQuaternion 第二个四元数。 result FPQuaternion 两个四元数的和。 Angle(FPQuaternion, FPQuaternion) 计算两个四元数之间的夹角。 public static FP Angle(FPQuaternion a, FPQuaternion b) Parameters a FPQuaternion 第一个四元数。 b FPQuaternion 第二个四元数。 Returns FP 两个四元数之间的夹角（以度为单位）。 AngleAxis(FP, FPVector3) 根据指定的角度和轴创建一个四元数。 public static FPQuaternion AngleAxis(FP angle, FPVector3 axis) Parameters angle FP 旋转角度（以度为单位）。 axis FPVector3 旋转轴。 Returns FPQuaternion 表示旋转的四元数。 Conjugate(FPQuaternion) 计算四元数的共轭。 public static FPQuaternion Conjugate(FPQuaternion value) Parameters value FPQuaternion 要计算共轭的四元数。 Returns FPQuaternion 四元数的共轭。 CreateFromAxisAngle(FPVector3, FP) 从轴和角度创建一个四元数。 public static FPQuaternion CreateFromAxisAngle(FPVector3 axis, FP angle) Parameters axis FPVector3 旋转轴，必须是单位向量。 angle FP 旋转角度，以弧度为单位。 Returns FPQuaternion 表示旋转的 FPQuaternion。 CreateFromMatrix(FPMatrix) 从矩阵创建一个四元数。 public static FPQuaternion CreateFromMatrix(FPMatrix matrix) Parameters matrix FPMatrix 表示方向的矩阵。 Returns FPQuaternion 表示方向的 FPQuaternion。 CreateFromMatrix(ref FPMatrix, out FPQuaternion) 从矩阵创建一个四元数。 public static void CreateFromMatrix(ref FPMatrix matrix, out FPQuaternion result) Parameters matrix FPMatrix 表示方向的矩阵。 result FPQuaternion 表示方向的 FPQuaternion。 CreateFromYawPitchRoll(FP, FP, FP, out FPQuaternion) 根据指定的偏航角、俯仰角和翻滚角创建一个四元数。 public static void CreateFromYawPitchRoll(FP yaw, FP pitch, FP roll, out FPQuaternion result) Parameters yaw FP 偏航角（绕 Y 轴的旋转角度）。 pitch FP 俯仰角（绕 X 轴的旋转角度）。 roll FP 翻滚角（绕 Z 轴的旋转角度）。 result FPQuaternion 表示旋转的四元数。 Dot(FPQuaternion, FPQuaternion) 计算两个四元数的点积。 public static FP Dot(FPQuaternion a, FPQuaternion b) Parameters a FPQuaternion 第一个四元数。 b FPQuaternion 第二个四元数。 Returns FP 两个四元数的点积。 Equals(object) 判断当前四元数是否与指定对象相等。 public override bool Equals(object obj) Parameters obj object 要比较的对象。 Returns bool 如果当前四元数与指定对象相等，则返回 true；否则返回 false。 Euler(FP, FP, FP) 根据欧拉角创建一个四元数。 public static FPQuaternion Euler(FP x, FP y, FP z) Parameters x FP 绕 X 轴的旋转角度（以度为单位）。 y FP 绕 Y 轴的旋转角度（以度为单位）。 z FP 绕 Z 轴的旋转角度（以度为单位）。 Returns FPQuaternion 表示旋转的四元数。 Euler(FPVector3) 根据欧拉角向量创建一个四元数。 public static FPQuaternion Euler(FPVector3 eulerAngles) Parameters eulerAngles FPVector3 欧拉角向量。 Returns FPQuaternion 表示旋转的四元数。 FromToRotation(FPVector3, FPVector3) 计算从一个向量到另一个向量的旋转四元数。 public static FPQuaternion FromToRotation(FPVector3 fromVector3, FPVector3 toVector3) Parameters fromVector3 FPVector3 起始向量。 toVector3 FPVector3 目标向量。 Returns FPQuaternion 表示从一个向量到另一个向量的旋转的四元数。 GetHashCode() 返回当前四元数的哈希代码。 public override int GetHashCode() Returns int 当前四元数的哈希代码。 Inverse(FPQuaternion) 计算四元数的逆。 public static FPQuaternion Inverse(FPQuaternion rotation) Parameters rotation FPQuaternion 要计算逆的四元数。 Returns FPQuaternion 四元数的逆。 Lerp(FPQuaternion, FPQuaternion, FP) 在两个四元数之间进行线性插值。 public static FPQuaternion Lerp(FPQuaternion a, FPQuaternion b, FP t) Parameters a FPQuaternion 起始四元数。 b FPQuaternion 目标四元数。 t FP 插值参数，范围在 0 到 1 之间。 Returns FPQuaternion 插值结果四元数。 LerpUnclamped(FPQuaternion, FPQuaternion, FP) 在两个四元数之间进行线性插值，不进行参数限制。 public static FPQuaternion LerpUnclamped(FPQuaternion a, FPQuaternion b, FP t) Parameters a FPQuaternion 起始四元数。 b FPQuaternion 目标四元数。 t FP 插值参数。 Returns FPQuaternion 插值结果四元数。 LookRotation(FPVector3) 根据指定的前方向量创建一个四元数，使用默认的向上向量。 public static FPQuaternion LookRotation(FPVector3 forward) Parameters forward FPVector3 前方向量。 Returns FPQuaternion 表示旋转的四元数。 LookRotation(FPVector3, FPVector3) 根据指定的前方向量和向上向量创建一个四元数。 public static FPQuaternion LookRotation(FPVector3 forward, FPVector3 upwards) Parameters forward FPVector3 前方向量。 upwards FPVector3 向上向量。 Returns FPQuaternion 表示旋转的四元数。 Multiply(FPQuaternion, FP) 计算四元数与缩放因子的乘积。 public static FPQuaternion Multiply(FPQuaternion quaternion1, FP scaleFactor) Parameters quaternion1 FPQuaternion 要缩放的四元数。 scaleFactor FP 缩放因子。 Returns FPQuaternion 缩放后的四元数。 Multiply(FPQuaternion, FPQuaternion) 计算两个四元数的乘积。 public static FPQuaternion Multiply(FPQuaternion quaternion1, FPQuaternion quaternion2) Parameters quaternion1 FPQuaternion 第一个四元数。 quaternion2 FPQuaternion 第二个四元数。 Returns FPQuaternion 两个四元数的乘积。 Multiply(ref FPQuaternion, FP, out FPQuaternion) 缩放一个四元数。 public static void Multiply(ref FPQuaternion quaternion1, FP scaleFactor, out FPQuaternion result) Parameters quaternion1 FPQuaternion 要缩放的四元数。 scaleFactor FP 缩放因子。 result FPQuaternion 缩放后的四元数。 Multiply(ref FPQuaternion, ref FPQuaternion, out FPQuaternion) 计算两个四元数的乘积。 public static void Multiply(ref FPQuaternion quaternion1, ref FPQuaternion quaternion2, out FPQuaternion result) Parameters quaternion1 FPQuaternion 第一个四元数。 quaternion2 FPQuaternion 第二个四元数。 result FPQuaternion 两个四元数的乘积。 Normalize() 对当前四元数进行归一化。 public void Normalize() Remarks 归一化会将四元数的模长变为1，确保其表示一个有效的旋转。 RotateTowards(FPQuaternion, FPQuaternion, FP) 将一个四元数朝向另一个四元数旋转，但不超过指定的最大角度。 public static FPQuaternion RotateTowards(FPQuaternion from, FPQuaternion to, FP maxDegreesDelta) Parameters from FPQuaternion 起始四元数。 to FPQuaternion 目标四元数。 maxDegreesDelta FP 最大旋转角度（以度为单位）。 Returns FPQuaternion 旋转后的四元数。 Set(FP, FP, FP, FP) 设置四元数的各个分量。 public void Set(FP new_x, FP new_y, FP new_z, FP new_w) Parameters new_x FP 新的 X 分量。 new_y FP 新的 Y 分量。 new_z FP 新的 Z 分量。 new_w FP 新的 W 分量。 SetFromToRotation(FPVector3, FPVector3) 根据从一个方向到另一个方向的旋转设置四元数。 public void SetFromToRotation(FPVector3 fromDirection, FPVector3 toDirection) Parameters fromDirection FPVector3 起始方向。 toDirection FPVector3 目标方向。 Slerp(FPQuaternion, FPQuaternion, FP) 在两个四元数之间进行球面线性插值。 public static FPQuaternion Slerp(FPQuaternion from, FPQuaternion to, FP t) Parameters from FPQuaternion 起始四元数。 to FPQuaternion 目标四元数。 t FP 插值参数，范围在 0 到 1 之间。 Returns FPQuaternion 插值结果四元数。 Subtract(FPQuaternion, FPQuaternion) 计算两个四元数的差。 public static FPQuaternion Subtract(FPQuaternion quaternion1, FPQuaternion quaternion2) Parameters quaternion1 FPQuaternion 第一个四元数。 quaternion2 FPQuaternion 第二个四元数。 Returns FPQuaternion 两个四元数的差。 Subtract(ref FPQuaternion, ref FPQuaternion, out FPQuaternion) 计算两个四元数的差。 public static void Subtract(ref FPQuaternion quaternion1, ref FPQuaternion quaternion2, out FPQuaternion result) Parameters quaternion1 FPQuaternion 第一个四元数。 quaternion2 FPQuaternion 第二个四元数。 result FPQuaternion 两个四元数的差。 ToString() 返回四元数的字符串表示形式。 public override string ToString() Returns string 四元数的字符串表示形式。 Operators operator +(FPQuaternion, FPQuaternion) 加上两个四元数。 public static FPQuaternion operator +(FPQuaternion value1, FPQuaternion value2) Parameters value1 FPQuaternion 第一个四元数。 value2 FPQuaternion 第二个四元数。 Returns FPQuaternion 两个四元数的和。 operator ==(FPQuaternion, FPQuaternion) 判断两个四元数是否相等。 public static bool operator ==(FPQuaternion value1, FPQuaternion value2) Parameters value1 FPQuaternion 第一个四元数。 value2 FPQuaternion 第二个四元数。 Returns bool 如果两个四元数相等，则返回 true；否则返回 false。 operator !=(FPQuaternion, FPQuaternion) 判断两个四元数是否不相等。 public static bool operator !=(FPQuaternion value1, FPQuaternion value2) Parameters value1 FPQuaternion 第一个四元数。 value2 FPQuaternion 第二个四元数。 Returns bool 如果两个四元数不相等，则返回 true；否则返回 false。 operator *(FPQuaternion, FPQuaternion) 乘以两个四元数。 public static FPQuaternion operator *(FPQuaternion value1, FPQuaternion value2) Parameters value1 FPQuaternion 第一个四元数。 value2 FPQuaternion 第二个四元数。 Returns FPQuaternion 两个四元数的乘积。 operator *(FPQuaternion, FPVector3) 使用四元数旋转一个三维向量。 public static FPVector3 operator *(FPQuaternion quat, FPVector3 vec) Parameters quat FPQuaternion 要应用的四元数。 vec FPVector3 要旋转的三维向量。 Returns FPVector3 旋转后的三维向量。 operator -(FPQuaternion, FPQuaternion) 减去两个四元数。 public static FPQuaternion operator -(FPQuaternion value1, FPQuaternion value2) Parameters value1 FPQuaternion 第一个四元数。 value2 FPQuaternion 第二个四元数。 Returns FPQuaternion 两个四元数的差。"
  },
  "api/GameFrameX.Utility.Math.FPRandom.html": {
    "href": "api/GameFrameX.Utility.Math.FPRandom.html",
    "title": "Class FPRandom | GameFrameX.Server",
    "summary": "Class FPRandom Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll 生成基于确定性方法的随机数。 public sealed class FPRandom Inheritance object FPRandom Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields instance 使用种子 1 的 {@link TSRandom} 的静态实例。 public static FPRandom instance Field Value FPRandom Properties MaxRandomInt 获取最大随机整数值。 public static int MaxRandomInt { get; } Property Value int insideUnitSphere 返回一个随机的 {@link TSVector}，表示半径为 1 的球体内的一个点。 public static FPVector3 insideUnitSphere { get; } Property Value FPVector3 value 返回一个 {@link FP} 值，范围在 0.0 [包含] 到 1.0 [包含] 之间。 public static FP value { get; } Property Value FP Methods CallNext() 返回一个随机整数。 public static int CallNext() Returns int 生成的随机整数。 Initialize() 使用当前时间的毫秒数初始化随机数生成器。 public void Initialize() Initialize(int) 使用指定的种子初始化随机数生成器。 public void Initialize(int seed) Parameters seed int 用于初始化的种子。 Initialize(int[]) 使用指定的初始化数组初始化随机数生成器。 public void Initialize(int[] init) Parameters init int[] 初始化数组。 New(int) 根据给定的种子生成一个新的实例。 public static FPRandom New(int seed) Parameters seed int 用于生成新实例的种子。 Returns FPRandom 新的 FPRandom 实例。 Next() 返回一个随机整数。 public int Next() Returns int 生成的随机整数。 Next(int, int) 返回一个介于 minValue [包含] 和 maxValue [不包含] 之间的整数。 public int Next(int minValue, int maxValue) Parameters minValue int 最小值。 maxValue int 最大值。 Returns int 生成的随机整数。 Next(float, float) 返回一个 {@link FP} 值，范围在 minValue [包含] 到 maxValue [包含] 之间。 public FP Next(float minValue, float maxValue) Parameters minValue float 最小值。 maxValue float 最大值。 Returns FP 生成的随机 FP 值。 NextFP() 返回一个 {@link FP} 值，范围在 0.0 [包含] 到 1.0 [包含] 之间。 public FP NextFP() Returns FP 生成的随机 FP 值。 Range(int, int) 返回一个介于 minValue [包含] 和 maxValue [不包含] 之间的整数。 public static int Range(int minValue, int maxValue) Parameters minValue int 最小值。 maxValue int 最大值。 Returns int 生成的随机整数。 Range(float, float) 返回一个 {@link FP} 值，范围在 minValue [包含] 到 maxValue [包含] 之间。 public static FP Range(float minValue, float maxValue) Parameters minValue float 最小值。 maxValue float 最大值。 Returns FP 生成的随机 FP 值。"
  },
  "api/GameFrameX.Utility.Math.FPVector2.html": {
    "href": "api/GameFrameX.Utility.Math.FPVector2.html",
    "title": "Struct FPVector2 | GameFrameX.Server",
    "summary": "Struct FPVector2 Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll 表示一个二维向量结构。 [Serializable] public struct FPVector2 : IEquatable<FPVector2> Implements IEquatable<FPVector2> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FPVector2(FP) 创建一个“方形”向量的构造函数，即 X 和 Y 坐标相同。 public FPVector2(FP value) Parameters value FP 向量的 X 和 Y 坐标值。 FPVector2(FP, FP) 标准 2D 向量的构造函数。 public FPVector2(FP x, FP y) Parameters x FP 向量的 X 坐标。 y FP 向量的 Y 坐标。 Fields x 向量的 X 坐标。 public FP x Field Value FP y 向量的 Y 坐标。 public FP y Field Value FP Properties Magnitude 获取向量的长度（模）。 public FP Magnitude { get; } Property Value FP Normalized 获取归一化后的向量。 public FPVector2 Normalized { get; } Property Value FPVector2 down 获取一个表示下方向向量 (0, -1) 的静态属性。 public static FPVector2 down { get; } Property Value FPVector2 left 获取一个表示左方向向量 (-1, 0) 的静态属性。 public static FPVector2 left { get; } Property Value FPVector2 one 获取一个表示单位向量 (1, 1) 的静态属性。 public static FPVector2 one { get; } Property Value FPVector2 right 获取一个表示右方向向量 (1, 0) 的静态属性。 public static FPVector2 right { get; } Property Value FPVector2 up 获取一个表示上方向向量 (0, 1) 的静态属性。 public static FPVector2 up { get; } Property Value FPVector2 zero 获取一个表示零向量 (0, 0) 的静态属性。 public static FPVector2 zero { get; } Property Value FPVector2 Methods Add(FPVector2, FPVector2) 计算两个 FPVector2 的和。 public static FPVector2 Add(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个 FPVector2。 value2 FPVector2 第二个 FPVector2。 Returns FPVector2 两个 FPVector2 的和。 Add(ref FPVector2, ref FPVector2, out FPVector2) 计算两个 FPVector2 的和。 public static void Add(ref FPVector2 value1, ref FPVector2 value2, out FPVector2 result) Parameters value1 FPVector2 第一个 FPVector2。 value2 FPVector2 第二个 FPVector2。 result FPVector2 两个 FPVector2 的和。 Angle(FPVector2, FPVector2) 计算两个向量之间的夹角（以度为单位）。 public static FP Angle(FPVector2 a, FPVector2 b) Parameters a FPVector2 第一个向量。 b FPVector2 第二个向量。 Returns FP 两个向量之间的夹角（以度为单位）。 Barycentric(FPVector2, FPVector2, FPVector2, FP, FP) 计算三个点的重心插值。 public static FPVector2 Barycentric(FPVector2 value1, FPVector2 value2, FPVector2 value3, FP amount1, FP amount2) Parameters value1 FPVector2 第一个点。 value2 FPVector2 第二个点。 value3 FPVector2 第三个点。 amount1 FP 权重1。 amount2 FP 权重2。 Returns FPVector2 重心插值结果。 Barycentric(ref FPVector2, ref FPVector2, ref FPVector2, FP, FP, out FPVector2) 计算三个点的重心插值。 public static void Barycentric(ref FPVector2 value1, ref FPVector2 value2, ref FPVector2 value3, FP amount1, FP amount2, out FPVector2 result) Parameters value1 FPVector2 第一个点。 value2 FPVector2 第二个点。 value3 FPVector2 第三个点。 amount1 FP 权重1。 amount2 FP 权重2。 result FPVector2 重心插值结果。 CatmullRom(FPVector2, FPVector2, FPVector2, FPVector2, FP) 计算四个点的 Catmull-Rom 插值。 public static FPVector2 CatmullRom(FPVector2 value1, FPVector2 value2, FPVector2 value3, FPVector2 value4, FP amount) Parameters value1 FPVector2 第一个点。 value2 FPVector2 第二个点。 value3 FPVector2 第三个点。 value4 FPVector2 第四个点。 amount FP 插值参数。 Returns FPVector2 Catmull-Rom 插值结果。 CatmullRom(ref FPVector2, ref FPVector2, ref FPVector2, ref FPVector2, FP, out FPVector2) 计算四个点的 Catmull-Rom 插值。 public static void CatmullRom(ref FPVector2 value1, ref FPVector2 value2, ref FPVector2 value3, ref FPVector2 value4, FP amount, out FPVector2 result) Parameters value1 FPVector2 第一个点。 value2 FPVector2 第二个点。 value3 FPVector2 第三个点。 value4 FPVector2 第四个点。 amount FP 插值参数。 result FPVector2 Catmull-Rom 插值结果。 Clamp(FPVector2, FPVector2, FPVector2) 将向量限制在指定的最小值和最大值之间。 public static FPVector2 Clamp(FPVector2 value1, FPVector2 min, FPVector2 max) Parameters value1 FPVector2 要限制的向量。 min FPVector2 最小值。 max FPVector2 最大值。 Returns FPVector2 限制后的向量。 Clamp(ref FPVector2, ref FPVector2, ref FPVector2, out FPVector2) 将向量限制在指定的最小值和最大值之间。 public static void Clamp(ref FPVector2 value1, ref FPVector2 min, ref FPVector2 max, out FPVector2 result) Parameters value1 FPVector2 要限制的向量。 min FPVector2 最小值。 max FPVector2 最大值。 result FPVector2 限制后的向量。 ClampMagnitude(FPVector2, FP) 将向量的长度限制在指定的最大值内。 public static FPVector2 ClampMagnitude(FPVector2 vector, FP maxLength) Parameters vector FPVector2 要限制的向量。 maxLength FP 最大长度。 Returns FPVector2 限制后的向量。 Distance(FPVector2, FPVector2) 计算两个向量之间的距离。 public static FP Distance(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FP 两个向量之间的距离。 Distance(ref FPVector2, ref FPVector2, out FP) 计算两个向量之间的距离。 public static void Distance(ref FPVector2 value1, ref FPVector2 value2, out FP result) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 result FP 两个向量之间的距离。 DistanceSquared(FPVector2, FPVector2) 计算两个向量之间的平方距离。 public static FP DistanceSquared(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FP 两个向量之间的平方距离。 DistanceSquared(ref FPVector2, ref FPVector2, out FP) 计算两个向量之间的平方距离。 public static void DistanceSquared(ref FPVector2 value1, ref FPVector2 value2, out FP result) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 result FP 两个向量之间的平方距离。 Divide(FPVector2, FP) 计算向量与标量的除法。 public static FPVector2 Divide(FPVector2 value1, FP divider) Parameters value1 FPVector2 被除数向量。 divider FP 除数标量。 Returns FPVector2 向量与标量的除法结果。 Divide(FPVector2, FPVector2) 计算两个向量的除法。 public static FPVector2 Divide(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 被除数向量。 value2 FPVector2 除数向量。 Returns FPVector2 两个向量的除法结果。 Divide(ref FPVector2, FP, out FPVector2) 计算向量与标量的除法。 public static void Divide(ref FPVector2 value1, FP divider, out FPVector2 result) Parameters value1 FPVector2 被除数向量。 divider FP 除数标量。 result FPVector2 向量与标量的除法结果。 Divide(ref FPVector2, ref FPVector2, out FPVector2) 计算两个向量的除法。 public static void Divide(ref FPVector2 value1, ref FPVector2 value2, out FPVector2 result) Parameters value1 FPVector2 被除数向量。 value2 FPVector2 除数向量。 result FPVector2 两个向量的除法结果。 Dot(FPVector2, FPVector2) 计算两个向量的点积。 public static FP Dot(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FP 两个向量的点积。 Dot(ref FPVector2, ref FPVector2, out FP) 计算两个向量的点积。 public static void Dot(ref FPVector2 value1, ref FPVector2 value2, out FP result) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 result FP 两个向量的点积。 Equals(FPVector2) 检查另一个 FPVector2 是否等于当前实例。 public bool Equals(FPVector2 other) Parameters other FPVector2 要比较的 FPVector2。 Returns bool 如果另一个 FPVector2 等于当前实例，则返回 true；否则返回 false。 Equals(object) 检查对象是否等于当前 FPVector2 实例。 public override bool Equals(object obj) Parameters obj object 要比较的对象。 Returns bool 如果对象等于当前实例，则返回 true；否则返回 false。 GetHashCode() 获取当前 FPVector2 实例的哈希代码。 public override int GetHashCode() Returns int 当前 FPVector2 实例的哈希代码。 Hermite(FPVector2, FPVector2, FPVector2, FPVector2, FP) 计算四个点的 Hermite 插值。 public static FPVector2 Hermite(FPVector2 value1, FPVector2 tangent1, FPVector2 value2, FPVector2 tangent2, FP amount) Parameters value1 FPVector2 第一个点。 tangent1 FPVector2 第一个点的切线。 value2 FPVector2 第二个点。 tangent2 FPVector2 第二个点的切线。 amount FP 插值参数。 Returns FPVector2 Hermite 插值结果。 Hermite(ref FPVector2, ref FPVector2, ref FPVector2, ref FPVector2, FP, out FPVector2) 计算四个点的 Hermite 插值。 public static void Hermite(ref FPVector2 value1, ref FPVector2 tangent1, ref FPVector2 value2, ref FPVector2 tangent2, FP amount, out FPVector2 result) Parameters value1 FPVector2 第一个点。 tangent1 FPVector2 第一个点的切线。 value2 FPVector2 第二个点。 tangent2 FPVector2 第二个点的切线。 amount FP 插值参数。 result FPVector2 Hermite 插值结果。 LengthSquared() 获取向量的平方长度。 public FP LengthSquared() Returns FP 向量的平方长度。 Lerp(FPVector2, FPVector2, FP) 在两个向量之间进行线性插值，插值参数在 0 到 1 之间。 public static FPVector2 Lerp(FPVector2 value1, FPVector2 value2, FP amount) Parameters value1 FPVector2 起始向量。 value2 FPVector2 结束向量。 amount FP 插值参数。 Returns FPVector2 插值结果。 LerpUnclamped(FPVector2, FPVector2, FP) 在两个向量之间进行线性插值，插值参数不受限制。 public static FPVector2 LerpUnclamped(FPVector2 value1, FPVector2 value2, FP amount) Parameters value1 FPVector2 起始向量。 value2 FPVector2 结束向量。 amount FP 插值参数。 Returns FPVector2 插值结果。 LerpUnclamped(ref FPVector2, ref FPVector2, FP, out FPVector2) 在两个向量之间进行线性插值，插值参数不受限制。 public static void LerpUnclamped(ref FPVector2 value1, ref FPVector2 value2, FP amount, out FPVector2 result) Parameters value1 FPVector2 起始向量。 value2 FPVector2 结束向量。 amount FP 插值参数。 result FPVector2 插值结果。 Max(FPVector2, FPVector2) 返回两个向量中的较大值。 public static FPVector2 Max(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FPVector2 较大的向量。 Max(ref FPVector2, ref FPVector2, out FPVector2) 返回两个向量中的较大值。 public static void Max(ref FPVector2 value1, ref FPVector2 value2, out FPVector2 result) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 result FPVector2 较大的向量。 Min(FPVector2, FPVector2) 返回两个向量中的较小值。 public static FPVector2 Min(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FPVector2 较小的向量。 Min(ref FPVector2, ref FPVector2, out FPVector2) 返回两个向量中的较小值。 public static void Min(ref FPVector2 value1, ref FPVector2 value2, out FPVector2 result) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 result FPVector2 较小的向量。 Multiply(FPVector2, FP) 将向量与标量相乘。 public static FPVector2 Multiply(FPVector2 value1, FP scaleFactor) Parameters value1 FPVector2 向量。 scaleFactor FP 标量。 Returns FPVector2 乘法结果。 Multiply(FPVector2, FPVector2) 按元素乘法操作两个向量。 public static FPVector2 Multiply(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FPVector2 乘法结果。 Multiply(ref FPVector2, FP, out FPVector2) 将向量与标量相乘，并将结果存储在输出参数中。 public static void Multiply(ref FPVector2 value1, FP scaleFactor, out FPVector2 result) Parameters value1 FPVector2 向量。 scaleFactor FP 标量。 result FPVector2 乘法结果。 Multiply(ref FPVector2, ref FPVector2, out FPVector2) 按元素乘法操作两个向量，并将结果存储在输出参数中。 public static void Multiply(ref FPVector2 value1, ref FPVector2 value2, out FPVector2 result) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 result FPVector2 乘法结果。 Negate(FPVector2) 取向量的负值。 public static FPVector2 Negate(FPVector2 value) Parameters value FPVector2 输入向量。 Returns FPVector2 负值向量。 Negate(ref FPVector2, out FPVector2) 取向量的负值，并将结果存储在输出参数中。 public static void Negate(ref FPVector2 value, out FPVector2 result) Parameters value FPVector2 输入向量。 result FPVector2 负值向量。 Normalize() 归一化当前向量。 public void Normalize() Normalize(FPVector2) 归一化指定的向量。 public static FPVector2 Normalize(FPVector2 value) Parameters value FPVector2 输入向量。 Returns FPVector2 归一化后的向量。 Normalize(ref FPVector2, out FPVector2) 归一化指定的向量，并将结果存储在输出参数中。 public static void Normalize(ref FPVector2 value, out FPVector2 result) Parameters value FPVector2 输入向量。 result FPVector2 归一化后的向量。 Reflect(FPVector2, FPVector2) 计算向量在给定法线上的反射向量。 public static FPVector2 Reflect(FPVector2 vector, FPVector2 normal) Parameters vector FPVector2 原始向量。 normal FPVector2 法线向量。 Returns FPVector2 反射向量。 Reflect(ref FPVector2, ref FPVector2, out FPVector2) 计算向量在给定法线上的反射向量。 public static void Reflect(ref FPVector2 vector, ref FPVector2 normal, out FPVector2 result) Parameters vector FPVector2 原始向量。 normal FPVector2 法线向量。 result FPVector2 反射向量。 Rotate(FPVector2, FP) 旋转向量。 public static FPVector2 Rotate(FPVector2 a, FP deg) Parameters a FPVector2 输入向量。 deg FP 旋转角度（以度为单位）。 Returns FPVector2 旋转后的向量。 Scale(FPVector2) 按元素缩放向量。 public void Scale(FPVector2 other) Parameters other FPVector2 缩放因子向量。 Scale(FPVector2, FPVector2) 按元素缩放两个向量。 public static FPVector2 Scale(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FPVector2 缩放后的向量。 Set(FP, FP) 设置向量的 X 和 Y 坐标。 public void Set(FP x, FP y) Parameters x FP 向量的 X 坐标。 y FP 向量的 Y 坐标。 SmoothStep(FPVector2, FPVector2, FP) 计算两个向量之间的平滑插值。 public static FPVector2 SmoothStep(FPVector2 value1, FPVector2 value2, FP amount) Parameters value1 FPVector2 起始向量。 value2 FPVector2 结束向量。 amount FP 插值因子，范围在 [0, 1] 之间。 Returns FPVector2 平滑插值后的向量。 SmoothStep(ref FPVector2, ref FPVector2, FP, out FPVector2) 计算两个向量之间的平滑插值，并将结果存储在输出参数中。 public static void SmoothStep(ref FPVector2 value1, ref FPVector2 value2, FP amount, out FPVector2 result) Parameters value1 FPVector2 起始向量。 value2 FPVector2 结束向量。 amount FP 插值因子，范围在 [0, 1] 之间。 result FPVector2 平滑插值后的向量。 Subtract(FPVector2, FPVector2) 计算两个向量的差。 public static FPVector2 Subtract(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FPVector2 两个向量的差。 Subtract(ref FPVector2, ref FPVector2, out FPVector2) 计算两个向量的差，并将结果存储在输出参数中。 public static void Subtract(ref FPVector2 value1, ref FPVector2 value2, out FPVector2 result) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 result FPVector2 两个向量的差。 ToFPVector3() 将二维向量转换为三维向量，Z 坐标默认为 0。 public FPVector3 ToFPVector3() Returns FPVector3 转换后的三维向量。 ToString() 返回向量的字符串表示形式。 public override string ToString() Returns string 向量的字符串表示形式。 Operators operator +(FPVector2, FPVector2) 向量加法运算符，返回两个 FPVector2 的和。 public static FPVector2 operator +(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个 FPVector2。 value2 FPVector2 第二个 FPVector2。 Returns FPVector2 两个 FPVector2 的和。 operator /(FPVector2, FP) 向量与标量的除法运算符，返回一个新的 FPVector2，其 x 和 y 分量分别为原向量与标量的商。 public static FPVector2 operator /(FPVector2 value1, FP divider) Parameters value1 FPVector2 被除数 FPVector2。 divider FP 标量。 Returns FPVector2 新的 FPVector2。 operator /(FPVector2, FPVector2) 向量除法运算符，返回一个新的 FPVector2，其 x 和 y 分量分别为原向量与另一个向量对应分量的商。 public static FPVector2 operator /(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 被除数 FPVector2。 value2 FPVector2 除数 FPVector2。 Returns FPVector2 新的 FPVector2。 operator ==(FPVector2, FPVector2) 判断两个 FPVector2 是否相等。 public static bool operator ==(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个 FPVector2。 value2 FPVector2 第二个 FPVector2。 Returns bool 如果两个 FPVector2 相等，则返回 true；否则返回 false。 operator !=(FPVector2, FPVector2) 判断两个 FPVector2 是否不相等。 public static bool operator !=(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个 FPVector2。 value2 FPVector2 第二个 FPVector2。 Returns bool 如果两个 FPVector2 不相等，则返回 true；否则返回 false。 operator *(FP, FPVector2) 标量与向量的乘法运算符，返回一个新的 FPVector2，其 x 和 y 分量分别为标量与原向量的乘积。 public static FPVector2 operator *(FP scaleFactor, FPVector2 value) Parameters scaleFactor FP 标量。 value FPVector2 FPVector2。 Returns FPVector2 新的 FPVector2。 operator *(FPVector2, FP) 向量与标量的乘法运算符，返回一个新的 FPVector2，其 x 和 y 分量分别为原向量与标量的乘积。 public static FPVector2 operator *(FPVector2 value, FP scaleFactor) Parameters value FPVector2 FPVector2。 scaleFactor FP 标量。 Returns FPVector2 新的 FPVector2。 operator *(FPVector2, FPVector2) 计算两个 FPVector2 的点积。 public static FP operator *(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个 FPVector2。 value2 FPVector2 第二个 FPVector2。 Returns FP 两个 FPVector2 的点积。 operator -(FPVector2, FPVector2) 向量减法运算符，返回两个 FPVector2 的差。 public static FPVector2 operator -(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 被减数 FPVector2。 value2 FPVector2 减数 FPVector2。 Returns FPVector2 两个 FPVector2 的差。 operator -(FPVector2) 取反运算符，返回一个新的 FPVector2，其 x 和 y 分量为原向量的相反数。 public static FPVector2 operator -(FPVector2 value) Parameters value FPVector2 要取反的 FPVector2。 Returns FPVector2 取反后的 FPVector2。"
  },
  "api/GameFrameX.Utility.Math.FPVector3.html": {
    "href": "api/GameFrameX.Utility.Math.FPVector3.html",
    "title": "Struct FPVector3 | GameFrameX.Server",
    "summary": "Struct FPVector3 Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll 表示一个三维向量结构。 [Serializable] public struct FPVector3 Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FPVector3(FP) 构造函数，初始化结构的新实例。 public FPVector3(FP xyz) Parameters xyz FP 向量的所有组件都设置为 xyz。 FPVector3(FP, FP, FP) 构造函数，初始化结构的新实例。 public FPVector3(FP x, FP y, FP z) Parameters x FP 向量的 X 组件。 y FP 向量的 Y 组件。 z FP 向量的 Z 组件。 FPVector3(int, int, int) 构造函数，初始化结构的新实例。 public FPVector3(int x, int y, int z) Parameters x int 向量的 X 组件。 y int 向量的 Y 组件。 z int 向量的 Z 组件。 Fields MaxValue 组件为 (FP.MaxValue,FP.MaxValue,FP.MaxValue) 的向量。 public static readonly FPVector3 MaxValue Field Value FPVector3 MinValue 组件为 (FP.MinValue,FP.MinValue,FP.MinValue) 的向量。 public static readonly FPVector3 MinValue Field Value FPVector3 back 组件为 (0,0,-1) 的向量。 public static readonly FPVector3 back Field Value FPVector3 down 组件为 (0,-1,0) 的向量。 public static readonly FPVector3 down Field Value FPVector3 forward 组件为 (0,0,1) 的向量。 public static readonly FPVector3 forward Field Value FPVector3 left 组件为 (-1,0,0) 的向量。 public static readonly FPVector3 left Field Value FPVector3 one 组件为 (1,1,1) 的向量。 public static readonly FPVector3 one Field Value FPVector3 right 组件为 (1,0,0) 的向量。 public static readonly FPVector3 right Field Value FPVector3 up 组件为 (0,1,0) 的向量。 public static readonly FPVector3 up Field Value FPVector3 x 向量的 X 组件。 public FP x Field Value FP y 向量的 Y 组件。 public FP y Field Value FP z 向量的 Z 组件。 public FP z Field Value FP zero 组件为 (0,0,0) 的向量。 public static readonly FPVector3 zero Field Value FPVector3 Properties magnitude 获取向量的长度。 public FP magnitude { get; } Property Value FP 返回向量的长度。 normalized 获取向量的归一化版本。 public FPVector3 normalized { get; } Property Value FPVector3 返回归一化后的向量。 sqrMagnitude 获取向量的平方长度。 public FP sqrMagnitude { get; } Property Value FP 返回向量的平方长度。 Methods Abs(FPVector3) 返回向量的绝对值。 public static FPVector3 Abs(FPVector3 other) Parameters other FPVector3 要计算绝对值的向量。 Returns FPVector3 返回绝对值向量。 Add(FPVector3, FPVector3) 将两个向量相加。 public static FPVector3 Add(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 第一个向量。 value2 FPVector3 第二个向量。 Returns FPVector3 返回两个向量的和。 Add(ref FPVector3, ref FPVector3, out FPVector3) 将两个向量相加。 public static void Add(ref FPVector3 value1, ref FPVector3 value2, out FPVector3 result) Parameters value1 FPVector3 第一个向量。 value2 FPVector3 第二个向量。 result FPVector3 返回两个向量的和。 Angle(FPVector3, FPVector3) 返回两个向量之间的角度（以度为单位）。 public static FP Angle(FPVector3 from, FPVector3 to) Parameters from FPVector3 起始向量。 to FPVector3 目标向量。 Returns FP 返回两个向量之间的角度。 ClampMagnitude(FPVector3, FP) 限制向量的长度。 public static FPVector3 ClampMagnitude(FPVector3 vector3, FP maxLength) Parameters vector3 FPVector3 要限制的向量。 maxLength FP 最大长度。 Returns FPVector3 返回限制后的向量。 Cross(FPVector3, FPVector3) 计算两个向量的叉积。 public static FPVector3 Cross(FPVector3 vector1, FPVector3 vector2) Parameters vector1 FPVector3 第一个向量。 vector2 FPVector3 第二个向量。 Returns FPVector3 返回两个向量的叉积。 Cross(ref FPVector3, ref FPVector3, out FPVector3) 计算两个向量的叉积。 public static void Cross(ref FPVector3 vector1, ref FPVector3 vector2, out FPVector3 result) Parameters vector1 FPVector3 第一个向量。 vector2 FPVector3 第二个向量。 result FPVector3 返回两个向量的叉积。 Distance(FPVector3, FPVector3) 计算两个三维向量之间的欧几里得距离。 public static FP Distance(FPVector3 v1, FPVector3 v2) Parameters v1 FPVector3 第一个向量。 v2 FPVector3 第二个向量。 Returns FP 返回两个向量之间的距离。 Divide(FPVector3, FP) 将向量除以一个因子。 public static FPVector3 Divide(FPVector3 value1, FP scaleFactor) Parameters value1 FPVector3 要除的向量。 scaleFactor FP 缩放因子。 Returns FPVector3 返回缩放后的向量。 Divide(ref FPVector3, FP, out FPVector3) 将向量除以一个因子。 public static void Divide(ref FPVector3 value1, FP scaleFactor, out FPVector3 result) Parameters value1 FPVector3 要除的向量。 scaleFactor FP 缩放因子。 result FPVector3 返回缩放后的向量。 Dot(FPVector3, FPVector3) 计算两个向量的点积。 public static FP Dot(FPVector3 vector1, FPVector3 vector2) Parameters vector1 FPVector3 第一个向量。 vector2 FPVector3 第二个向量。 Returns FP 返回两个向量的点积。 Dot(ref FPVector3, ref FPVector3) 计算两个向量的点积。 public static FP Dot(ref FPVector3 vector1, ref FPVector3 vector2) Parameters vector1 FPVector3 第一个向量。 vector2 FPVector3 第二个向量。 Returns FP 返回两个向量的点积。 Equals(object) 测试一个对象是否等于此向量。 public override bool Equals(object obj) Parameters obj object 要测试的对象。 Returns bool 如果相等则返回 true，否则返回 false。 GetHashCode() 获取向量的哈希码。 public override int GetHashCode() Returns int 返回向量的哈希码。 IsNearlyZero() 检查向量的长度是否接近零。 public bool IsNearlyZero() Returns bool 如果向量接近零则返回 true，否则返回 false。 IsZero() 检查向量的长度是否为零。 public bool IsZero() Returns bool 如果向量为零则返回 true，否则返回 false。 Lerp(FPVector3, FPVector3, FP) 在两个向量之间进行线性插值。 public static FPVector3 Lerp(FPVector3 from, FPVector3 to, FP percent) Parameters from FPVector3 起始向量。 to FPVector3 目标向量。 percent FP 插值比例。 Returns FPVector3 返回插值结果。 MakeZero() 设置向量的长度为零。 public void MakeZero() Max(FPVector3, FPVector3) 获取两个向量的最大 x、y 和 z 值。 public static FPVector3 Max(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 第一个向量。 value2 FPVector3 第二个向量。 Returns FPVector3 返回最大值向量。 Max(ref FPVector3, ref FPVector3, out FPVector3) 获取两个向量的最大 x、y 和 z 值。 public static void Max(ref FPVector3 value1, ref FPVector3 value2, out FPVector3 result) Parameters value1 FPVector3 第一个向量。 value2 FPVector3 第二个向量。 result FPVector3 返回最大值向量。 Min(FPVector3, FPVector3) 获取两个向量的最小 x、y 和 z 值。 public static FPVector3 Min(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 第一个向量。 value2 FPVector3 第二个向量。 Returns FPVector3 返回最小值向量。 Min(ref FPVector3, ref FPVector3, out FPVector3) 获取两个向量的最小 x、y 和 z 值。 public static void Min(ref FPVector3 value1, ref FPVector3 value2, out FPVector3 result) Parameters value1 FPVector3 第一个向量。 value2 FPVector3 第二个向量。 result FPVector3 返回最小值向量。 Multiply(FPVector3, FP) 将向量与因子相乘。 public static FPVector3 Multiply(FPVector3 value1, FP scaleFactor) Parameters value1 FPVector3 要乘的向量。 scaleFactor FP 缩放因子。 Returns FPVector3 返回乘积向量。 Multiply(ref FPVector3, FP, out FPVector3) 将向量与因子相乘。 public static void Multiply(ref FPVector3 value1, FP scaleFactor, out FPVector3 result) Parameters value1 FPVector3 要乘的向量。 scaleFactor FP 缩放因子。 result FPVector3 返回乘积向量。 Negate() 反转向量的方向。 public void Negate() Negate(FPVector3) 反转向量的方向。 public static FPVector3 Negate(FPVector3 value) Parameters value FPVector3 要反转的向量。 Returns FPVector3 返回反转后的向量。 Negate(ref FPVector3, out FPVector3) 反转向量的方向。 public static void Negate(ref FPVector3 value, out FPVector3 result) Parameters value FPVector3 要反转的向量。 result FPVector3 返回反转后的向量。 Normalize() 归一化此向量。 public void Normalize() Normalize(FPVector3) 归一化给定的向量。 public static FPVector3 Normalize(FPVector3 value) Parameters value FPVector3 要归一化的向量。 Returns FPVector3 返回归一化后的向量。 Normalize(ref FPVector3, out FPVector3) 归一化给定的向量。 public static void Normalize(ref FPVector3 value, out FPVector3 result) Parameters value FPVector3 要归一化的向量。 result FPVector3 返回归一化后的向量。 Project(FPVector3, FPVector3) 将向量投影到另一个向量上。 public static FPVector3 Project(FPVector3 vector3, FPVector3 onNormal) Parameters vector3 FPVector3 要投影的向量。 onNormal FPVector3 投影的基准向量。 Returns FPVector3 返回投影后的向量。 ProjectOnPlane(FPVector3, FPVector3) 将向量投影到由法线定义的平面上。 public static FPVector3 ProjectOnPlane(FPVector3 vector3, FPVector3 planeNormal) Parameters vector3 FPVector3 要投影的向量。 planeNormal FPVector3 平面的法线。 Returns FPVector3 返回投影后的向量。 Scale(FPVector3) 将向量的每个组件与提供的向量的相应组件相乘。 public void Scale(FPVector3 other) Parameters other FPVector3 要与之相乘的向量。 Scale(FPVector3, FPVector3) 将向量的每个组件与提供的向量的相应组件相乘。 public static FPVector3 Scale(FPVector3 vecA, FPVector3 vecB) Parameters vecA FPVector3 第一个向量。 vecB FPVector3 第二个向量。 Returns FPVector3 返回乘积向量。 Set(FP, FP, FP) 设置向量的所有组件为特定值。 public void Set(FP x, FP y, FP z) Parameters x FP 向量的 X 组件。 y FP 向量的 Y 组件。 z FP 向量的 Z 组件。 SignedAngle(FPVector3, FPVector3, FPVector3) 返回两个向量之间的较小角度（以度为单位）。 public static FP SignedAngle(FPVector3 from, FPVector3 to, FPVector3 axis) Parameters from FPVector3 起始向量。 to FPVector3 目标向量。 axis FPVector3 旋转轴。 Returns FP 返回两个向量之间的带符号角度。 Subtract(FPVector3, FPVector3) 将两个向量相减。 public static FPVector3 Subtract(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 第一个向量。 value2 FPVector3 第二个向量。 Returns FPVector3 返回两个向量的差。 Subtract(ref FPVector3, ref FPVector3, out FPVector3) 将两个向量相减。 public static void Subtract(ref FPVector3 value1, ref FPVector3 value2, out FPVector3 result) Parameters value1 FPVector3 第一个向量。 value2 FPVector3 第二个向量。 result FPVector3 返回两个向量的差。 Swap(ref FPVector3, ref FPVector3) 交换两个向量的组件。 public static void Swap(ref FPVector3 vector1, ref FPVector3 vector2) Parameters vector1 FPVector3 第一个向量。 vector2 FPVector3 第二个向量。 ToFPVector2() 将向量转换为二维向量。 public FPVector2 ToFPVector2() Returns FPVector2 返回转换后的二维向量。 ToFPVector4() 将向量转换为四维向量。 public FPVector4 ToFPVector4() Returns FPVector4 返回转换后的四维向量。 ToString() 将向量转换为字符串。 public override string ToString() Returns string 包含所有三个组件的字符串。 Transform(FPVector3, FPMatrix) 通过给定的矩阵变换向量。 public static FPVector3 Transform(FPVector3 position, FPMatrix matrix) Parameters position FPVector3 要变换的向量。 matrix FPMatrix 变换矩阵。 Returns FPVector3 返回变换后的向量。 Transform(ref FPVector3, ref FPMatrix, out FPVector3) 通过给定的矩阵变换向量。 public static void Transform(ref FPVector3 position, ref FPMatrix matrix, out FPVector3 result) Parameters position FPVector3 要变换的向量。 matrix FPMatrix 变换矩阵。 result FPVector3 返回变换后的向量。 TransposedTransform(ref FPVector3, ref FPMatrix, out FPVector3) 通过给定矩阵的转置变换向量。 public static void TransposedTransform(ref FPVector3 position, ref FPMatrix matrix, out FPVector3 result) Parameters position FPVector3 要变换的向量。 matrix FPMatrix 变换矩阵。 result FPVector3 返回变换后的向量。 Operators operator +(FPVector3, FPVector3) 将两个向量相加。 public static FPVector3 operator +(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 第一个向量。 value2 FPVector3 第二个向量。 Returns FPVector3 返回两个向量的和。 operator /(FPVector3, FP) 将向量除以一个因子。 public static FPVector3 operator /(FPVector3 value1, FP scaleFactor) Parameters value1 FPVector3 要除的向量。 scaleFactor FP 缩放因子。 Returns FPVector3 返回缩放后的向量。 operator ==(FPVector3, FPVector3) 测试两个向量是否相等。 public static bool operator ==(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 第一个向量。 value2 FPVector3 第二个向量。 Returns bool 如果两个向量相等则返回 true，否则返回 false。 operator ^(FPVector3, FPVector3) 计算两个向量的叉积。 public static FPVector3 operator ^(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 第一个向量。 value2 FPVector3 第二个向量。 Returns FPVector3 返回两个向量的叉积。 operator !=(FPVector3, FPVector3) 测试两个向量是否不相等。 public static bool operator !=(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 第一个向量。 value2 FPVector3 第二个向量。 Returns bool 如果两个向量不相等则返回 true，否则返回 false。 operator %(FPVector3, FPVector3) 计算两个向量的叉积。 public static FPVector3 operator %(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 第一个向量。 value2 FPVector3 第二个向量。 Returns FPVector3 返回两个向量的叉积。 operator *(FP, FPVector3) 将向量与缩放因子相乘。 public static FPVector3 operator *(FP value1, FPVector3 value2) Parameters value1 FP 缩放因子。 value2 FPVector3 要缩放的向量。 Returns FPVector3 返回缩放后的向量。 operator *(FPVector3, FP) 将向量与缩放因子相乘。 public static FPVector3 operator *(FPVector3 value1, FP value2) Parameters value1 FPVector3 要缩放的向量。 value2 FP 缩放因子。 Returns FPVector3 返回缩放后的向量。 operator *(FPVector3, FPVector3) 计算两个向量的点积。 public static FP operator *(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 第一个向量。 value2 FPVector3 第二个向量。 Returns FP 返回两个向量的点积。 operator -(FPVector3, FPVector3) 将两个向量相减。 public static FPVector3 operator -(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 第一个向量。 value2 FPVector3 第二个向量。 Returns FPVector3 返回两个向量的差。 operator -(FPVector3) 反转向量的方向。 public static FPVector3 operator -(FPVector3 value) Parameters value FPVector3 要反转的向量。 Returns FPVector3 返回反转后的向量。"
  },
  "api/GameFrameX.Utility.Math.FPVector4.html": {
    "href": "api/GameFrameX.Utility.Math.FPVector4.html",
    "title": "Struct FPVector4 | GameFrameX.Server",
    "summary": "Struct FPVector4 Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll 表示一个四维向量结构。 [Serializable] public struct FPVector4 Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FPVector4(FP) 构造函数，初始化结构的新实例。 public FPVector4(FP xyzw) Parameters xyzw FP 向量的所有组件都设置为 xyzw。 FPVector4(FP, FP, FP, FP) 构造函数，初始化结构的新实例。 public FPVector4(FP x, FP y, FP z, FP w) Parameters x FP 向量的 X 组件。 y FP 向量的 Y 组件。 z FP 向量的 Z 组件。 w FP 向量的 W 组件。 FPVector4(int, int, int, int) 构造函数，初始化结构的新实例。 public FPVector4(int x, int y, int z, int w) Parameters x int 向量的 X 组件。 y int 向量的 Y 组件。 z int 向量的 Z 组件。 w int 向量的 W 组件。 Fields MaxValue 组件为 (FP.MaxValue,FP.MaxValue,FP.MaxValue) 的向量。 public static readonly FPVector4 MaxValue Field Value FPVector4 MinValue 组件为 (FP.MinValue,FP.MinValue,FP.MinValue) 的向量。 public static readonly FPVector4 MinValue Field Value FPVector4 one 组件为 (1,1,1,1) 的向量。 public static readonly FPVector4 one Field Value FPVector4 w 向量的 W 组件。 public FP w Field Value FP x 向量的 X 组件。 public FP x Field Value FP y 向量的 Y 组件。 public FP y Field Value FP z 向量的 Z 组件。 public FP z Field Value FP zero 组件为 (0,0,0,0) 的向量。 public static readonly FPVector4 zero Field Value FPVector4 Properties magnitude 获取向量的长度。 public FP magnitude { get; } Property Value FP 返回向量的长度。 normalized 获取向量的归一化版本。 public FPVector4 normalized { get; } Property Value FPVector4 返回归一化后的向量。 sqrMagnitude 获取向量的平方长度。 public FP sqrMagnitude { get; } Property Value FP 返回向量的平方长度。 Methods Abs(FPVector4) 返回向量的绝对值。 public static FPVector4 Abs(FPVector4 other) Parameters other FPVector4 要计算绝对值的向量。 Returns FPVector4 返回绝对值向量。 Add(FPVector4, FPVector4) 将两个向量相加。 public static FPVector4 Add(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 第一个向量。 value2 FPVector4 第二个向量。 Returns FPVector4 返回两个向量的和。 Add(ref FPVector4, ref FPVector4, out FPVector4) 将两个向量相加。 public static void Add(ref FPVector4 value1, ref FPVector4 value2, out FPVector4 result) Parameters value1 FPVector4 第一个向量。 value2 FPVector4 第二个向量。 result FPVector4 返回两个向量的和。 ClampMagnitude(FPVector4, FP) 限制向量的长度。 public static FPVector4 ClampMagnitude(FPVector4 vector, FP maxLength) Parameters vector FPVector4 要限制的向量。 maxLength FP 最大长度。 Returns FPVector4 返回限制后的向量。 Distance(FPVector4, FPVector4) 计算两个向量之间的距离。 public static FP Distance(FPVector4 v1, FPVector4 v2) Parameters v1 FPVector4 第一个向量。 v2 FPVector4 第二个向量。 Returns FP 返回两个向量之间的距离。 Divide(FPVector4, FP) 将向量除以一个因子。 public static FPVector4 Divide(FPVector4 value1, FP scaleFactor) Parameters value1 FPVector4 要除的向量。 scaleFactor FP 缩放因子。 Returns FPVector4 返回缩放后的向量。 Divide(ref FPVector4, FP, out FPVector4) 将向量除以一个因子。 public static void Divide(ref FPVector4 value1, FP scaleFactor, out FPVector4 result) Parameters value1 FPVector4 要除的向量。 scaleFactor FP 缩放因子。 result FPVector4 返回缩放后的向量。 Dot(FPVector4, FPVector4) 计算两个向量的点积。 public static FP Dot(FPVector4 vector1, FPVector4 vector2) Parameters vector1 FPVector4 第一个向量。 vector2 FPVector4 第二个向量。 Returns FP 返回两个向量的点积。 Dot(ref FPVector4, ref FPVector4) 计算两个向量的点积。 public static FP Dot(ref FPVector4 vector1, ref FPVector4 vector2) Parameters vector1 FPVector4 第一个向量。 vector2 FPVector4 第二个向量。 Returns FP 返回两个向量的点积。 Equals(object) 测试一个对象是否等于此向量。 public override bool Equals(object obj) Parameters obj object 要测试的对象。 Returns bool 如果相等则返回 true，否则返回 false。 GetHashCode() 获取向量的哈希码。 public override int GetHashCode() Returns int 返回向量的哈希码。 IsNearlyZero() 检查向量的长度是否接近零。 public bool IsNearlyZero() Returns bool 如果向量接近零则返回 true，否则返回 false。 IsZero() 检查向量的长度是否为零。 public bool IsZero() Returns bool 如果向量为零则返回 true，否则返回 false。 Lerp(FPVector4, FPVector4, FP) 在两个向量之间进行线性插值。 public static FPVector4 Lerp(FPVector4 from, FPVector4 to, FP percent) Parameters from FPVector4 起始向量。 to FPVector4 目标向量。 percent FP 插值参数。 Returns FPVector4 返回插值结果。 MakeZero() 将向量的长度设置为零。 public void MakeZero() Max(FPVector4, FPVector4) 获取两个向量的最大 x、y、z 和 w 值。 public static FPVector4 Max(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 第一个向量。 value2 FPVector4 第二个向量。 Returns FPVector4 返回最大值向量。 Max(ref FPVector4, ref FPVector4, out FPVector4) 获取两个向量的最大 x、y、z 和 w 值。 public static void Max(ref FPVector4 value1, ref FPVector4 value2, out FPVector4 result) Parameters value1 FPVector4 第一个向量。 value2 FPVector4 第二个向量。 result FPVector4 返回最大值向量。 Min(FPVector4, FPVector4) 获取两个向量的最小 x、y、z 和 w 值。 public static FPVector4 Min(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 第一个向量。 value2 FPVector4 第二个向量。 Returns FPVector4 返回最小值向量。 Min(ref FPVector4, ref FPVector4, out FPVector4) 获取两个向量的最小 x、y、z 和 w 值。 public static void Min(ref FPVector4 value1, ref FPVector4 value2, out FPVector4 result) Parameters value1 FPVector4 第一个向量。 value2 FPVector4 第二个向量。 result FPVector4 返回最小值向量。 Multiply(FPVector4, FP) 将向量与因子相乘。 public static FPVector4 Multiply(FPVector4 value1, FP scaleFactor) Parameters value1 FPVector4 要乘的向量。 scaleFactor FP 缩放因子。 Returns FPVector4 返回乘法后的向量。 Multiply(ref FPVector4, FP, out FPVector4) 将向量与因子相乘。 public static void Multiply(ref FPVector4 value1, FP scaleFactor, out FPVector4 result) Parameters value1 FPVector4 要乘的向量。 scaleFactor FP 缩放因子。 result FPVector4 返回乘法后的向量。 Negate() 反转向量的方向。 public void Negate() Negate(FPVector4) 反转向量的方向。 public static FPVector4 Negate(FPVector4 value) Parameters value FPVector4 要反转的向量。 Returns FPVector4 返回反转后的向量。 Negate(ref FPVector4, out FPVector4) 反转向量的方向。 public static void Negate(ref FPVector4 value, out FPVector4 result) Parameters value FPVector4 要反转的向量。 result FPVector4 返回反转后的向量。 Normalize() 归一化此向量。 public void Normalize() Normalize(FPVector4) 归一化给定的向量。 public static FPVector4 Normalize(FPVector4 value) Parameters value FPVector4 要归一化的向量。 Returns FPVector4 返回归一化后的向量。 Normalize(ref FPVector4, out FPVector4) 归一化给定的向量。 public static void Normalize(ref FPVector4 value, out FPVector4 result) Parameters value FPVector4 要归一化的向量。 result FPVector4 返回归一化后的向量。 Scale(FPVector4) 将向量的每个组件与提供的向量的相应组件相乘。 public void Scale(FPVector4 other) Parameters other FPVector4 要与之相乘的向量。 Scale(FPVector4, FPVector4) 将向量的每个组件与提供的向量的相应组件相乘。 public static FPVector4 Scale(FPVector4 vecA, FPVector4 vecB) Parameters vecA FPVector4 第一个向量。 vecB FPVector4 第二个向量。 Returns FPVector4 返回相乘后的向量。 Set(FP, FP, FP, FP) 设置向量的所有组件为特定值。 public void Set(FP x, FP y, FP z, FP w) Parameters x FP 向量的 X 组件。 y FP 向量的 Y 组件。 z FP 向量的 Z 组件。 w FP 向量的 W 组件。 Subtract(FPVector4, FPVector4) 将两个向量相减。 public static FPVector4 Subtract(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 第一个向量。 value2 FPVector4 第二个向量。 Returns FPVector4 返回两个向量的差。 Subtract(ref FPVector4, ref FPVector4, out FPVector4) 将两个向量相减。 public static void Subtract(ref FPVector4 value1, ref FPVector4 value2, out FPVector4 result) Parameters value1 FPVector4 第一个向量。 value2 FPVector4 第二个向量。 result FPVector4 返回两个向量的差。 Swap(ref FPVector4, ref FPVector4) 交换两个向量的组件。 public static void Swap(ref FPVector4 vector1, ref FPVector4 vector2) Parameters vector1 FPVector4 第一个向量。 vector2 FPVector4 第二个向量。 ToFPVector() 将向量转换为 FPVector3。 public FPVector3 ToFPVector() Returns FPVector3 返回转换后的 FPVector3。 ToFPVector2() 将向量转换为 FPVector2。 public FPVector2 ToFPVector2() Returns FPVector2 返回转换后的 FPVector2。 ToString() 将向量转换为字符串。 public override string ToString() Returns string 包含所有四个组件的字符串。 Transform(FPVector3, FPMatrix4x4) 通过给定的矩阵变换向量。 public static FPVector4 Transform(FPVector3 position, FPMatrix4x4 matrix) Parameters position FPVector3 要变换的三维向量。 matrix FPMatrix4x4 变换矩阵。 Returns FPVector4 变换后的四维向量。 Transform(ref FPVector3, ref FPMatrix4x4, out FPVector4) 通过给定的矩阵变换三维向量。 public static void Transform(ref FPVector3 vector3, ref FPMatrix4x4 matrix, out FPVector4 result) Parameters vector3 FPVector3 要变换的三维向量。 matrix FPMatrix4x4 变换矩阵。 result FPVector4 变换后的四维向量。 Transform(FPVector4, FPMatrix4x4) 通过给定的矩阵变换向量。 public static FPVector4 Transform(FPVector4 position, FPMatrix4x4 matrix) Parameters position FPVector4 要变换的向量。 matrix FPMatrix4x4 变换矩阵。 Returns FPVector4 变换后的向量。 Transform(ref FPVector4, ref FPMatrix4x4, out FPVector4) 通过给定的矩阵变换四维向量。 public static void Transform(ref FPVector4 vector, ref FPMatrix4x4 matrix, out FPVector4 result) Parameters vector FPVector4 要变换的四维向量。 matrix FPMatrix4x4 变换矩阵。 result FPVector4 变换后的四维向量。 Operators operator +(FPVector4, FPVector4) 将两个向量相加。 public static FPVector4 operator +(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 第一个向量。 value2 FPVector4 第二个向量。 Returns FPVector4 返回两个向量的和。 operator /(FPVector4, FP) 将向量除以因子。 public static FPVector4 operator /(FPVector4 value1, FP scaleFactor) Parameters value1 FPVector4 要除的向量。 scaleFactor FP 缩放因子。 Returns FPVector4 返回缩放后的向量。 operator ==(FPVector4, FPVector4) 测试两个向量是否相等。 public static bool operator ==(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 第一个向量。 value2 FPVector4 第二个向量。 Returns bool 如果两个向量相等则返回 true，否则返回 false。 operator !=(FPVector4, FPVector4) 测试两个向量是否不相等。 public static bool operator !=(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 第一个向量。 value2 FPVector4 第二个向量。 Returns bool 如果两个向量不相等则返回 true，否则返回 false。 operator *(FP, FPVector4) 将缩放因子与向量相乘。 public static FPVector4 operator *(FP value1, FPVector4 value2) Parameters value1 FP 缩放因子。 value2 FPVector4 要缩放的向量。 Returns FPVector4 返回缩放后的向量。 operator *(FPVector4, FP) 将向量与缩放因子相乘。 public static FPVector4 operator *(FPVector4 value1, FP value2) Parameters value1 FPVector4 要缩放的向量。 value2 FP 缩放因子。 Returns FPVector4 返回缩放后的向量。 operator *(FPVector4, FPVector4) 计算两个向量的点积。 public static FP operator *(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 第一个向量。 value2 FPVector4 第二个向量。 Returns FP 返回两个向量的点积。 operator -(FPVector4, FPVector4) 将两个向量相减。 public static FPVector4 operator -(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 第一个向量。 value2 FPVector4 第二个向量。 Returns FPVector4 返回两个向量的差。 operator -(FPVector4) 反转向量的方向。 public static FPVector4 operator -(FPVector4 value) Parameters value FPVector4 要反转的向量。 Returns FPVector4 返回反转后的向量。"
  },
  "api/GameFrameX.Utility.Math.html": {
    "href": "api/GameFrameX.Utility.Math.html",
    "title": "Namespace GameFrameX.Utility.Math | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Utility.Math Classes FPMath 包含常见的数学操作。 FPRandom 生成基于确定性方法的随机数。 Structs FP 表示 Q31.32 固定点数。 FPMatrix 表示一个3x3矩阵。 FPMatrix4x4 4x4 矩阵结构体，用于表示三维空间中的变换。 FPQuaternion 表示一个四元数，用于表示三维空间中的方向和旋转。 FPVector2 表示一个二维向量结构。 FPVector3 表示一个三维向量结构。 FPVector4 表示一个四维向量结构。"
  },
  "api/GameFrameX.Utility.NetHelper.html": {
    "href": "api/GameFrameX.Utility.NetHelper.html",
    "title": "Class NetHelper | GameFrameX.Server",
    "summary": "Class NetHelper Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 网络帮助类 提供网络相关的实用工具方法，包括IP地址验证、端口可用性检查、本地IP获取等功能 public static class NetHelper Inheritance object NetHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 核心功能： IP地址格式验证和解析 端口可用性检测和管理 本地网络接口信息获取 网络连接状态查询 适用场景： 网络服务器端口分配 客户端连接配置验证 网络诊断和监控 分布式系统节点发现 Methods GetAvailablePorts(int, int, int) 获取指定范围内的可用端口列表 public static List<int> GetAvailablePorts(int startPort, int endPort, int maxCount = 10) Parameters startPort int 起始端口号 endPort int 结束端口号 maxCount int 最大返回数量，默认为10 Returns List<int> 可用端口号列表 Exceptions ArgumentOutOfRangeException 当端口范围无效时抛出此异常 GetFirstAvailablePort(int, int) 获取第一个可用的端口号 public static int GetFirstAvailablePort(int startPort = 667, int maxPort = 65535) Parameters startPort int 起始端口号，默认为667 maxPort int 结束端口号，默认为65535 Returns int 第一个可用的端口号，如果没有可用端口号则返回-1 Exceptions ArgumentOutOfRangeException 当startPort小于1或大于65535时抛出此异常 ArgumentOutOfRangeException 当maxPort小于1或大于65535时抛出此异常 ArgumentException 当startPort大于等于maxPort时抛出此异常 GetLocalIpList(AddressFamily) 获取本地IP地址列表 public static List<string> GetLocalIpList(AddressFamily addressFamily = AddressFamily.InterNetwork) Parameters addressFamily AddressFamily IP地址类型,默认为IPv4 Returns List<string> 本地IP地址列表 GetMacAddresses() 获取本机MAC地址列表 public static List<string> GetMacAddresses() Returns List<string> MAC地址字符串列表 GetPublicIpAddressAsync(int) 获取本机的公网IP地址 public static Task<string?> GetPublicIpAddressAsync(int timeout = 10000) Parameters timeout int 超时时间（毫秒），默认10000毫秒 Returns Task<string> 公网IP地址字符串，获取失败返回null Exceptions ArgumentOutOfRangeException 当timeout小于0时抛出此异常 IsIpInSubnet(string, string, string) 验证IP地址是否在指定的子网内 public static bool IsIpInSubnet(string ipAddress, string networkAddress, string subnetMask) Parameters ipAddress string 要验证的IP地址 networkAddress string 网络地址 subnetMask string 子网掩码 Returns bool 如果IP地址在子网内，返回true；否则返回false Exceptions ArgumentException 当IP地址格式无效时抛出此异常 IsNetworkReachable(string, int) 检测网络连通性 public static bool IsNetworkReachable(string host, int timeout = 5000) Parameters host string 目标主机地址 timeout int 超时时间（毫秒），默认5000毫秒 Returns bool 如果网络连通，返回true；否则返回false Exceptions ArgumentException 当host为null或空字符串时抛出此异常 ArgumentOutOfRangeException 当timeout小于0时抛出此异常 IsPrivateIpAddress(string) 判断IP地址是否为私有地址 public static bool IsPrivateIpAddress(string ipAddress) Parameters ipAddress string IP地址字符串 Returns bool 如果是私有地址，返回true；否则返回false Exceptions ArgumentException 当IP地址格式无效时抛出此异常 IsValidIpAddress(string, out IPAddress) 判断IP地址是否合法 public static bool IsValidIpAddress(string ipAddress, out IPAddress value) Parameters ipAddress string IP地址字符串 value IPAddress 解析成功的IPAddress对象 Returns bool 如果IP地址合法，返回true；否则返回false Exceptions ArgumentNullException 当ipAddress为null时抛出此异常 PortIsAvailable(int) 检查指定端口是否可用 public static bool PortIsAvailable(int port) Parameters port int 要检查的端口号 Returns bool 如果端口未被使用，返回true；否则返回false Exceptions ArgumentOutOfRangeException 当port小于1或大于65535时抛出此异常 PortIsUsed() 获取操作系统已用的端口号 public static List<int> PortIsUsed() Returns List<int> 包含已用端口号的列表"
  },
  "api/GameFrameX.Utility.PlatformRuntimeHelper.html": {
    "href": "api/GameFrameX.Utility.PlatformRuntimeHelper.html",
    "title": "Class PlatformRuntimeHelper | GameFrameX.Server",
    "summary": "Class PlatformRuntimeHelper Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 平台运行时帮助类 public static class PlatformRuntimeHelper Inheritance object PlatformRuntimeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFreeBsd 是否是FreeBSD public static bool IsFreeBsd { get; } Property Value bool IsLinux 是否是Linux public static bool IsLinux { get; } Property Value bool IsOsx 是否是Mac public static bool IsOsx { get; } Property Value bool IsWindows 是否是Windows public static bool IsWindows { get; } Property Value bool"
  },
  "api/GameFrameX.Utility.RandomHelper.html": {
    "href": "api/GameFrameX.Utility.RandomHelper.html",
    "title": "Class RandomHelper | GameFrameX.Server",
    "summary": "Class RandomHelper Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 随机数帮助类 功能概述： 提供线程安全的随机数生成功能 支持多种数据类型的随机数生成（int、long、double、byte[]等） 提供便捷的集合随机选择方法 支持随机选择单个或多个元素 支持获取随机索引 核心特性： 线程安全：使用 Random.Shared 确保多线程环境下的安全性 高性能：避免重复创建 Random 实例 类型安全：支持泛型方法，编译时类型检查 参数验证：使用 .NET 静态方法进行参数检查 应用场景： 游戏开发中的随机事件生成 数据采样和随机测试 随机算法实现 集合元素的随机选择 使用示例： // 生成随机整数 int randomInt = RandomHelper.Next(100); // 从数组中随机选择元素 string[] items = {\"A\", \"B\", \"C\"}; string selected = RandomHelper.RandomSelect(items); // 随机选择多个元素 string[] multipleItems = RandomHelper.Items(items, 2); 注意事项： 所有方法都进行了严格的参数验证 空集合或数组会抛出 ArgumentOutOfRangeException 负数参数会抛出相应的异常 public static class RandomHelper Inheritance object RandomHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Gcd(int, int) 求两个数的最大公约数 public static int Gcd(int a, int b) Parameters a int 第一个整数 b int 第二个整数 Returns int 最大公约数 Gcd(params int[]) 求多个数的最大公约数 public static int Gcd(params int[] input) Parameters input int[] 输入的整数数组 Returns int 最大公约数 Exceptions ArgumentNullException 当input为null时抛出此异常 Ids(int[][], int, bool) 随机获取指定数量的id public static List<int> Ids(int[][] array, int num, bool isCanRepeat = true) Parameters array int[][] 数据列表，每个元素为[id, weight] num int 需要选取的数量 isCanRepeat bool 是否允许重复选取 Returns List<int> 包含随机选取的id列表 Exceptions ArgumentNullException 当array为null时抛出此异常 ArgumentException 当array为空数组时抛出此异常 ArgumentOutOfRangeException 当num小于0时抛出此异常 Ids(string, int, bool) 随机获取指定数量的id public static List<int> Ids(string str, int num, bool isCanRepeat = true) Parameters str string 权重字符串，格式为\"id1+weight1;id2+weight2;...\" num int 需要选取的数量 isCanRepeat bool 是否允许重复选取 Returns List<int> 包含随机选取的id列表 Exceptions ArgumentNullException 当str为null时抛出此异常 ArgumentException 当str为空或格式错误时抛出此异常 ArgumentOutOfRangeException 当num小于0时抛出此异常 Ids<T>(IList<T>, int) 随机选择多个索引 public static int[] Ids<T>(IList<T> items, int count) Parameters items IList<T> 选择项 count int 选择数量 Returns int[] 选择结果索引数组 Type Parameters T 选择项类型 Exceptions ArgumentNullException 当 items 为 null 时抛出此异常 ArgumentOutOfRangeException 当 items 为空集合或 count 小于 0 时抛出此异常 Ids<T>(List<T>, int) 随机选择多个索引 public static int[] Ids<T>(List<T> items, int count) Parameters items List<T> 选择项 count int 选择数量 Returns int[] 选择结果索引数组 Type Parameters T 选择项类型 Exceptions ArgumentNullException 当 items 为 null 时抛出此异常 ArgumentOutOfRangeException 当 items 为空列表或 count 小于 0 时抛出此异常 Ids<T>(T[], int) 随机选择多个索引 public static int[] Ids<T>(T[] items, int count) Parameters items T[] 选择项 count int 选择数量 Returns int[] 选择结果索引数组 Type Parameters T 选择项类型 Exceptions ArgumentNullException 当 items 为 null 时抛出此异常 ArgumentOutOfRangeException 当 items 为空数组或 count 小于 0 时抛出此异常 Idx(int[]) 根据权重随机选取一个id public static int Idx(int[] weights) Parameters weights int[] 权重数组 Returns int 随机选取的id索引 Exceptions ArgumentNullException 当weights为null时抛出此异常 ArgumentException 当weights为空数组时抛出此异常 Idx(int[][], int) 根据权重随机选取一个id public static int Idx(int[][] array, int weightIndex = 1) Parameters array int[][] 数据列表，每个元素为[id, weight] weightIndex int 权重索引 Returns int 随机选取的id索引 Exceptions ArgumentNullException 当array为null时抛出此异常 ArgumentException 当array为空数组时抛出此异常 ArgumentOutOfRangeException 当weightIndex小于0时抛出此异常 Idx<T>(IList<T>) 随机选择索引 public static int Idx<T>(IList<T> items) Parameters items IList<T> 选择项 Returns int 选择结果索引 Type Parameters T 选择项类型 Exceptions ArgumentNullException 当 items 为 null 时抛出此异常 ArgumentException 当 items 为空集合时抛出此异常 Idx<T>(List<T>) 随机选择索引 public static int Idx<T>(List<T> items) Parameters items List<T> 选择项 Returns int 选择结果索引 Type Parameters T 选择项类型 Exceptions ArgumentNullException 当 items 为 null 时抛出此异常 ArgumentException 当 items 为空列表时抛出此异常 Idx<T>(T[]) 随机选择索引 public static int Idx<T>(T[] items) Parameters items T[] 选择项 Returns int 选择结果索引 Type Parameters T 选择项类型 Exceptions ArgumentNullException 当 items 为 null 时抛出此异常 ArgumentException 当 items 为空数组时抛出此异常 Items(int[][], int, bool) 随机获取指定数量的项目 public static List<int[]> Items(int[][] array, int num, bool isCanRepeat = true) Parameters array int[][] 数据列表，每个元素为[id, weight] num int 需要选取的数量 isCanRepeat bool 是否允许重复选取 Returns List<int[]> 包含随机选取的项目列表 Exceptions ArgumentNullException 当array为null时抛出此异常 ArgumentException 当array为空数组时抛出此异常 ArgumentOutOfRangeException 当num小于0时抛出此异常 Items(string, int, bool) 随机获取指定数量的项目 public static List<int[]> Items(string str, int num, bool isCanRepeat = true) Parameters str string 权重字符串，格式为\"id1+weight1;id2+weight2;...\" num int 需要选取的数量 isCanRepeat bool 是否允许重复选取 Returns List<int[]> 包含随机选取的项目列表 Exceptions ArgumentNullException 当str为null时抛出此异常 ArgumentException 当str为空或格式错误时抛出此异常 ArgumentOutOfRangeException 当num小于0时抛出此异常 Items<T>(IList<T>, int) 随机选择多个项目 public static T[] Items<T>(IList<T> items, int count) Parameters items IList<T> 选择项 count int 选择数量 Returns T[] 选择结果数组 Type Parameters T 选择项类型 Exceptions ArgumentNullException 当 items 为 null 时抛出此异常 ArgumentOutOfRangeException 当 items 为空集合或 count 小于 0 时抛出此异常 Items<T>(List<T>, int) 随机选择多个项目 public static T[] Items<T>(List<T> items, int count) Parameters items List<T> 选择项 count int 选择数量 Returns T[] 选择结果数组 Type Parameters T 选择项类型 Exceptions ArgumentNullException 当 items 为 null 时抛出此异常 ArgumentOutOfRangeException 当 items 为空列表或 count 小于 0 时抛出此异常 Items<T>(T[], int) 随机选择多个项目 public static T[] Items<T>(T[] items, int count) Parameters items T[] 选择项 count int 选择数量 Returns T[] 选择结果数组 Type Parameters T 选择项类型 Exceptions ArgumentNullException 当 items 为 null 时抛出此异常 ArgumentOutOfRangeException 当 items 为空数组或 count 小于 0 时抛出此异常 Next() 返回非负随机数。 public static int Next() Returns int 大于等于零且小于 System.Int32.MaxValue 的 32 位带符号整数。 Next(int) 返回一个小于所指定最大值的非负随机数。 public static int Next(int maxValue) Parameters maxValue int 要生成的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于零。 Returns int 大于等于零且小于 maxValue 的 32 位带符号整数，即：返回值的范围通常包括零但不包括 maxValue。不过，如果 maxValue 等于零，则返回 maxValue。 Exceptions ArgumentOutOfRangeException 当 maxValue 小于 0 时抛出此异常 Next(int, int) 返回一个指定范围内的随机数。 public static int Next(int minValue, int maxValue) Parameters minValue int 返回的随机数的下界（随机数可取该下界值）。 maxValue int 返回的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于 minValue。 Returns int 一个大于等于 minValue 且小于 maxValue 的 32 位带符号整数，即：返回的值范围包括 minValue 但不包括 maxValue。如果 minValue 等于 maxValue，则返回 minValue。 Exceptions ArgumentOutOfRangeException 当 minValue 大于 maxValue 时抛出此异常 NextBytes(byte[]) 用随机数填充指定字节数组的元素。 public static void NextBytes(byte[] buffer) Parameters buffer byte[] 包含随机数的字节数组。 Exceptions ArgumentNullException 当 buffer 为 null 时抛出此异常 NextBytes(Span<byte>) 用随机数填充指定字节数组的元素。 public static void NextBytes(Span<byte> buffer) Parameters buffer Span<byte> 包含随机数的字节数组。 NextDouble() 返回一个介于 0.0 和 1.0 之间的随机数。 public static double NextDouble() Returns double 大于等于 0.0 并且小于 1.0 的双精度浮点数。 NextDouble(double) 返回一个小于所指定最大值的非负随机数。 public static double NextDouble(double maxValue) Parameters maxValue double 要生成的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于零。 Returns double 大于等于 0.0 且小于 maxValue 的双精度浮点数。 Exceptions ArgumentOutOfRangeException 当 maxValue 小于 0 时抛出此异常 NextDouble(double, double) 返回一个指定范围内的随机数。 public static double NextDouble(double minValue, double maxValue) Parameters minValue double 返回的随机数的下界（随机数可取该下界值）。 maxValue double 返回的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于 minValue。 Returns double 一个大于等于 minValue 且小于 maxValue 的双精度浮点数。 Exceptions ArgumentOutOfRangeException 当 minValue 大于 maxValue 时抛出此异常 NextInt64() 返回非负随机数。 public static long NextInt64() Returns long 大于等于零且小于 System.Int64.MaxValue 的 64 位带符号整数。 NextInt64(int) 返回一个小于所指定最大值的非负随机数。 public static long NextInt64(int maxValue) Parameters maxValue int 要生成的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于零。 Returns long 大于等于零且小于 maxValue 的 64 位带符号整数，即：返回值的范围通常包括零但不包括 maxValue。不过，如果 maxValue 等于零，则返回 maxValue。 Exceptions ArgumentOutOfRangeException 当 maxValue 小于 0 时抛出此异常 NextInt64(long, long) 返回一个指定范围内的随机数。 public static long NextInt64(long minValue, long maxValue) Parameters minValue long 返回的随机数的下界（随机数可取该下界值）。 maxValue long 返回的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于 minValue。 Returns long 一个大于等于 minValue 且小于 maxValue 的 64 位带符号整数，即：返回的值范围包括 minValue 但不包括 maxValue。如果 minValue 等于 maxValue，则返回 minValue。 Exceptions ArgumentOutOfRangeException 当 minValue 大于 maxValue 时抛出此异常 NextLong(long) 返回一个小于所指定最大值的非负随机数。 public static long NextLong(long maxValue) Parameters maxValue long 要生成的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于零。 Returns long 大于等于零且小于 maxValue 的 64 位带符号整数。 Exceptions ArgumentOutOfRangeException 当 maxValue 小于 0 时抛出此异常 NextLong(long, long) 返回一个指定范围内的随机数。 public static long NextLong(long minValue, long maxValue) Parameters minValue long 返回的随机数的下界（随机数可取该下界值）。 maxValue long 返回的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于 minValue。 Returns long 一个大于等于 minValue 且小于 maxValue 的 64 位带符号整数。 Exceptions ArgumentOutOfRangeException 当 minValue 大于 maxValue 时抛出此异常 NextUInt32() 获取UInt32范围内的随机数。 public static uint NextUInt32() Returns uint 一个大于等于零且小于 UInt32.MaxValue 的 32 位无符号整数。 NextUInt64() 获取UInt64范围内的随机数。 public static ulong NextUInt64() Returns ulong 一个大于等于零且小于 UInt64.MaxValue 的 64 位无符号整数。 RandomSelect(int, int) 从1~n中随机选取m个数，m小于n public static HashSet<int> RandomSelect(int m, int n) Parameters m int 需要选取的数量 n int 范围上限 Returns HashSet<int> 包含随机选取的m个数的集合 Exceptions ArgumentOutOfRangeException 当m或n小于0，或m大于n时抛出此异常 RandomSelect<T>(IList<T>) 随机选择 public static T RandomSelect<T>(IList<T> items) Parameters items IList<T> 选择项 Returns T 选择结果 Type Parameters T 选择项类型 Exceptions ArgumentNullException 当 items 为 null 时抛出此异常 ArgumentException 当 items 为空集合时抛出此异常 RandomSelect<T>(List<T>) 随机选择 public static T RandomSelect<T>(List<T> items) Parameters items List<T> 选择项 Returns T 选择结果 Type Parameters T 选择项类型 Exceptions ArgumentNullException 当 items 为 null 时抛出此异常 ArgumentException 当 items 为空列表时抛出此异常 RandomSelect<T>(T[]) 随机选择 public static T RandomSelect<T>(T[] items) Parameters items T[] 选择项 Returns T 选择结果 Type Parameters T 选择项类型 Exceptions ArgumentNullException 当 items 为 null 时抛出此异常 ArgumentException 当 items 为空数组时抛出此异常"
  },
  "api/GameFrameX.Utility.Setting.AppSetting.html": {
    "href": "api/GameFrameX.Utility.Setting.AppSetting.html",
    "title": "Class AppSetting | GameFrameX.Server",
    "summary": "Class AppSetting Namespace GameFrameX.Utility.Setting Assembly GameFrameX.Utility.dll 应用程序配置类 public sealed class AppSetting Inheritance object AppSetting Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors AppSetting() 构造函数 public AppSetting() Fields AppExitSource 用于通知应用程序退出的任务完成源 [JsonIgnore] public readonly TaskCompletionSource<bool> AppExitSource Field Value TaskCompletionSource<bool> Properties ActorQueueTimeOut Actor 执行任务队列超时时间（毫秒）,默认值为30秒 public int ActorQueueTimeOut { get; set; } Property Value int ActorRecycleTime Actor 空闲多久回收,单位分钟,默认值为15分钟 public int ActorRecycleTime { get; set; } Property Value int ActorTimeOut Actor 执行任务超时时间（毫秒）,默认值为30秒 public int ActorTimeOut { get; set; } Property Value int AppExitToken 获取应用程序退出的任务标记 [JsonIgnore] public Task<bool> AppExitToken { get; } Property Value Task<bool> AppRunning 获取或设置应用程序是否正在运行 [JsonIgnore] public bool AppRunning { get; set; } Property Value bool ClientApiHost 客户端API地址 public string ClientApiHost { get; set; } Property Value string DataBaseName 数据库名称 public string DataBaseName { get; set; } Property Value string DataBaseUrl 数据库地址 public string DataBaseUrl { get; set; } Property Value string DataCenter 数据中心 public string DataCenter { get; set; } Property Value string Description 描述信息 public string Description { get; set; } Property Value string DiscoveryCenterHost 发现中心地址 public string DiscoveryCenterHost { get; set; } Property Value string DiscoveryCenterPort 发现中心端口 public ushort DiscoveryCenterPort { get; set; } Property Value ushort GameAppClientConnectDelay 连接延迟（毫秒），默认 5000 毫秒 public int GameAppClientConnectDelay { get; set; } Property Value int GameAppClientHeartBeatInterval 心跳间隔（毫秒），默认 5000 毫秒 public int GameAppClientHeartBeatInterval { get; set; } Property Value int GameAppClientMaxRetryCount 最大重试次数，默认 -1 表示无限重试 public int GameAppClientMaxRetryCount { get; set; } Property Value int GameAppClientRetryDelay 重试延迟（毫秒），默认 5000 毫秒 public int GameAppClientRetryDelay { get; set; } Property Value int HttpIsDevelopment HTTP 是否是开发模式 public bool HttpIsDevelopment { get; set; } Property Value bool HttpPort HTTP端口 public ushort HttpPort { get; set; } Property Value ushort HttpUrl HTTP地址 public string HttpUrl { get; set; } Property Value string HttpsPort HTTPS端口 public ushort HttpsPort { get; set; } Property Value ushort HubApiHost HubAPI地址 public string HubApiHost { get; set; } Property Value string InnerHost 内部主机地址 public string InnerHost { get; set; } Property Value string InnerPort 内部端口 public ushort InnerPort { get; set; } Property Value ushort IsDebug 是否是Debug打印日志模式,默认值为false public bool IsDebug { get; set; } Property Value bool IsDebugReceive 是否打印接收数据,只有在IsDebug为true时有效,默认值为false public bool IsDebugReceive { get; set; } Property Value bool IsDebugReceiveHeartBeat 是否打印接收的心跳数据,只有在IsDebugReceive为true时有效,默认值为false public bool IsDebugReceiveHeartBeat { get; set; } Property Value bool IsDebugSend 是否打印发送数据,只有在IsDebug为true时有效,默认值为false public bool IsDebugSend { get; set; } Property Value bool IsDebugSendHeartBeat 是否打印发送的心跳数据,只有在IsDebugSend为true时有效,默认值为false public bool IsDebugSendHeartBeat { get; set; } Property Value bool IsEnableWebSocket 是否启用 WebSocket 服务 开启后服务器将监听 WebSocket 端口，允许客户端通过 WebSocket 协议进行连接 默认值为 false，即不启用 public bool IsEnableWebSocket { get; set; } Property Value bool IsMonitorTimeOut 是否打印超时日志, public bool IsMonitorTimeOut { get; set; } Property Value bool IsOpenTelemetry 是否启用OpenTelemetry遥测功能 OpenTelemetry是一个开源的可观测性框架 启用后可以统一管理指标、追踪和日志等可观测性数据 默认值为false public bool IsOpenTelemetry { get; set; } Property Value bool IsOpenTelemetryMetrics 是否启用指标收集功能,需要IsOpenTelemetry为true时有效 用于收集和监控应用程序的性能指标数据 默认值为false public bool IsOpenTelemetryMetrics { get; set; } Property Value bool IsOpenTelemetryTracing 是否启用分布式追踪功能,需要IsOpenTelemetry为true时有效 用于跟踪和分析分布式系统中的请求流程 默认值为false public bool IsOpenTelemetryTracing { get; set; } Property Value bool Label 标签信息 public string Label { get; set; } Property Value string Language 语言 public string Language { get; set; } Property Value string LaunchTime 应用程序启动时间 public DateTime LaunchTime { get; set; } Property Value DateTime MaxClientCount 最大客户端数量 public int MaxClientCount { get; set; } Property Value int MaxModuleId 游戏逻辑服务器的处理最大模块ID public short MaxModuleId { get; set; } Property Value short MetricsPort Prometheus指标端口（如果为0则使用HTTP端口） public ushort MetricsPort { get; set; } Property Value ushort MinModuleId 游戏逻辑服务器的处理最小模块ID public short MinModuleId { get; set; } Property Value short MonitorTimeOutSeconds 处理器超时时间（秒）,默认值为1秒 public int MonitorTimeOutSeconds { get; set; } Property Value int NetWorkSendTimeOutSeconds 网络发送等待超时时间（秒）,默认值为5秒 public int NetWorkSendTimeOutSeconds { get; set; } Property Value int Note 备注信息 public string Note { get; set; } Property Value string OuterHost 外部主机地址 public string OuterHost { get; set; } Property Value string OuterPort 外部端口 public ushort OuterPort { get; set; } Property Value ushort SaveDataBatchCount 保存数据的批量数量长度，默认为500 public int SaveDataBatchCount { get; set; } Property Value int SaveDataBatchTimeOut 保存数据的超时时间（毫秒）,默认值为30秒 public int SaveDataBatchTimeOut { get; set; } Property Value int SaveDataInterval 保存数据的时间间隔（毫秒） public int SaveDataInterval { get; set; } Property Value int ServerId 服务器ID public int ServerId { get; set; } Property Value int ServerInstanceId 服务器实例ID public long ServerInstanceId { get; set; } Property Value long ServerName 服务器名称 public string ServerName { get; set; } Property Value string ServerType 获取或设置服务器类型 public string ServerType { get; set; } Property Value string TagName 标记名称 public string TagName { get; set; } Property Value string WorkerId 雪花ID的工作ID public ushort WorkerId { get; set; } Property Value ushort WsPort WebSocket端口 public ushort WsPort { get; set; } Property Value ushort WssCertFilePath Wss使用的证书路径 public string WssCertFilePath { get; set; } Property Value string WssPort WebSocket加密端口 public ushort WssPort { get; set; } Property Value ushort Methods IsLocal(int) 判断指定的服务ID是否为本地服务 public bool IsLocal(int serverId) Parameters serverId int 服务ID Returns bool 返回是否是本地服务 ToFormatString() 将对象序列化为格式化的JSON字符串 public string ToFormatString() Returns string 格式化的JSON字符串 ToString() 将对象序列化为JSON字符串 public override string ToString() Returns string JSON字符串"
  },
  "api/GameFrameX.Utility.Setting.GlobalConst.html": {
    "href": "api/GameFrameX.Utility.Setting.GlobalConst.html",
    "title": "Class GlobalConst | GameFrameX.Server",
    "summary": "Class GlobalConst Namespace GameFrameX.Utility.Setting Assembly GameFrameX.Utility.dll 全局常量类 public static class GlobalConst Inheritance object GlobalConst Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ActorIdKey ActorId Key public const string ActorIdKey = \"ACTOR_ID\" Field Value string ActorTypeMask Actor类型标记 public const int ActorTypeMask = 42 Field Value int ActorTypeMax Actor类型的最大值 public const int ActorTypeMax = 999 Field Value int ActorTypeNone 空将会被判断为无效值 public const ushort ActorTypeNone = 0 Field Value ushort ActorTypePlayer 角色 public const ushort ActorTypePlayer = 1 Field Value ushort ActorTypeSeparator Actor类型-分割线(勿调整,勿用于业务逻辑) public const int ActorTypeSeparator = 128 Field Value int ActorTypeServer 服务器系统的Actor类型 public const int ActorTypeServer = 129 Field Value int ComponentAgentNameSuffix 组件代理名称后缀 public const string ComponentAgentNameSuffix = \"ComponentAgent\" Field Value string ComponentAgentWrapperNameSuffix 组件代理包裹名称后缀 public const string ComponentAgentWrapperNameSuffix = \"ComponentAgentWrapper\" Field Value string ComponentHandlerNameSuffix 组件处理器名称后缀 public const string ComponentHandlerNameSuffix = \"Handler\" Field Value string DiscoveryCenterName 服务发现中心 服务名称 public const string DiscoveryCenterName = \"DiscoveryCenter\" Field Value string EventListenerNameSuffix 事件处理器名称后缀 public const string EventListenerNameSuffix = \"EventListener\" Field Value string FriendName 好友 服务名称 public const string FriendName = \"Friend\" Field Value string GameName 游戏 服务名称 public const string GameName = \"Game\" Field Value string HotfixNameSpaceNamePrefix 组件代理名称前缀 public const string HotfixNameSpaceNamePrefix = \"GameFrameX.Hotfix.\" Field Value string HttpSignKey HTTP 请求的签名字段名称 public const string HttpSignKey = \"sign\" Field Value string HttpTimestampKey HTTP 请求的时间戳字段名称 public const string HttpTimestampKey = \"timestamp\" Field Value string IdModuleMax 模块ID最大值 public const int IdModuleMax = 999 Field Value int ImName 聊天 服务名称 public const string ImName = \"Im\" Field Value string MAGIC public const int MAGIC = 60 Field Value int MaxActorIncrease 最大Actor增量 public const int MaxActorIncrease = 4095 Field Value int MaxGlobalId 最大全局ID public const int MaxGlobalId = 9999000 Field Value int MaxServerId 最大服务器ID public const int MaxServerId = 9999 Field Value int MaxUniqueIncrease 最大唯一增量 public const int MaxUniqueIncrease = 524287 Field Value int MinServerId 最小服务器ID public const int MinServerId = 1000 Field Value int ModuleIdTimestampMask 模块ID时间戳标记 public const int ModuleIdTimestampMask = 19 Field Value int RoomName 房间 服务名称 public const string RoomName = \"Room\" Field Value string SecondMask 秒标记 public const int SecondMask = 1073741823 Field Value int ServerIdOrModuleIdMask 服务器ID 长度标记位=>49 = 63-14 public const int ServerIdOrModuleIdMask = 49 Field Value int SessionIdKey SessionId Key public const string SessionIdKey = \"SESSION_ID\" Field Value string TimestampMask 时间戳标记 public const int TimestampMask = 12 Field Value int UniqueIdIdKey 唯一ID public const string UniqueIdIdKey = \"UNIQUEID_ID\" Field Value string WorkerActorIdModuleValue WorkerActor模块Id 值 public const int WorkerActorIdModuleValue = 500 Field Value int WrapperNameSuffix 组件包裹名称后缀 public const string WrapperNameSuffix = \"Wrapper\" Field Value string"
  },
  "api/GameFrameX.Utility.Setting.GlobalSettings.html": {
    "href": "api/GameFrameX.Utility.Setting.GlobalSettings.html",
    "title": "Class GlobalSettings | GameFrameX.Server",
    "summary": "Class GlobalSettings Namespace GameFrameX.Utility.Setting Assembly GameFrameX.Utility.dll 全局设置 public static class GlobalSettings Inheritance object GlobalSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentSetting 获取当前应用程序设置 public static AppSetting CurrentSetting { get; } Property Value AppSetting Remarks 只能通过SetCurrentSetting方法设置，确保配置的安全性。 存储当前正在使用的应用程序配置信息。 IsAppRunning 是否运行中 public static bool IsAppRunning { get; set; } Property Value bool LaunchTime 启动时间 public static DateTime LaunchTime { get; set; } Property Value DateTime Methods GetSettingByServerId<T>(int) 根据服务器Id获取特定类型的设置 public static AppSetting GetSettingByServerId<T>(int tagName) Parameters tagName int 服务器Id，用于匹配AppSetting中的ServerId属性 Returns AppSetting 返回匹配的设置，如果没有找到则返回null。返回的设置可以被转换为类型T Type Parameters T 设置类型，用于类型安全检查，确保返回正确的设置类型 Remarks 此方法不会对传入的serverId进行有效性验证，请确保传入的值在有效范围内 GetSettingByServerName<T>(string) 根据服务器名称获取特定类型的设置 public static AppSetting GetSettingByServerName<T>(string serverName) Parameters serverName string 服务器名称，用于匹配AppSetting中的ServerName属性 Returns AppSetting 返回匹配的设置，如果没有找到则返回null。返回的设置可以被转换为类型T Type Parameters T 设置类型，用于类型安全检查，确保返回正确的设置类型 Exceptions ArgumentNullException 当serverName为null时抛出此异常 GetSettingByTagName<T>(string) 根据服务器标签名称获取特定类型的设置 public static AppSetting GetSettingByTagName<T>(string tagName) Parameters tagName string 服务器标签名称，用于匹配AppSetting中的TagName属性 Returns AppSetting 返回匹配的设置，如果没有找到则返回null。返回的设置可以被转换为类型T Type Parameters T 设置类型，用于类型安全检查，确保返回正确的设置类型 Exceptions ArgumentNullException 当tagName为null时抛出此异常 GetSetting<T>(string) 根据服务器类型获取特定类型的设置 public static AppSetting GetSetting<T>(string serverType) Parameters serverType string 服务器类型 Returns AppSetting 返回匹配的设置，如果没有找到则返回null Type Parameters T 设置类型 GetSettings() 获取所有设置 public static List<AppSetting> GetSettings() Returns List<AppSetting> 返回所有设置的列表 GetSettings(string) 根据服务器类型获取设置 public static List<AppSetting> GetSettings(string serverType) Parameters serverType string 服务器类型 Returns List<AppSetting> 返回匹配的设置列表 Load(string) 加载启动配置 public static void Load(string path) Parameters path string 配置文件路径 Exceptions InvalidOperationException 当配置文件解析失败时抛出 Exception 当服务器ID不在合法范围内时抛出 SetCurrentSetting(AppSetting) 设置当前应用程序设置 public static void SetCurrentSetting(AppSetting setting) Parameters setting AppSetting 要设置的应用程序配置对象 Remarks 此方法用于更新全局的当前设置。 通常在应用程序启动时或需要切换配置时调用。 该方法具有以下特点: 只能设置一次，重复设置会抛出异常 不允许传入null值 会自动校正SaveDataInterval的值，如果小于5000毫秒则使用默认值 Exceptions ArgumentNullException 当传入的setting参数为null时抛出此异常"
  },
  "api/GameFrameX.Utility.Setting.html": {
    "href": "api/GameFrameX.Utility.Setting.html",
    "title": "Namespace GameFrameX.Utility.Setting | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Utility.Setting Classes AppSetting 应用程序配置类 GlobalConst 全局常量类 GlobalSettings 全局设置"
  },
  "api/GameFrameX.Utility.Singleton-1.html": {
    "href": "api/GameFrameX.Utility.Singleton-1.html",
    "title": "Class Singleton<T> | GameFrameX.Server",
    "summary": "Class Singleton<T> Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 单例类 public abstract class Singleton<T> where T : Singleton<T>, new() Type Parameters T Inheritance object Singleton<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance 单例对象 public static T Instance { get; } Property Value T"
  },
  "api/GameFrameX.Utility.TimeHelper.html": {
    "href": "api/GameFrameX.Utility.TimeHelper.html",
    "title": "Class TimeHelper | GameFrameX.Server",
    "summary": "Class TimeHelper Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 时间帮助工具类 public static class TimeHelper Inheritance object TimeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields EpochLocal 1970-01-01 00:00:00 本地时间 public static readonly DateTime EpochLocal Field Value DateTime EpochUtc 1970-01-01 00:00:00 UTC 时间 public static readonly DateTime EpochUtc Field Value DateTime Properties TimeOffsetMilliseconds 时区偏移毫秒数。用于调整时间计算的偏移量。 正值表示向未来偏移,负值表示向过去偏移。 public static long TimeOffsetMilliseconds { get; } Property Value long TimeOffsetSeconds 时区偏移秒数。用于调整时间计算的偏移量。 正值表示向未来偏移,负值表示向过去偏移。 public static long TimeOffsetSeconds { get; } Property Value long Methods CurrentDateTimeWithFormat(string) 获取当前本地时区时间的自定义格式字符串 public static string CurrentDateTimeWithFormat(string format = \"yyyy-MM-dd HH:mm:ss.fff K\") Parameters format string 时间格式字符串，默认为\"yyyy-MM-dd HH:mm:ss.fff K\" Returns string 返回指定格式的本地时间字符串。例如默认格式返回：\"2023-12-25 14:30:45.123 +08:00\" Remarks 此方法允许自定义时间格式字符串: 默认格式包含年月日时分秒毫秒和时区信息 可以通过format参数指定其他格式 使用DateTime.Now获取本地时间 支持标准的.NET日期时间格式说明符 CurrentDateTimeWithFullString() 获取当前本地时区时间的完整格式字符串 public static string CurrentDateTimeWithFullString() Returns string 返回格式为\"yyyy-MM-dd-HH-mm-ss.fff K\"的时间字符串，包含年-月-日-时-分-秒.毫秒 时区偏移。例如：\"2023-12-25-14-30-45.123 +08:00\" Remarks 此方法返回包含完整时间信息的格式化字符串: yyyy: 4位年份 MM: 2位月份 dd: 2位日期 HH: 24小时制小时 mm: 分钟 ss: 秒 fff: 3位毫秒 K: 时区偏移 使用DateTime.Now获取本地时间 CurrentDateTimeWithUtcFormat(string) 获取当前UTC时区时间的自定义格式字符串 public static string CurrentDateTimeWithUtcFormat(string format = \"yyyy-MM-dd HH:mm:ss.fff K\") Parameters format string 时间格式字符串，默认为\"yyyy-MM-dd HH:mm:ss.fff K\" Returns string 返回指定格式的UTC时间字符串。例如默认格式返回：\"2023-12-25 06:30:45.123 +00:00\" Remarks 此方法允许自定义UTC时间格式字符串: 默认格式包含年月日时分秒毫秒和时区信息 可以通过format参数指定其他格式 使用DateTime.UtcNow获取UTC时间 支持标准的.NET日期时间格式说明符 CurrentDateTimeWithUtcFullString() 获取当前UTC时区时间的完整格式[yyyy-MM-dd-HH-mm-ss.fff K]字符串 public static string CurrentDateTimeWithUtcFullString() Returns string 返回格式为\"yyyy-MM-dd-HH-mm-ss.fff K\"的UTC时间字符串，包含年-月-日-时-分-秒.毫秒 时区偏移。例如：\"2023-12-25-06-30-45.123 +00:00\" Remarks 此方法返回包含完整UTC时间信息的格式化字符串: yyyy: 4位年份 MM: 2位月份 dd: 2位日期 HH: 24小时制小时 mm: 分钟 ss: 秒 fff: 3位毫秒 K: 时区偏移(UTC为+00:00) 使用DateTime.UtcNow获取UTC时间 CurrentDateWithDay() 获取当前本地时区的日期，格式为yyyyMMdd的整数 public static int CurrentDateWithDay() Returns int 返回一个8位整数，表示当前本地时区的日期。例如：20231225表示2023年12月25日 Remarks 此方法将当前本地时间转换为8位数字格式: 前4位表示年份 中间2位表示月份 最后2位表示日期 使用DateTime.Now获取本地时间 CurrentDateWithUtcDay() 获取当前UTC时区的日期，格式为yyyyMMdd的整数 public static int CurrentDateWithUtcDay() Returns int 返回一个8位整数，表示当前UTC时区的日期。例如：20231225表示2023年12月25日 Remarks 此方法将当前UTC时间转换为8位数字格式: 前4位表示年份 中间2位表示月份 最后2位表示日期 使用DateTime.UtcNow获取UTC时间 CurrentTimeWithLocalFullString() 获取当前本地时间，格式为HHmmss的字符串 public static string CurrentTimeWithLocalFullString() Returns string 返回一个6位字符串，表示当前本地时间。例如：143045表示14:30:45 Remarks 此方法将当前本地时间转换为6位时间字符串: 前2位表示小时(24小时制) 中间2位表示分钟 最后2位表示秒 使用DateTime.Now获取本地时间 CurrentTimeWithLocalTime() 获取当前本地时间，格式为HHmmss的整数 public static int CurrentTimeWithLocalTime() Returns int 返回一个6位整数，表示当前本地时间。例如：143045表示14:30:45 Remarks 此方法将当前本地时间转换为6位整数: 前2位表示小时(24小时制) 中间2位表示分钟 最后2位表示秒 内部调用CurrentTimeWithLocalFullString()获取字符串后转换为整数 CurrentTimeWithUtcFullString() 获取当前UTC时间，格式为HHmmss的字符串 public static string CurrentTimeWithUtcFullString() Returns string 返回一个6位字符串，表示当前UTC时间。例如：143045表示14:30:45 Remarks 此方法将当前UTC时间转换为6位时间字符串: 前2位表示小时(24小时制) 中间2位表示分钟 最后2位表示秒 使用DateTime.UtcNow获取UTC时间 CurrentTimeWithUtcTime() 获取当前UTC时间，格式为HHmmss的整数 public static int CurrentTimeWithUtcTime() Returns int 返回一个6位整数，表示当前UTC时间。例如：143045表示14:30:45 Remarks 此方法将当前UTC时间转换为6位整数: 前2位表示小时(24小时制) 中间2位表示分钟 最后2位表示秒 内部调用CurrentTimeWithUtcFullString()获取字符串后转换为整数 GetAbsoluteMillisecondsDifference(DateTime, DateTime) 获取时间差的绝对值（毫秒） public static long GetAbsoluteMillisecondsDifference(DateTime startTime, DateTime endTime) Parameters startTime DateTime 开始时间 endTime DateTime 结束时间 Returns long 时间差的绝对毫秒数 Remarks 此方法返回两个时间之间的绝对毫秒数差 无论endTime是否早于startTime，都返回正数 结果会被转换为长整型，可能损失小数部分精度 适用于需要毫秒级精度且不关心先后顺序的场景 GetAbsoluteSecondsDifference(DateTime, DateTime) 获取时间差的绝对值（秒） public static long GetAbsoluteSecondsDifference(DateTime startTime, DateTime endTime) Parameters startTime DateTime 开始时间 endTime DateTime 结束时间 Returns long 时间差的绝对秒数 Remarks 此方法返回两个时间之间的绝对秒数差 无论endTime是否早于startTime，都返回正数 结果会被转换为长整型，可能损失小数部分精度 适用于只需要时间间隔而不关心先后顺序的场景 GetChinaDayOfWeek() 获取当前星期在中国的对应数字。 public static int GetChinaDayOfWeek() Returns int 当前星期在中国的对应数字。返回1-7,其中7表示星期日 Remarks 此方法获取当前本地时间的星期几,并转换为中国习惯的表示方式 使用本地时区时间(DateTime.Now)作为基准 内部调用GetChinaDayOfWeek(DayOfWeek)方法进行转换 GetChinaDayOfWeek(DayOfWeek) 获取指定星期在中国的对应数字。 public static int GetChinaDayOfWeek(DayOfWeek day) Parameters day DayOfWeek 星期几。例如：DayOfWeek.Monday 表示星期一，DayOfWeek.Sunday 表示星期日 Returns int 星期在中国的对应数字。返回1-7,其中7表示星期日 Remarks 此方法将C#的DayOfWeek枚举值(0-6)转换为中国习惯的星期表示(1-7) 主要区别在于将星期日从0转换为7 例如: DayOfWeek.Monday(1) -> 1 (星期一) DayOfWeek.Sunday(0) -> 7 (星期日) GetCrossDays(DateTime, DateTime, int) 获取两个日期之间跨越的天数。 public static int GetCrossDays(DateTime startTime, DateTime endTime, int hour = 0) Parameters startTime DateTime 起始日期。 endTime DateTime 结束日期。 hour int 小时。 Returns int 跨越的天数。 GetCrossDays(DateTime, int) 获取从指定日期到当前UTC日期之间跨越的天数。 public static int GetCrossDays(DateTime startTime, int hour = 0) Parameters startTime DateTime 起始日期。 hour int 小时。 Returns int 跨越的天数。 GetCrossDays(long, int) 获取两个时间戳之间跨越的天数。 public static int GetCrossDays(long beginTimestamp, int hour = 0) Parameters beginTimestamp long 起始时间戳,从1970年1月1日以来经过的秒数。 hour int 小时。 Returns int 跨越的天数。 GetCrossDays(long, long, int) 获取两个UTC时间戳之间跨越的天数。 public static int GetCrossDays(long beginTimestamp, long afterTimestamp, int hour = 0) Parameters beginTimestamp long 开始时间戳(秒)，从1970年1月1日以来经过的秒数。 afterTimestamp long 结束时间戳(秒)，从1970年1月1日以来经过的秒数。 hour int 小时。 Returns int 跨越的天数。 GetCrossLocalDays(DateTime, int) 获取从指定日期到当前本地日期之间跨越的天数。 public static int GetCrossLocalDays(DateTime startTime, int hour = 0) Parameters startTime DateTime 起始日期。 hour int 小时。 Returns int 跨越的天数。 GetCrossLocalDays(long, long) 获取两个本地时间戳之间的间隔天数 public static int GetCrossLocalDays(long startTimestamp, long endTimestamp) Parameters startTimestamp long 开始时间戳(秒),UTC时间戳将被转换为本地时间 endTimestamp long 结束时间戳(秒),UTC时间戳将被转换为本地时间 Returns int 间隔天数,如果开始时间晚于结束时间,返回负数 Remarks 此方法会先将UTC时间戳转换为本地时间,然后计算两个本地时间之间的天数差 计算时会考虑日期的时分秒部分 GetDayOfWeekTime(DateTime, DayOfWeek) 获取指定日期所在星期的时间。 public static DateTime GetDayOfWeekTime(DateTime dateTime, DayOfWeek day) Parameters dateTime DateTime 指定日期。例如：2024-01-10 day DayOfWeek 星期几。例如：DayOfWeek.Monday 表示星期一，DayOfWeek.Sunday 表示星期日 Returns DateTime 返回指定日期所在星期的指定星期几的零点时间。例如：dateTime为2024-01-10(星期三)，day为DayOfWeek.Monday，则返回2024-01-08 00:00:00 Remarks 此方法将星期日(DayOfWeek.Sunday)视为每周的第7天，而不是第0天 返回的时间总是该日期的零点时间（00:00:00） GetDayOfWeekTime(DayOfWeek) 获取当前日期所在星期的时间。 public static DateTime GetDayOfWeekTime(DayOfWeek day) Parameters day DayOfWeek 星期几。例如：DayOfWeek.Monday 表示星期一，DayOfWeek.Sunday 表示星期日。 Returns DateTime 返回当前UTC日期所在星期的指定星期几的零点时间。例如：当前是2024-01-10(星期三)，传入DayOfWeek.Monday，则返回2024-01-08 00:00:00。 Remarks 此方法使用UTC时间作为基准计算。 如果需要使用本地时间，请使用 GetDayOfWeekTime(DateTime.Now, day)。 GetDaysDifference(DateTime, DateTime) 获取两个时间之间的天数差 public static double GetDaysDifference(DateTime startTime, DateTime endTime) Parameters startTime DateTime 开始时间 endTime DateTime 结束时间 Returns double 天数差（可能为负数） Remarks 此方法返回两个时间之间的总天数，保留小数部分 如果endTime早于startTime，返回负数 返回double类型以保持精度 适用于需要天级时间差的场景 GetElapsedMilliseconds(long, bool) 计算指定毫秒时间戳到当前时间经过了多少毫秒 public static long GetElapsedMilliseconds(long timestampMs, bool useUtc = true) Parameters timestampMs long 时间戳（毫秒） useUtc bool 是否使用UTC时间，默认为true Returns long 经过的毫秒数 Remarks 此方法直接使用毫秒时间戳计算经过的毫秒数 当useUtc=true时使用UTC时间戳，否则使用本地时间戳 计算效率高于DateTime转换方式 适用于需要毫秒级精度的剩余时间计算 GetElapsedSeconds(DateTime, bool) 计算指定时间到当前时间经过了多少秒 public static long GetElapsedSeconds(DateTime time, bool useUtc = false) Parameters time DateTime 指定时间 useUtc bool 是否使用UTC时间作为当前时间，默认为false Returns long 经过的秒数（如果指定时间在未来，返回负数） Remarks 此方法计算从指定时间到现在经过的总秒数 当useUtc=true时使用UTC时间，否则使用本地时间 结果会被转换为长整型，可能损失小数部分精度 常用于计算时间是否过期或剩余时间 GetElapsedSeconds(long, bool) 计算指定时间戳到当前时间经过了多少秒 public static long GetElapsedSeconds(long timestamp, bool useUtc = true) Parameters timestamp long 时间戳（秒） useUtc bool 是否使用UTC时间，默认为true Returns long 经过的秒数 Remarks 此方法直接使用时间戳计算经过的秒数 当useUtc=true时使用UTC时间戳，否则使用本地时间戳 计算效率高于DateTime转换方式 适用于Unix时间戳的剩余时间计算 GetEndTimeOfDay(DateTime) 获取指定日期的结束时间 public static DateTime GetEndTimeOfDay(DateTime date) Parameters date DateTime 指定日期 Returns DateTime 指定日期23:59:59的时间 Remarks 此方法返回指定日期的最后一秒(23:59:59) 例如:输入2024-01-10 14:30:00,返回2024-01-10 23:59:59 保持原有时区不变 GetEndTimeOfMonth(DateTime) 获取指定日期所在月的结束时间 public static DateTime GetEndTimeOfMonth(DateTime date) Parameters date DateTime 指定日期 Returns DateTime 所在月最后一天23:59:59的时间 Remarks 此方法返回指定日期所在月份的最后一天的最后一秒 例如:输入2024-01-10,返回2024-01-31 23:59:59 保持原有时区不变 自动处理大小月份和闰年 GetEndTimeOfWeek(DateTime) 获取指定日期所在周的结束时间 public static DateTime GetEndTimeOfWeek(DateTime date) Parameters date DateTime 指定日期 Returns DateTime 所在周周日23:59:59的时间 Remarks 此方法返回指定日期所在周的周日最后一秒 例如:输入2024-01-10(周三),返回2024-01-14 23:59:59(周日) 使用周一作为每周的第一天,周日为每周的最后一天 保持原有时区不变 GetEndTimeOfYear(DateTime) 获取指定日期所在年的结束时间 public static DateTime GetEndTimeOfYear(DateTime date) Parameters date DateTime 指定日期 Returns DateTime 所在年12月31日23:59:59的时间 Remarks 此方法返回指定日期所在年份的12月31日最后一秒 例如:输入2024-01-10,返回2024-12-31 23:59:59 保持原有时区不变 GetEndTimestampOfDay(DateTime) 获取指定日期的结束时间戳 public static long GetEndTimestampOfDay(DateTime date) Parameters date DateTime 指定日期 Returns long 指定日期23:59:59的时间戳(秒) Remarks 此方法返回指定日期最后一秒的Unix时间戳 例如:输入2024-01-10 14:30:00,返回2024-01-10 23:59:59的时间戳 会将时间转换为UTC时间后再计算时间戳 GetEndTimestampOfMonth(DateTime) 获取指定日期所在月的结束时间戳 public static long GetEndTimestampOfMonth(DateTime date) Parameters date DateTime 指定日期 Returns long 所在月最后一天23:59:59的时间戳(秒) Remarks 此方法返回指定日期所在月份的最后一天最后一秒的Unix时间戳 例如:输入2024-01-10,返回2024-01-31 23:59:59的时间戳 会将时间转换为UTC时间后再计算时间戳 GetEndTimestampOfWeek(DateTime) 获取指定日期所在周的结束时间戳 public static long GetEndTimestampOfWeek(DateTime date) Parameters date DateTime 指定日期 Returns long 所在周周日23:59:59的时间戳(秒) Remarks 此方法返回指定日期所在周的周日最后一秒的Unix时间戳 例如:输入2024-01-10(周三),返回2024-01-14 23:59:59(周日)的时间戳 会将时间转换为UTC时间后再计算时间戳 GetEndTimestampOfYear(DateTime) 获取指定日期所在年的结束时间戳 public static long GetEndTimestampOfYear(DateTime date) Parameters date DateTime 指定日期 Returns long 所在年12月31日23:59:59的时间戳(秒) Remarks 此方法返回指定日期所在年份的12月31日最后一秒的Unix时间戳 例如:输入2024-01-10,返回2024-12-31 23:59:59的时间戳 会将时间转换为UTC时间后再计算时间戳 GetHoursDifference(DateTime, DateTime) 获取两个时间之间的小时数差 public static double GetHoursDifference(DateTime startTime, DateTime endTime) Parameters startTime DateTime 开始时间 endTime DateTime 结束时间 Returns double 小时数差（可能为负数） Remarks 此方法返回两个时间之间的总小时数，保留小数部分 如果endTime早于startTime，返回负数 返回double类型以保持精度 适用于需要小时级时间差的场景 GetMillisecondsDifference(DateTime, DateTime) 获取两个时间之间的毫秒数差 public static long GetMillisecondsDifference(DateTime startTime, DateTime endTime) Parameters startTime DateTime 开始时间 endTime DateTime 结束时间 Returns long 毫秒数差（可能为负数） Remarks 此方法返回两个时间之间的总毫秒数 结果会被转换为长整型，可能损失小数部分精度 如果endTime早于startTime，返回负数 适用于需要毫秒级精确时间差的场景 GetMillisecondsDifference(long, long) 获取两个毫秒时间戳之间的毫秒数差 public static long GetMillisecondsDifference(long startTimestampMs, long endTimestampMs) Parameters startTimestampMs long 开始时间戳（毫秒） endTimestampMs long 结束时间戳（毫秒） Returns long 毫秒数差 Remarks 此方法直接计算两个毫秒时间戳的差值 不需要转换为DateTime，计算更快 如果endTimestampMs小于startTimestampMs，返回负数 适用于Unix时间戳的毫秒级差值计算 GetMinutesDifference(DateTime, DateTime) 获取两个时间之间的分钟数差 public static double GetMinutesDifference(DateTime startTime, DateTime endTime) Parameters startTime DateTime 开始时间 endTime DateTime 结束时间 Returns double 分钟数差（可能为负数） Remarks 此方法返回两个时间之间的总分钟数，保留小数部分 如果endTime早于startTime，返回负数 返回double类型以保持精度 适用于需要分钟级时间差的场景 GetMonthEndTime() 获取本月结束时间 public static DateTime GetMonthEndTime() Returns DateTime 本月最后一天23:59:59的时间 GetMonthEndTimestamp() 获取本月结束时间戳 public static long GetMonthEndTimestamp() Returns long 本月最后一天23:59:59的时间戳(秒) GetMonthStartTime() 获取本月开始时间 public static DateTime GetMonthStartTime() Returns DateTime 本月1号零点时间 Remarks 此方法基于UTC时间计算本月开始时间: 获取当前UTC时间的年份和月份 创建一个新的DateTime对象,设置为本月1号零点 返回的时间为UTC时区的时间 示例: 当前UTC时间为2024-01-15 14:30:00 返回时间为2024-01-01 00:00:00 (UTC) 注意: 返回的是UTC时区的时间,如需本地时间请使用TimeZoneInfo.ConvertTimeFromUtc转换 返回时间的Hour/Minute/Second/Millisecond均为0 GetMonthStartTimestamp() 获取本月开始时间戳 public static long GetMonthStartTimestamp() Returns long 本月1号零点时间戳(秒) GetNextMonthEndTime() 获取下月结束时间 public static DateTime GetNextMonthEndTime() Returns DateTime 下月最后一天23:59:59的时间 Remarks 此方法返回下个月最后一天的最后一秒 例如:当前是2024-01-10,返回2024-02-29 23:59:59 使用本地时区计算时间 自动处理大小月份和闰年 GetNextMonthEndTimestamp() 获取下月结束时间戳 public static long GetNextMonthEndTimestamp() Returns long 下月最后一天23:59:59的时间戳(秒) Remarks 此方法返回下个月最后一天最后一秒的Unix时间戳 例如:当前是2024-01-10,返回2024-02-29 23:59:59的时间戳 会将时间转换为UTC时间后再计算时间戳 GetNextMonthStartTime() 获取下月开始时间 public static DateTime GetNextMonthStartTime() Returns DateTime 下月1号零点时间 Remarks 此方法返回下个月1号的零点时间 例如:当前是2024-01-10,返回2024-02-01 00:00:00 使用本地时区计算时间 GetNextMonthStartTimestamp() 获取下月开始时间戳 public static long GetNextMonthStartTimestamp() Returns long 下月1号零点时间戳(秒) Remarks 此方法返回下个月1号零点时间的Unix时间戳 例如:当前是2024-01-10,返回2024-02-01 00:00:00的时间戳 会将时间转换为UTC时间后再计算时间戳 GetNextWeekEndTime() 获取下周结束时间 public static DateTime GetNextWeekEndTime() Returns DateTime 下周日23:59:59的时间 Remarks 此方法返回下周日的最后一秒 例如:当前是2024-01-10(周三),返回2024-01-21 23:59:59(下周日) 使用本地时区计算时间 GetNextWeekEndTimestamp() 获取下周结束时间戳 public static long GetNextWeekEndTimestamp() Returns long 下周日23:59:59的时间戳(秒) Remarks 此方法返回下周日最后一秒的Unix时间戳 例如:当前是2024-01-10(周三),返回2024-01-21 23:59:59(下周日)的时间戳 会将时间转换为UTC时间后再计算时间戳 GetNextWeekStartTime() 获取下周开始时间 public static DateTime GetNextWeekStartTime() Returns DateTime 下周一零点时间 Remarks 此方法返回下周一的零点时间 例如:当前是2024-01-10(周三),返回2024-01-15 00:00:00(下周一) 使用本地时区计算时间 GetNextWeekStartTimestamp() 获取下周开始时间戳 public static long GetNextWeekStartTimestamp() Returns long 下周一零点时间戳(秒) Remarks 此方法返回下周一零点时间的Unix时间戳 例如:当前是2024-01-10(周三),返回2024-01-15 00:00:00(下周一)的时间戳 会将时间转换为UTC时间后再计算时间戳 GetNow() 获取当前时间 public static DateTime GetNow() Returns DateTime 当前时间 Remarks 此方法返回当前的本地时间 会根据系统设置的时区自动调整 主要用于需要显示本地时间的场景 GetSecondsDifference(DateTime, DateTime) 获取两个时间之间的秒数差 public static long GetSecondsDifference(DateTime startTime, DateTime endTime) Parameters startTime DateTime 开始时间 endTime DateTime 结束时间 Returns long 秒数差（可能为负数） Remarks 此方法返回两个时间之间的总秒数 结果会被转换为长整型，可能损失小数部分精度 如果endTime早于startTime，返回负数 适用于需要秒级时间差的场景 GetSecondsDifference(long, long) 获取两个时间戳之间的秒数差 public static long GetSecondsDifference(long startTimestamp, long endTimestamp) Parameters startTimestamp long 开始时间戳（秒） endTimestamp long 结束时间戳（秒） Returns long 秒数差 Remarks 此方法直接计算两个时间戳的差值 不需要转换为DateTime，计算更快 如果endTimestamp小于startTimestamp，返回负数 适用于Unix时间戳的秒级差值计算 GetStartTimeOfDay(DateTime) 获取指定日期的开始时间 public static DateTime GetStartTimeOfDay(DateTime date) Parameters date DateTime 指定日期 Returns DateTime 指定日期零点时间 Remarks 此方法返回指定日期的零点时间(00:00:00) 例如:输入2024-01-10 14:30:00,返回2024-01-10 00:00:00 保持原有时区不变 GetStartTimeOfMonth(DateTime) 获取指定日期所在月的开始时间 public static DateTime GetStartTimeOfMonth(DateTime date) Parameters date DateTime 指定日期 Returns DateTime 所在月1号零点时间 Remarks 此方法返回指定日期所在月份的1号零点时间 例如:输入2024-01-10,返回2024-01-01 00:00:00 保持原有时区不变 GetStartTimeOfWeek(DateTime) 获取指定日期所在周的开始时间 public static DateTime GetStartTimeOfWeek(DateTime date) Parameters date DateTime 指定日期 Returns DateTime 所在周周一零点时间 Remarks 此方法返回指定日期所在周的周一零点时间 例如:输入2024-01-10(周三),返回2024-01-08 00:00:00(周一) 使用周一作为每周的第一天,周日为每周的最后一天 保持原有时区不变 GetStartTimeOfYear(DateTime) 获取指定日期所在年的开始时间 public static DateTime GetStartTimeOfYear(DateTime date) Parameters date DateTime 指定日期 Returns DateTime 所在年1月1日零点时间 Remarks 此方法返回指定日期所在年份的1月1日零点时间 例如:输入2024-01-10,返回2024-01-01 00:00:00 保持原有时区不变 GetStartTimestampOfDay(DateTime) 获取指定日期的开始时间戳 public static long GetStartTimestampOfDay(DateTime date) Parameters date DateTime 指定日期 Returns long 指定日期零点时间戳(秒) Remarks 此方法返回指定日期零点时间的Unix时间戳 例如:输入2024-01-10 14:30:00,返回2024-01-10 00:00:00的时间戳 会将时间转换为UTC时间后再计算时间戳 GetStartTimestampOfMonth(DateTime) 获取指定日期所在月的开始时间戳 public static long GetStartTimestampOfMonth(DateTime date) Parameters date DateTime 指定日期 Returns long 所在月1号零点时间戳(秒) Remarks 此方法返回指定日期所在月份的1号零点时间的Unix时间戳 例如:输入2024-01-10,返回2024-01-01 00:00:00的时间戳 会将时间转换为UTC时间后再计算时间戳 GetStartTimestampOfWeek(DateTime) 获取指定日期所在周的开始时间戳 public static long GetStartTimestampOfWeek(DateTime date) Parameters date DateTime 指定日期 Returns long 所在周周一零点时间戳(秒) Remarks 此方法返回指定日期所在周的周一零点时间的Unix时间戳 例如:输入2024-01-10(周三),返回2024-01-08 00:00:00(周一)的时间戳 会将时间转换为UTC时间后再计算时间戳 GetStartTimestampOfYear(DateTime) 获取指定日期所在年的开始时间戳 public static long GetStartTimestampOfYear(DateTime date) Parameters date DateTime 指定日期 Returns long 所在年1月1日零点时间戳(秒) Remarks 此方法返回指定日期所在年份的1月1日零点时间的Unix时间戳 例如:输入2024-01-10,返回2024-01-01 00:00:00的时间戳 会将时间转换为UTC时间后再计算时间戳 GetTimeDifference(DateTime, DateTime) 计算两个DateTime之间的时间差 public static TimeSpan GetTimeDifference(DateTime startTime, DateTime endTime) Parameters startTime DateTime 开始时间 endTime DateTime 结束时间 Returns TimeSpan 时间差TimeSpan对象 Remarks 返回endTime - startTime的时间差 如果endTime早于startTime，返回负的TimeSpan 此方法可用于计算任意两个DateTime之间的精确时间间隔 返回的TimeSpan对象包含天数、小时、分钟、秒和毫秒等详细信息 GetTimeDifference(long, long, bool) 计算两个时间戳之间的时间差（秒级） public static TimeSpan GetTimeDifference(long startTimestamp, long endTimestamp, bool utc = true) Parameters startTimestamp long 开始时间戳（秒） endTimestamp long 结束时间戳（秒） utc bool 是否使用UTC时间，默认为true Returns TimeSpan 时间差TimeSpan对象 Remarks 此方法会先将时间戳转换为DateTime后再计算差值 时间戳以1970年1月1日为起点 当utc=true时使用UTC时间，否则使用本地时间 返回的TimeSpan对象包含完整的时间差信息 GetTimeDifferenceFromNow(DateTime, bool) 计算指定时间到当前时间的时间差 public static TimeSpan GetTimeDifferenceFromNow(DateTime time, bool useUtc = false) Parameters time DateTime 指定时间 useUtc bool 是否使用UTC时间作为当前时间，默认为false（使用本地时间） Returns TimeSpan 时间差TimeSpan对象 Remarks 此方法计算指定时间到当前时间的差值 当useUtc=true时使用UTC时间，否则使用本地时间 如果指定时间在当前时间之后，将返回负值 常用于计算时间间隔和判断过期时间 GetTimeDifferenceFromNow(long, bool) 计算指定时间戳到当前时间的时间差 public static TimeSpan GetTimeDifferenceFromNow(long timestamp, bool useUtc = true) Parameters timestamp long 时间戳（秒） useUtc bool 是否使用UTC时间，默认为true Returns TimeSpan 时间差TimeSpan对象 Remarks 此方法先将时间戳转换为DateTime，再计算与当前时间的差值 时间戳以1970年1月1日为起点 当useUtc=true时使用UTC时间，否则使用本地时间 适用于处理Unix时间戳格式的时间差计算 GetTimeDifferenceFromNowMs(long, bool) 计算指定毫秒时间戳到当前时间的时间差 public static TimeSpan GetTimeDifferenceFromNowMs(long timestampMs, bool useUtc = true) Parameters timestampMs long 时间戳（毫秒） useUtc bool 是否使用UTC时间，默认为true Returns TimeSpan 时间差TimeSpan对象 Remarks 此方法提供毫秒级精度的时间差计算 时间戳以1970年1月1日为起点 当useUtc=true时使用UTC时间，否则使用本地时间 适用于需要高精度时间差计算的场景 GetTimeDifferenceMs(long, long, bool) 计算两个毫秒时间戳之间的时间差 public static TimeSpan GetTimeDifferenceMs(long startTimestampMs, long endTimestampMs, bool utc = true) Parameters startTimestampMs long 开始时间戳（毫秒） endTimestampMs long 结束时间戳（毫秒） utc bool 是否使用UTC时间，默认为true Returns TimeSpan 时间差TimeSpan对象 Remarks 此方法提供毫秒级的精确时间差计算 时间戳以1970年1月1日为起点 当utc=true时使用UTC时间，否则使用本地时间 适用于需要高精度时间差计算的场景 GetTodayEndTime() 获取今天结束时间 public static DateTime GetTodayEndTime() Returns DateTime 今天23:59:59的时间 Remarks 此方法返回当天的最后一秒(23:59:59) 通过获取明天零点时间然后减去1秒来计算 返回的是本地时区的时间 GetTodayEndTimestamp() 获取今天结束时间戳 public static long GetTodayEndTimestamp() Returns long 今天23:59:59的时间戳(秒) Remarks 此方法返回当天最后一秒的Unix时间戳 先获取本地时区的今天23:59:59,然后转换为时间戳 返回从1970-01-01 00:00:00 UTC开始的秒数 GetTodayStartTime() 获取今天开始时间 public static DateTime GetTodayStartTime() Returns DateTime 今天零点时间 Remarks 此方法返回当天的零点时间(00:00:00) 使用DateTime.Today获取当前日期的零点时间 返回的是本地时区的时间 GetTodayStartTimestamp() 获取今天开始时间戳 public static long GetTodayStartTimestamp() Returns long 今天零点时间戳(秒) Remarks 此方法返回当天零点时间的Unix时间戳 先获取本地时区的今天零点时间,然后转换为时间戳 返回从1970-01-01 00:00:00 UTC开始的秒数 GetTomorrowEndTime() 获取明天结束时间 public static DateTime GetTomorrowEndTime() Returns DateTime 明天23:59:59的时间 Remarks 此方法返回明天的最后一秒 例如:当前是2024-01-10,返回2024-01-11 23:59:59 使用本地时区计算时间 GetTomorrowEndTimestamp() 获取明天结束时间戳 public static long GetTomorrowEndTimestamp() Returns long 明天23:59:59的时间戳(秒) Remarks 此方法返回明天最后一秒的Unix时间戳 例如:当前是2024-01-10,返回2024-01-11 23:59:59的时间戳 会将时间转换为UTC时间后再计算时间戳 GetTomorrowStartTime() 获取明天开始时间 public static DateTime GetTomorrowStartTime() Returns DateTime 明天零点时间 Remarks 此方法返回明天的零点时间 例如:当前是2024-01-10,返回2024-01-11 00:00:00 使用本地时区计算时间 GetTomorrowStartTimestamp() 获取明天开始时间戳 public static long GetTomorrowStartTimestamp() Returns long 明天零点时间戳(秒) Remarks 此方法返回明天零点时间的Unix时间戳 例如:当前是2024-01-10,返回2024-01-11 00:00:00的时间戳 会将时间转换为UTC时间后再计算时间戳 GetUtcNow() 获取当前UTC时间 public static DateTime GetUtcNow() Returns DateTime 当前UTC时间 Remarks 此方法返回当前的UTC时间(协调世界时) 与本地时间相比会有时区偏移 主要用于需要统一时间标准的场景 GetWeekEndTime() 获取本周结束时间 public static DateTime GetWeekEndTime() Returns DateTime 本周日23:59:59的时间 Remarks 此方法返回本周日的最后一秒(23:59:59) 通过获取下周一零点时间然后减去1秒来计算 返回的是本地时区的时间 GetWeekEndTimestamp() 获取本周结束时间戳 public static long GetWeekEndTimestamp() Returns long 本周日23:59:59的时间戳(秒) Remarks 此方法返回本周日最后一秒的Unix时间戳 先获取本地时区的本周日23:59:59,然后转换为时间戳 返回从1970-01-01 00:00:00 UTC开始的秒数 GetWeekStartTime() 获取本周开始时间 public static DateTime GetWeekStartTime() Returns DateTime 本周一零点时间 Remarks 此方法返回本周一的零点时间(00:00:00) 使用中国习惯: 将周日的DayOfWeek值0转换为7 以周一为每周的第一天 返回的是本地时区的时间 GetWeekStartTimestamp() 获取本周开始时间戳 public static long GetWeekStartTimestamp() Returns long 本周一零点时间戳(秒) Remarks 此方法返回本周一零点时间的Unix时间戳 先获取本地时区的本周一零点时间,然后转换为时间戳 返回从1970-01-01 00:00:00 UTC开始的秒数 GetYearEndTime() 获取本年结束时间 public static DateTime GetYearEndTime() Returns DateTime 本年12月31日23:59:59的时间 Remarks 此方法返回当前年份最后一天的最后一秒 使用本地时区计算时间 例如:2024年返回2024-12-31 23:59:59 GetYearEndTimestamp() 获取本年结束时间戳 public static long GetYearEndTimestamp() Returns long 本年12月31日23:59:59的时间戳(秒) Remarks 此方法返回当前年份最后一天的最后一秒的Unix时间戳 使用本地时区计算时间 例如:2024年返回2024-12-31 23:59:59的时间戳 GetYearStartTime() 获取本年开始时间 public static DateTime GetYearStartTime() Returns DateTime 本年1月1日零点时间 Remarks 此方法基于UTC时间计算年份: 获取当前UTC时间的年份 返回该年份1月1日零点时间 示例: 当前UTC时间为2024-03-15 14:30:00 返回2024-01-01 00:00:00 注意: 返回的是UTC时间,不考虑本地时区 返回时间的时分秒毫秒都为0 使用DateTime.UtcNow避免时区转换带来的问题 GetYearStartTimestamp() 获取本年开始时间戳 public static long GetYearStartTimestamp() Returns long 本年1月1日零点时间戳(秒) Remarks 此方法返回当前年份1月1日零点的Unix时间戳 使用本地时区计算时间 例如:2024年返回2024-01-01 00:00:00的时间戳 IsLocalSameDay(long, long) 按照本地时间判断两个时间戳是否是同一天 public static bool IsLocalSameDay(long timestamp1, long timestamp2) Parameters timestamp1 long 时间戳1（Unix秒级时间戳）。例如：1704857400 timestamp2 long 时间戳2（Unix秒级时间戳）。例如：1704859200 Returns bool 如果两个时间戳转换为本地时间后是同一天，则返回true；否则返回false Remarks 此方法会先将UTC时间戳转换为本地时间，然后比较是否为同一天 比较时只考虑年月日，不考虑具体时间 使用系统默认时区进行UTC到本地时间的转换 IsNowSameWeek(DateTime) 判断当前时间是否与指定时间处于同一周。 以周一为每周的第一天,周日为每周的最后一天。 使用本地时间(DateTime.Now)进行比较。 public static bool IsNowSameWeek(DateTime start) Parameters start DateTime 指定时间的起始时间。可以是任意DateTime值。 Returns bool 如果当前时间与指定时间处于同一周，则为 true；否则为 false。 Remarks 此方法将调用IsSameWeek方法进行实际比较。 使用本地时区时间作为当前时间参考点。 IsNowSameWeek(long) 判断当前时间是否与指定时间处于同一周。 public static bool IsNowSameWeek(long ticks) Parameters ticks long 指定时间的起始时间(Ticks)。表示自 0001 年 1 月 1 日午夜 00:00:00 以来所经过的时钟周期数 Returns bool 如果当前时间与指定时间处于同一周，则为 true；否则为 false。 Remarks 此方法将传入的ticks转换为DateTime后与当前时间比较是否在同一周 使用系统默认的周计算规则(周日为每周第一天) IsNowSameWeekUtc(DateTime) 判断当前UTC时间是否与指定时间处于同一周。 以周一为每周的第一天,周日为每周的最后一天。 使用UTC时间(DateTime.UtcNow)进行比较。 public static bool IsNowSameWeekUtc(DateTime start) Parameters start DateTime 指定时间的起始时间。可以是任意DateTime值。 Returns bool 如果当前UTC时间与指定时间处于同一周，则为 true；否则为 false。 Remarks 此方法将调用IsSameWeek方法进行实际比较。 使用UTC时区时间作为当前时间参考点，避免时区差异影响。 IsSameDay(DateTime, DateTime) 判断两个时间是否是同一天 public static bool IsSameDay(DateTime time1, DateTime time2) Parameters time1 DateTime 时间1。例如：2024-01-10 14:30:00 time2 DateTime 时间2。例如：2024-01-10 18:45:00 Returns bool 如果两个时间是同一天，则返回true；否则返回false Remarks 此方法只比较年月日是否相同，不考虑具体时间 比较时会忽略时区差异，直接使用DateTime中存储的日期值进行比较 使用Date属性确保只比较日期部分 IsSameWeek(DateTime, DateTime) 判断两个时间是否处于同一周。 以周一为每周的第一天,周日为每周的最后一天。 public static bool IsSameWeek(DateTime start, DateTime end) Parameters start DateTime 起始时间。可以是任意DateTime值。 end DateTime 结束时间。可以是任意DateTime值。 Returns bool 如果两个时间处于同一周，则为 true；否则为 false。 Remarks 此方法会自动调整参数顺序,确保start是较早的时间。 通过计算较早时间所在周的周日时间点,判断另一个时间是否在同一周内。 IsTimeInRange(DateTime, DateTime, DateTime) 获取指定时间是否在指定的时间范围内 public static bool IsTimeInRange(DateTime time, DateTime startTime, DateTime endTime) Parameters time DateTime 指定时间。例如：2024-01-10 14:30:00 startTime DateTime 开始时间。例如：2024-01-10 00:00:00 endTime DateTime 结束时间。例如：2024-01-10 23:59:59 Returns bool 如果指定时间在开始时间和结束时间之间（包含边界），则返回true；否则返回false Remarks 此方法使用闭区间比较，即time等于startTime或endTime时也返回true 不会对startTime和endTime的先后顺序做检查，调用方需确保startTime不晚于endTime IsTimestampInRange(long, long, long) 获取指定时间戳是否在指定的时间戳范围内 public static bool IsTimestampInRange(long timestamp, long startTimestamp, long endTimestamp) Parameters timestamp long 指定时间戳（Unix秒级时间戳）。例如：1704857400 startTimestamp long 开始时间戳（Unix秒级时间戳）。例如：1704816000 endTimestamp long 结束时间戳（Unix秒级时间戳）。例如：1704902399 Returns bool 如果指定时间戳在开始时间戳和结束时间戳之间（包含边界），则返回true；否则返回false Remarks 此方法使用闭区间比较，即timestamp等于startTimestamp或endTimestamp时也返回true 不会对startTimestamp和endTimestamp的先后顺序做检查，调用方需确保startTimestamp不大于endTimestamp 时间戳应为Unix秒级时间戳（自1970年1月1日UTC零点以来的秒数） IsUnixSameDay(long, long) 按照UTC时间判断两个时间戳是否是同一天 public static bool IsUnixSameDay(long timestamp1, long timestamp2) Parameters timestamp1 long 时间戳1 timestamp2 long 时间戳2 Returns bool 是否是同一天 Remarks 此方法将两个Unix时间戳转换为UTC时间后比较是否为同一天 比较时只考虑日期部分(年月日),忽略时间部分 使用UTC时间避免时区转换带来的问题 IsUnixSameWeek(long) 判断当前UTC时间是否与指定时间戳处于同一周。 public static bool IsUnixSameWeek(long ticks) Parameters ticks long 指定时间的起始时间(Ticks)。表示自 0001 年 1 月 1 日午夜 00:00:00 以来所经过的时钟周期数 Returns bool 如果当前UTC时间与指定时间处于同一周，则为 true；否则为 false。 Remarks 此方法将传入的ticks转换为DateTime后与当前UTC时间比较是否在同一周 使用UTC时区时间作为当前时间参考点，避免时区差异影响 IsUnixSameWeekFromTimestamp(long) 判断当前UTC时间是否与指定Unix时间戳处于同一周。 public static bool IsUnixSameWeekFromTimestamp(long timestampSeconds) Parameters timestampSeconds long 指定时间的Unix时间戳(秒)。表示自1970年1月1日00:00:00 UTC以来的秒数 Returns bool 如果当前UTC时间与指定时间处于同一周，则为 true；否则为 false。 Remarks 此方法将传入的Unix时间戳(秒)转换为UTC DateTime后与当前UTC时间比较是否在同一周 全程使用UTC时间，避免时区差异影响 IsUnixSameWeekFromTimestampMilliseconds(long) 判断当前UTC时间是否与指定Unix时间戳处于同一周。 public static bool IsUnixSameWeekFromTimestampMilliseconds(long timestampMilliseconds) Parameters timestampMilliseconds long 指定时间的Unix时间戳(毫秒)。表示自1970年1月1日00:00:00 UTC以来的毫秒数 Returns bool 如果当前UTC时间与指定时间处于同一周，则为 true；否则为 false。 Remarks 此方法将传入的Unix时间戳(毫秒)转换为UTC DateTime后与当前UTC时间比较是否在同一周 全程使用UTC时间，避免时区差异影响 MillisecondsTimeStampToDateTime(long, bool) 毫秒转时间 public static DateTime MillisecondsTimeStampToDateTime(long timestamp, bool utc = false) Parameters timestamp long 毫秒时间戳。 utc bool 是否使用UTC时间。 Returns DateTime 转换后的时间。 ResetTimeOffset() 重置时区偏移值为默认值(0) public static void ResetTimeOffset() Remarks 此方法会将秒级和毫秒级的偏移量都重置为0, 使时间计算恢复到未经调整的状态。 SetTimeOffset(long, long) 设置时区偏移值 public static void SetTimeOffset(long offsetSeconds, long offsetMilliseconds) Parameters offsetSeconds long 秒级偏移量 offsetMilliseconds long 毫秒级偏移量 Remarks 此方法用于调整时间计算的基准。 例如要模拟未来时间,可以传入正数;要模拟过去时间,可以传入负数。 通常用于调试和测试场景。 TimeMilliseconds() 获取当前本地时区时间的毫秒级时间戳 public static long TimeMilliseconds() Returns long 返回自1970年1月1日 00:00:00以来经过的毫秒数(本地时区),加上时区偏移量 Remarks 此方法: 获取当前本地时区时间 转换为Unix时间戳(毫秒) 加上TimeOffsetMilliseconds偏移量 相比秒级时间戳提供更高的精度,适用于需要精确时间计算的场景 TimeSeconds() 获取当前本地时区时间的秒级时间戳 public static long TimeSeconds() Returns long 返回自1970年1月1日 00:00:00以来经过的秒数(本地时区),加上时区偏移量 Remarks 此方法: 获取当前本地时区时间 转换为Unix时间戳(秒) 加上TimeOffsetSeconds偏移量 主要用于需要本地时区时间戳的场景 TimeSpanLocalWithTimestamp(long) 将给定的时间戳转换为相对于EpochLocal的 TimeSpan 对象。 public static TimeSpan TimeSpanLocalWithTimestamp(long timestamp) Parameters timestamp long 自1970年1月1日午夜以来经过的秒数。 Returns TimeSpan 一个 TimeSpan 对象，表示从EpochLocal到给定时间戳的间隔。 Exceptions ArgumentOutOfRangeException 当时间戳超出有效范围时抛出此异常 TimeSpanWithTimestamp(long) 将给定的时间戳转换为相对于EpochUtc的 TimeSpan 对象。 public static TimeSpan TimeSpanWithTimestamp(long timestamp) Parameters timestamp long 自1970年1月1日午夜以来经过的秒数。 Returns TimeSpan 一个 TimeSpan 对象，表示从EpochUtc到给定时间戳的间隔。 Exceptions ArgumentOutOfRangeException 当时间戳超出有效范围时抛出此异常 TimeToMilliseconds(DateTime, bool) 获取指定时间距离纪元时间（本地时间或UTC时间）的毫秒数。 public static long TimeToMilliseconds(DateTime time, bool utc = false) Parameters time DateTime 指定时间。 utc bool 是否使用UTC时间。 Returns long 距离纪元时间的毫秒数。 TimeToSecond(DateTime, bool) 获取指定时间距离纪元时间（本地时间或UTC时间）的秒数。 public static long TimeToSecond(DateTime time, bool utc = false) Parameters time DateTime 指定时间。 utc bool 是否使用UTC时间。 Returns long 距离纪元时间的秒数。 TimestampMillisToTicks(long) 将Unix毫秒时间戳转换为自公元1年1月1日以来的刻度数。 public static long TimestampMillisToTicks(long timestampMillisSeconds) Parameters timestampMillisSeconds long Unix毫秒时间戳，从1970年1月1日以来的毫秒数。 Returns long 自公元1年1月1日以来的刻度数。 Exceptions ArgumentOutOfRangeException 当时间戳超出有效范围时抛出此异常 TimestampToDateTime(long, bool) 秒时间戳转时间 public static DateTime TimestampToDateTime(long timestamp, bool utc = false) Parameters timestamp long 秒时间戳。 utc bool 是否使用UTC时间。 Returns DateTime 转换后的时间。 TimestampToTicks(long) 将Unix时间戳转换为自公元1年1月1日以来的刻度数。 public static long TimestampToTicks(long timestampSeconds) Parameters timestampSeconds long Unix时间戳，从1970年1月1日以来的秒数。 Returns long 自公元1年1月1日以来的刻度数。 Exceptions ArgumentOutOfRangeException 当时间戳超出有效范围时抛出此异常 UnixTimeMilliseconds() 获取当前UTC时间的毫秒级时间戳 public static long UnixTimeMilliseconds() Returns long 返回自1970年1月1日 00:00:00 UTC以来经过的毫秒数,加上时区偏移量 Remarks 此方法: 获取当前UTC时间 转换为Unix时间戳(毫秒) 加上TimeOffsetMilliseconds偏移量 相比秒级时间戳提供更高的精度,适用于需要精确时间计算的场景 UnixTimeSeconds() 获取当前UTC时间的秒级时间戳 public static long UnixTimeSeconds() Returns long 返回自1970年1月1日 00:00:00 UTC以来经过的秒数,加上时区偏移量 Remarks 此方法: 获取当前UTC时间 转换为Unix时间戳(秒) 加上TimeOffsetSeconds偏移量 主要用于需要UTC时间戳的场景,如跨时区业务 UtcMillisecondsToDateTime(long) UTC 毫秒时间戳 转换成本地时间 public static DateTime UtcMillisecondsToDateTime(long utcTimestampMilliseconds) Parameters utcTimestampMilliseconds long UTC时间戳,单位毫秒 Returns DateTime 转换后的本地时间。 Remarks 此方法将Unix毫秒时间戳(从1970-01-01 00:00:00 UTC开始的毫秒数)转换为本地时区的DateTime 使用DateTimeOffset.FromUnixTimeMilliseconds进行转换 返回的时间会根据系统时区自动调整 UtcMillisecondsToUtcDateTime(long) UTC 毫秒时间戳 转换成UTC时间 public static DateTime UtcMillisecondsToUtcDateTime(long utcTimestampMilliseconds) Parameters utcTimestampMilliseconds long UTC时间戳,单位毫秒 Returns DateTime 转换后的UTC时间。 Remarks 此方法将Unix毫秒时间戳(从1970-01-01 00:00:00 UTC开始的毫秒数)转换为UTC DateTime 使用DateTimeOffset.FromUnixTimeMilliseconds进行转换 返回的是UTC时区的时间 UtcSecondsToLocalDateTime(long) UTC 时间戳 转换成本地时间 public static DateTime UtcSecondsToLocalDateTime(long utcTimestamp) Parameters utcTimestamp long UTC时间戳,单位秒 Returns DateTime 转换后的本地时间。 Remarks 此方法将Unix时间戳(从1970-01-01 00:00:00 UTC开始的秒数)转换为本地时区的DateTime 使用DateTimeOffset.FromUnixTimeSeconds进行转换 返回的时间会根据系统时区自动调整 UtcSecondsToUtcDateTime(long) UTC 时间戳 转换成UTC时间 public static DateTime UtcSecondsToUtcDateTime(long utcTimestampSeconds) Parameters utcTimestampSeconds long UTC时间戳,单位秒 Returns DateTime 转换后的UTC时间。 Remarks 此方法将Unix时间戳(从1970-01-01 00:00:00 UTC开始的秒数)转换为UTC DateTime 使用DateTimeOffset.FromUnixTimeSeconds进行转换 返回的是UTC时区的时间 UtcToLocalDateTime(long) UTC 时间戳 转换成本地时间 [Obsolete(\"UtcSecondsToLocalDateTime(long utcTimestampSeconds) 代替\")] public static DateTime UtcToLocalDateTime(long utcTimestamp) Parameters utcTimestamp long UTC时间戳,单位秒 Returns DateTime 转换后的本地时间。 Remarks 此方法已过时,请使用UtcSecondsToLocalDateTime替代 用于保持向后兼容性 UtcToUtcDateTime(long) UTC 时间戳 转换成UTC时间 [Obsolete(\"UtcSecondsToUtcDateTime(long utcTimestampSeconds)代替\")] public static DateTime UtcToUtcDateTime(long utcTimestamp) Parameters utcTimestamp long UTC时间戳,单位秒 Returns DateTime 转换后的UTC时间。 Remarks 此方法已过时,请使用UtcSecondsToUtcDateTime替代 用于保持向后兼容性"
  },
  "api/GameFrameX.Utility.html": {
    "href": "api/GameFrameX.Utility.html",
    "title": "Namespace GameFrameX.Utility | GameFrameX.Server",
    "summary": "Namespace GameFrameX.Utility Classes AssemblyHelper 程序集辅助工具类 提供程序集和类型的加载、缓存和查询功能，支持线程安全操作 主要功能： 程序集管理：获取当前应用程序域中的所有已加载程序集 类型发现：查找和缓存程序集中的类型信息 继承关系分析：查找指定类型的实现类、派生类和子类 实例创建：自动实例化符合条件的类型 特性过滤：基于自定义特性标记进行类型筛选 性能特性： 使用 ConcurrentDictionary 提供线程安全的类型缓存 采用 Lazy<T> 实现延迟加载，避免重复的类型扫描 内置异常处理，确保部分程序集加载失败不影响整体功能 适用场景： 插件系统的类型发现和加载 IoC 容器的类型注册和解析 组件化架构的模块扫描 反射操作的性能优化 BigInteger 表示一个大整数的类，支持多种数学运算和转换。 CompressionHelper 压缩解压缩辅助器。 ConsoleHelper 控制台辅助器 EnvironmentHelper 环境帮助器 IdGenerator ID生成器，提供多种生成唯一标识符的方法，包括整数ID、长整数ID和字符串ID IllegalWordDetection 此算法思想来源于“http://www.cnblogs.com/sumtec/archive/2008/02/01/1061742.html”,经测试，检测\"屄defg东正教dsa SofU ckd臺灣青年獨\"这个字符串并替换掉敏感词平均花费2.7ms NetHelper 网络帮助类 提供网络相关的实用工具方法，包括IP地址验证、端口可用性检查、本地IP获取等功能 PlatformRuntimeHelper 平台运行时帮助类 RandomHelper 随机数帮助类 功能概述： 提供线程安全的随机数生成功能 支持多种数据类型的随机数生成（int、long、double、byte[]等） 提供便捷的集合随机选择方法 支持随机选择单个或多个元素 支持获取随机索引 核心特性： 线程安全：使用 Random.Shared 确保多线程环境下的安全性 高性能：避免重复创建 Random 实例 类型安全：支持泛型方法，编译时类型检查 参数验证：使用 .NET 静态方法进行参数检查 应用场景： 游戏开发中的随机事件生成 数据采样和随机测试 随机算法实现 集合元素的随机选择 使用示例： // 生成随机整数 int randomInt = RandomHelper.Next(100); // 从数组中随机选择元素 string[] items = {\"A\", \"B\", \"C\"}; string selected = RandomHelper.RandomSelect(items); // 随机选择多个元素 string[] multipleItems = RandomHelper.Items(items, 2); 注意事项： 所有方法都进行了严格的参数验证 空集合或数组会抛出 ArgumentOutOfRangeException 负数参数会抛出相应的异常 Singleton<T> 单例类 TimeHelper 时间帮助工具类 Structs LNumber"
  },
  "index.html": {
    "href": "index.html",
    "title": "| GameFrameX.Server",
    "summary": "该页面为GameFrameX 的服务器端的接口API 说明主页. 请切换到 API Reference([./api/](https://gameframex.github.io/GameFrameX.Server/api/GameFrameX.StartUp.GameApp.html)) 页面查看Api 列表和接口说明 也可以点击 文档主页(https://gameframex.doc.alianblank.com) 去向文档主站点 也可以点击 项目主页(https://github.com/GameFrameX) 去向项目主站点 镜像站点列表 站点名称 站点地址 码云(Gitee) https://gitee.com/gameframex 开放原子开源基金会(atomgit) https://atomgit.com/gameframex CSDN(gitcode) https://gitcode.net/gameframex GitLab官方(gitlab) https://gitlab.com/gameframex 法国公司 基于GitLab(framagit) https://framagit.org/gameframex 中国计算机学会-开源发展委员会(www.gitlink.org.cn) https://gitlink.org.cn/GameFrameX"
  }
}